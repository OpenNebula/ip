{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.15.1",
    "schemaVersion": 1004,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      }
    }
  },
  "kind": "Package",
  "canonicalReference": "@opennebula/puppeteer!",
  "docComment": "",
  "name": "@opennebula/puppeteer",
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@opennebula/puppeteer!",
      "name": "",
      "members": [
        {
          "kind": "Class",
          "canonicalReference": "@opennebula/puppeteer!Accessibility:class",
          "docComment": "/**\n * The Accessibility class provides methods for inspecting Chromium's accessibility tree. The accessibility tree is used by assistive technology such as {@link https://en.wikipedia.org/wiki/Screen_reader | screen readers} or {@link https://en.wikipedia.org/wiki/Switch_access | switches}.\n *\n * @remarks\n *\n * Accessibility is a very platform-specific thing. On different platforms, there are different screen readers that might have wildly different output.\n *\n * Blink - Chrome's rendering engine - has a concept of \"accessibility tree\", which is then translated into different platform-specific APIs. Accessibility namespace gives users access to the Blink Accessibility Tree.\n *\n * Most of the accessibility tree gets filtered out when converting from Blink AX Tree to Platform-specific AX-Tree or by assistive technologies themselves. By default, Puppeteer tries to approximate this filtering, exposing only the \"interesting\" nodes of the tree.\n *\n * The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the `Accessibility` class.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Accessibility "
            }
          ],
          "releaseTag": "Public",
          "name": "Accessibility",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Accessibility#snapshot:member(1)",
              "docComment": "/**\n * Captures the current state of the accessibility tree. The returned object represents the root accessible node of the page.\n *\n * @remarks\n *\n * **NOTE** The Chromium accessibility tree contains nodes that go unused on most platforms and by most screen readers. Puppeteer will discard them as well for an easier to process tree, unless `interestingOnly` is set to `false`.\n *\n * @returns An AXNode object representing the snapshot.\n *\n * @example\n *\n * An example of dumping the entire accessibility tree:\n * ```js\n * const snapshot = await page.accessibility.snapshot();\n * console.log(snapshot);\n * ```\n *\n * @example\n *\n * An example of logging the focused node's name:\n * ```js\n * const snapshot = await page.accessibility.snapshot();\n * const node = findFocusedNode(snapshot);\n * console.log(node && node.name);\n *\n * function findFocusedNode(node) {\n *   if (node.focused)\n *     return node;\n *   for (const child of node.children || []) {\n *     const foundNode = findFocusedNode(child);\n *     return foundNode;\n *   }\n *   return null;\n * }\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "snapshot(options?: "
                },
                {
                  "kind": "Reference",
                  "text": "SnapshotOptions",
                  "canonicalReference": "@opennebula/puppeteer!SnapshotOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "SerializedAXNode",
                  "canonicalReference": "@opennebula/puppeteer!SerializedAXNode:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "snapshot"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@opennebula/puppeteer!ActionResult:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ActionResult = "
            },
            {
              "kind": "Content",
              "text": "'continue' | 'abort' | 'respond'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ActionResult",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@opennebula/puppeteer!BoundingBox:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface BoundingBox "
            }
          ],
          "releaseTag": "Public",
          "name": "BoundingBox",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!BoundingBox#height:member",
              "docComment": "/**\n * the height of the element in pixels.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "height: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "height",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!BoundingBox#width:member",
              "docComment": "/**\n * the width of the element in pixels.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "width: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "width",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!BoundingBox#x:member",
              "docComment": "/**\n * the x coordinate of the element in pixels.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "x",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!BoundingBox#y:member",
              "docComment": "/**\n * the y coordinate of the element in pixels.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "y",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@opennebula/puppeteer!BoxModel:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface BoxModel "
            }
          ],
          "releaseTag": "Public",
          "name": "BoxModel",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!BoxModel#border:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "border: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<{\n        x: number;\n        y: number;\n    }>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "border",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!BoxModel#content:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "content: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<{\n        x: number;\n        y: number;\n    }>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "content",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!BoxModel#height:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "height: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "height",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!BoxModel#margin:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "margin: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<{\n        x: number;\n        y: number;\n    }>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "margin",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!BoxModel#padding:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "padding: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<{\n        x: number;\n        y: number;\n    }>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "padding",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!BoxModel#width:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "width: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "width",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@opennebula/puppeteer!Browser:class",
          "docComment": "/**\n * A Browser is created when Puppeteer connects to a Chromium instance, either through {@link PuppeteerNode.launch} or {@link Puppeteer.connect}.\n *\n * @remarks\n *\n * The Browser class extends from Puppeteer's {@link EventEmitter} class and will emit various events which are documented in the {@link BrowserEmittedEvents} enum.\n *\n * The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the `Browser` class.\n *\n * @example\n *\n * An example of using a {@link Browser} to create a {@link Page}:\n * ```js\n * const puppeteer = require('puppeteer');\n *\n * (async () => {\n *   const browser = await puppeteer.launch();\n *   const page = await browser.newPage();\n *   await page.goto('https://example.com');\n *   await browser.close();\n * })();\n * ```\n *\n * @example\n *\n * An example of disconnecting from and reconnecting to a {@link Browser}:\n * ```js\n * const puppeteer = require('puppeteer');\n *\n * (async () => {\n *   const browser = await puppeteer.launch();\n *   // Store the endpoint to be able to reconnect to Chromium\n *   const browserWSEndpoint = browser.wsEndpoint();\n *   // Disconnect puppeteer from Chromium\n *   browser.disconnect();\n *\n *   // Use the endpoint to reestablish a connection\n *   const browser2 = await puppeteer.connect({browserWSEndpoint});\n *   // Close Chromium\n *   await browser2.close();\n * })();\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Browser extends "
            },
            {
              "kind": "Reference",
              "text": "EventEmitter",
              "canonicalReference": "@opennebula/puppeteer!EventEmitter:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "Browser",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Browser#browserContexts:member(1)",
              "docComment": "/**\n * Returns an array of all open browser contexts. In a newly created browser, this will return a single instance of {@link BrowserContext}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "browserContexts(): "
                },
                {
                  "kind": "Reference",
                  "text": "BrowserContext",
                  "canonicalReference": "@opennebula/puppeteer!BrowserContext:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "browserContexts"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Browser#close:member(1)",
              "docComment": "/**\n * Closes Chromium and all of its pages (if any were opened). The {@link Browser} object itself is considered to be disposed and cannot be used anymore.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "close(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "close"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Browser#createIncognitoBrowserContext:member(1)",
              "docComment": "/**\n * Creates a new incognito browser context. This won't share cookies/cache with other browser contexts.\n *\n * @example\n * ```js\n * (async () => {\n *  const browser = await puppeteer.launch();\n *   // Create a new incognito browser context.\n *   const context = await browser.createIncognitoBrowserContext();\n *   // Create a new page in a pristine context.\n *   const page = await context.newPage();\n *   // Do stuff\n *   await page.goto('https://example.com');\n * })();\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createIncognitoBrowserContext(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "BrowserContext",
                  "canonicalReference": "@opennebula/puppeteer!BrowserContext:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "createIncognitoBrowserContext"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Browser#defaultBrowserContext:member(1)",
              "docComment": "/**\n * Returns the default browser context. The default browser context cannot be closed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "defaultBrowserContext(): "
                },
                {
                  "kind": "Reference",
                  "text": "BrowserContext",
                  "canonicalReference": "@opennebula/puppeteer!BrowserContext:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "defaultBrowserContext"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Browser#disconnect:member(1)",
              "docComment": "/**\n * Disconnects Puppeteer from the browser, but leaves the Chromium process running. After calling `disconnect`, the {@link Browser} object is considered disposed and cannot be used anymore.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "disconnect(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "disconnect"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Browser#isConnected:member(1)",
              "docComment": "/**\n * Indicates that the browser is connected.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isConnected(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "isConnected"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Browser#newPage:member(1)",
              "docComment": "/**\n * Promise which resolves to a new {@link Page} object. The Page is created in a default browser context.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "newPage(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Page",
                  "canonicalReference": "@opennebula/puppeteer!Page:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "newPage"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Browser#pages:member(1)",
              "docComment": "/**\n * An array of all open pages inside the Browser.\n *\n * @remarks\n *\n * In case of multiple browser contexts, returns an array with all the pages in all browser contexts. Non-visible pages, such as `\"background_page\"`, will not be listed here. You can find them using {@link Target.page}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pages(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Page",
                  "canonicalReference": "@opennebula/puppeteer!Page:class"
                },
                {
                  "kind": "Content",
                  "text": "[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "pages"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Browser#process:member(1)",
              "docComment": "/**\n * The spawned browser process. Returns `null` if the browser instance was created with {@link Puppeteer.connect}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "process(): "
                },
                {
                  "kind": "Reference",
                  "text": "ChildProcess",
                  "canonicalReference": "!\"\\\"child_process\\\"\".ChildProcess:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "process"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Browser#target:member(1)",
              "docComment": "/**\n * The target associated with the browser.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "target(): "
                },
                {
                  "kind": "Reference",
                  "text": "Target",
                  "canonicalReference": "@opennebula/puppeteer!Target:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "target"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Browser#targets:member(1)",
              "docComment": "/**\n * All active targets inside the Browser. In case of multiple browser contexts, returns an array with all the targets in all browser contexts.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "targets(): "
                },
                {
                  "kind": "Reference",
                  "text": "Target",
                  "canonicalReference": "@opennebula/puppeteer!Target:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "targets"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Browser#userAgent:member(1)",
              "docComment": "/**\n * The browser's original user agent. Pages can override the browser user agent with {@link Page.setUserAgent}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "userAgent(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "userAgent"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Browser#version:member(1)",
              "docComment": "/**\n * A string representing the browser name and version.\n *\n * @remarks\n *\n * For headless Chromium, this is similar to `HeadlessChrome/61.0.3153.0`. For non-headless, this is similar to `Chrome/61.0.3153.0`.\n *\n * The format of browser.version() might change with future releases of Chromium.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "version(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "version"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Browser#waitForTarget:member(1)",
              "docComment": "/**\n * Searches for a target in all browser contexts.\n *\n * @param predicate - A function to be run for every target.\n *\n * @returns The first target found that matches the `predicate` function.\n *\n * @example\n *\n * An example of finding a target for a page opened via `window.open`:\n * ```js\n * await page.evaluate(() => window.open('https://www.example.com/'));\n * const newWindowTarget = await browser.waitForTarget(target => target.url() === 'https://www.example.com/');\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "waitForTarget(predicate: "
                },
                {
                  "kind": "Content",
                  "text": "(x: "
                },
                {
                  "kind": "Reference",
                  "text": "Target",
                  "canonicalReference": "@opennebula/puppeteer!Target:class"
                },
                {
                  "kind": "Content",
                  "text": ") => boolean"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "WaitForTargetOptions",
                  "canonicalReference": "@opennebula/puppeteer!WaitForTargetOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Target",
                  "canonicalReference": "@opennebula/puppeteer!Target:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "predicate",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "waitForTarget"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Browser#wsEndpoint:member(1)",
              "docComment": "/**\n * The browser websocket endpoint which can be used as an argument to {@link Puppeteer.connect}.\n *\n * @remarks\n *\n * The format is `ws://${host}:${port}/devtools/browser/<id>`.\n *\n * You can find the `webSocketDebuggerUrl` from `http://${host}:${port}/json/version`. Learn more about the {@link https://chromedevtools.github.io/devtools-protocol | devtools protocol} and the {@link https://chromedevtools.github.io/devtools-protocol/#how-do-i-access-the-browser-target | browser endpoint}.\n *\n * @returns The Browser websocket url.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "wsEndpoint(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "wsEndpoint"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@opennebula/puppeteer!BrowserConnectOptions:interface",
          "docComment": "/**\n * Generic browser options that can be passed when launching any browser or when connecting to an existing browser instance.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface BrowserConnectOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "BrowserConnectOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!BrowserConnectOptions#defaultViewport:member",
              "docComment": "/**\n * Sets the viewport for each page.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "defaultViewport?: "
                },
                {
                  "kind": "Reference",
                  "text": "Viewport",
                  "canonicalReference": "@opennebula/puppeteer!Viewport:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "defaultViewport",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!BrowserConnectOptions#ignoreHTTPSErrors:member",
              "docComment": "/**\n * Whether to ignore HTTPS errors during navigation.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ignoreHTTPSErrors?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "ignoreHTTPSErrors",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!BrowserConnectOptions#slowMo:member",
              "docComment": "/**\n * Slows down Puppeteer operations by the specified amount of milliseconds to aid debugging.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "slowMo?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "slowMo",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!BrowserConnectOptions#targetFilter:member",
              "docComment": "/**\n * Callback to decide if Puppeteer should connect to a given target or not.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "targetFilter?: "
                },
                {
                  "kind": "Reference",
                  "text": "TargetFilterCallback",
                  "canonicalReference": "@opennebula/puppeteer!TargetFilterCallback:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "targetFilter",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@opennebula/puppeteer!BrowserContext:class",
          "docComment": "/**\n * BrowserContexts provide a way to operate multiple independent browser sessions. When a browser is launched, it has a single BrowserContext used by default. The method {@link Browser.newPage | Browser.newPage} creates a page in the default browser context.\n *\n * @remarks\n *\n * The Browser class extends from Puppeteer's {@link EventEmitter} class and will emit various events which are documented in the {@link BrowserContextEmittedEvents} enum.\n *\n * If a page opens another page, e.g. with a `window.open` call, the popup will belong to the parent page's browser context.\n *\n * Puppeteer allows creation of \"incognito\" browser contexts with {@link Browser.createIncognitoBrowserContext | Browser.createIncognitoBrowserContext} method. \"Incognito\" browser contexts don't write any browsing data to disk.\n *\n * The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the `BrowserContext` class.\n *\n * @example\n * ```js\n * // Create a new incognito browser context\n * const context = await browser.createIncognitoBrowserContext();\n * // Create a new page inside context.\n * const page = await context.newPage();\n * // ... do stuff with page ...\n * await page.goto('https://example.com');\n * // Dispose context once it's no longer needed.\n * await context.close();\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class BrowserContext extends "
            },
            {
              "kind": "Reference",
              "text": "EventEmitter",
              "canonicalReference": "@opennebula/puppeteer!EventEmitter:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "BrowserContext",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!BrowserContext#browser:member(1)",
              "docComment": "/**\n * The browser this browser context belongs to.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "browser(): "
                },
                {
                  "kind": "Reference",
                  "text": "Browser",
                  "canonicalReference": "@opennebula/puppeteer!Browser:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "browser"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!BrowserContext#clearPermissionOverrides:member(1)",
              "docComment": "/**\n * Clears all permission overrides for the browser context.\n *\n * @example\n * ```js\n * const context = browser.defaultBrowserContext();\n * context.overridePermissions('https://example.com', ['clipboard-read']);\n * // do stuff ..\n * context.clearPermissionOverrides();\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clearPermissionOverrides(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "clearPermissionOverrides"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!BrowserContext#close:member(1)",
              "docComment": "/**\n * Closes the browser context. All the targets that belong to the browser context will be closed.\n *\n * @remarks\n *\n * Only incognito browser contexts can be closed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "close(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "close"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!BrowserContext#isIncognito:member(1)",
              "docComment": "/**\n * Returns whether BrowserContext is incognito. The default browser context is the only non-incognito browser context.\n *\n * @remarks\n *\n * The default browser context cannot be closed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isIncognito(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "isIncognito"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!BrowserContext#newPage:member(1)",
              "docComment": "/**\n * Creates a new page in the browser context.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "newPage(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Page",
                  "canonicalReference": "@opennebula/puppeteer!Page:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "newPage"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!BrowserContext#overridePermissions:member(1)",
              "docComment": "/**\n * @param origin - The origin to grant permissions to, e.g. \"https://example.com\".\n *\n * @param permissions - An array of permissions to grant. All permissions that are not listed here will be automatically denied.\n *\n * @example\n * ```js\n * const context = browser.defaultBrowserContext();\n * await context.overridePermissions('https://html5demos.com', ['geolocation']);\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "overridePermissions(origin: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", permissions: "
                },
                {
                  "kind": "Reference",
                  "text": "Permission",
                  "canonicalReference": "@opennebula/puppeteer!Permission:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "origin",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "permissions",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  }
                }
              ],
              "name": "overridePermissions"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!BrowserContext#pages:member(1)",
              "docComment": "/**\n * An array of all pages inside the browser context.\n *\n * @returns Promise which resolves to an array of all open pages. Non visible pages, such as `\"background_page\"`, will not be listed here. You can find them using {@link Target.page | the target page}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pages(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Page",
                  "canonicalReference": "@opennebula/puppeteer!Page:class"
                },
                {
                  "kind": "Content",
                  "text": "[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "pages"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!BrowserContext#targets:member(1)",
              "docComment": "/**\n * An array of all active targets inside the browser context.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "targets(): "
                },
                {
                  "kind": "Reference",
                  "text": "Target",
                  "canonicalReference": "@opennebula/puppeteer!Target:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "targets"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!BrowserContext#waitForTarget:member(1)",
              "docComment": "/**\n * This searches for a target in this specific browser context.\n *\n * @param predicate - A function to be run for every target\n *\n * @param options - An object of options. Accepts a timout, which is the maximum wait time in milliseconds. Pass `0` to disable the timeout. Defaults to 30 seconds.\n *\n * @returns Promise which resolves to the first target found that matches the `predicate` function.\n *\n * @example\n *\n * An example of finding a target for a page opened via `window.open`:\n * ```js\n * await page.evaluate(() => window.open('https://www.example.com/'));\n * const newWindowTarget = await browserContext.waitForTarget(target => target.url() === 'https://www.example.com/');\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "waitForTarget(predicate: "
                },
                {
                  "kind": "Content",
                  "text": "(x: "
                },
                {
                  "kind": "Reference",
                  "text": "Target",
                  "canonicalReference": "@opennebula/puppeteer!Target:class"
                },
                {
                  "kind": "Content",
                  "text": ") => boolean"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        timeout?: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Target",
                  "canonicalReference": "@opennebula/puppeteer!Target:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "predicate",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "waitForTarget"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Enum",
          "canonicalReference": "@opennebula/puppeteer!BrowserContextEmittedEvents:enum",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare const enum BrowserContextEmittedEvents "
            }
          ],
          "releaseTag": "Public",
          "name": "BrowserContextEmittedEvents",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@opennebula/puppeteer!BrowserContextEmittedEvents.TargetChanged:member",
              "docComment": "/**\n * Emitted when the url of a target inside the browser context changes. Contains a {@link Target} instance.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "TargetChanged = "
                },
                {
                  "kind": "Content",
                  "text": "\"targetchanged\""
                }
              ],
              "releaseTag": "Public",
              "name": "TargetChanged",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@opennebula/puppeteer!BrowserContextEmittedEvents.TargetCreated:member",
              "docComment": "/**\n * Emitted when a target is created within the browser context, for example when a new page is opened by {@link https://developer.mozilla.org/en-US/docs/Web/API/Window/open | window.open} or by {@link BrowserContext.newPage | browserContext.newPage}\n *\n * Contains a {@link Target} instance.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "TargetCreated = "
                },
                {
                  "kind": "Content",
                  "text": "\"targetcreated\""
                }
              ],
              "releaseTag": "Public",
              "name": "TargetCreated",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@opennebula/puppeteer!BrowserContextEmittedEvents.TargetDestroyed:member",
              "docComment": "/**\n * Emitted when a target is destroyed within the browser context, for example when a page is closed. Contains a {@link Target} instance.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "TargetDestroyed = "
                },
                {
                  "kind": "Content",
                  "text": "\"targetdestroyed\""
                }
              ],
              "releaseTag": "Public",
              "name": "TargetDestroyed",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Enum",
          "canonicalReference": "@opennebula/puppeteer!BrowserEmittedEvents:enum",
          "docComment": "/**\n * All the events a {@link Browser | browser instance} may emit.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare const enum BrowserEmittedEvents "
            }
          ],
          "releaseTag": "Public",
          "name": "BrowserEmittedEvents",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@opennebula/puppeteer!BrowserEmittedEvents.Disconnected:member",
              "docComment": "/**\n * Emitted when Puppeteer gets disconnected from the Chromium instance. This might happen because of one of the following:\n *\n * - Chromium is closed or crashed\n *\n * - The {@link Browser.disconnect | browser.disconnect} method was called.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Disconnected = "
                },
                {
                  "kind": "Content",
                  "text": "\"disconnected\""
                }
              ],
              "releaseTag": "Public",
              "name": "Disconnected",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@opennebula/puppeteer!BrowserEmittedEvents.TargetChanged:member",
              "docComment": "/**\n * Emitted when the url of a target changes. Contains a {@link Target} instance.\n *\n * @remarks\n *\n * Note that this includes target changes in incognito browser contexts.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "TargetChanged = "
                },
                {
                  "kind": "Content",
                  "text": "\"targetchanged\""
                }
              ],
              "releaseTag": "Public",
              "name": "TargetChanged",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@opennebula/puppeteer!BrowserEmittedEvents.TargetCreated:member",
              "docComment": "/**\n * Emitted when a target is created, for example when a new page is opened by {@link https://developer.mozilla.org/en-US/docs/Web/API/Window/open | window.open} or by {@link Browser.newPage | browser.newPage}\n *\n * Contains a {@link Target} instance.\n *\n * @remarks\n *\n * Note that this includes target creations in incognito browser contexts.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "TargetCreated = "
                },
                {
                  "kind": "Content",
                  "text": "\"targetcreated\""
                }
              ],
              "releaseTag": "Public",
              "name": "TargetCreated",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@opennebula/puppeteer!BrowserEmittedEvents.TargetDestroyed:member",
              "docComment": "/**\n * Emitted when a target is destroyed, for example when a page is closed. Contains a {@link Target} instance.\n *\n * @remarks\n *\n * Note that this includes target destructions in incognito browser contexts.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "TargetDestroyed = "
                },
                {
                  "kind": "Content",
                  "text": "\"targetdestroyed\""
                }
              ],
              "releaseTag": "Public",
              "name": "TargetDestroyed",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@opennebula/puppeteer!BrowserFetcher:class",
          "docComment": "/**\n * BrowserFetcher can download and manage different versions of Chromium and Firefox.\n *\n * @remarks\n *\n * BrowserFetcher operates on revision strings that specify a precise version of Chromium, e.g. `\"533271\"`. Revision strings can be obtained from {@link http://omahaproxy.appspot.com/ | omahaproxy.appspot.com}. In the Firefox case, BrowserFetcher downloads Firefox Nightly and operates on version numbers such as `\"75\"`.\n *\n * The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the `BrowserFetcher` class.\n *\n * @example\n *\n * An example of using BrowserFetcher to download a specific version of Chromium and running Puppeteer against it:\n * ```js\n * const browserFetcher = puppeteer.createBrowserFetcher();\n * const revisionInfo = await browserFetcher.download('533271');\n * const browser = await puppeteer.launch({executablePath: revisionInfo.executablePath})\n * ```\n *\n * **NOTE** BrowserFetcher is not designed to work concurrently with other instances of BrowserFetcher that share the same downloads directory.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class BrowserFetcher "
            }
          ],
          "releaseTag": "Public",
          "name": "BrowserFetcher",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!BrowserFetcher#canDownload:member(1)",
              "docComment": "/**\n * Initiates a HEAD request to check if the revision is available.\n *\n * @remarks\n *\n * This method is affected by the current `product`.\n *\n * @param revision - The revision to check availability for.\n *\n * @returns A promise that resolves to `true` if the revision could be downloaded from the host.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "canDownload(revision: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "revision",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "canDownload"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!BrowserFetcher#download:member(1)",
              "docComment": "/**\n * Initiates a GET request to download the revision from the host.\n *\n * @remarks\n *\n * This method is affected by the current `product`.\n *\n * @param revision - The revision to download.\n *\n * @param progressCallback - A function that will be called with two arguments: How many bytes have been downloaded and the total number of bytes of the download.\n *\n * @returns A promise with revision information when the revision is downloaded and extracted.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "download(revision: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", progressCallback?: "
                },
                {
                  "kind": "Content",
                  "text": "(x: number, y: number) => void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "BrowserFetcherRevisionInfo",
                  "canonicalReference": "@opennebula/puppeteer!BrowserFetcherRevisionInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "revision",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "progressCallback",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "download"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!BrowserFetcher#host:member(1)",
              "docComment": "/**\n * @returns The download host being used.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "host(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "host"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!BrowserFetcher#localRevisions:member(1)",
              "docComment": "/**\n * @remarks\n *\n * This method is affected by the current `product`.\n *\n * @returns A promise with a list of all revision strings (for the current `product`) available locally on disk.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "localRevisions(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "localRevisions"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!BrowserFetcher#platform:member(1)",
              "docComment": "/**\n * @returns Returns the current `Platform`, which is one of `mac`, `linux`, `win32` or `win64`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "platform(): "
                },
                {
                  "kind": "Reference",
                  "text": "Platform",
                  "canonicalReference": "@opennebula/puppeteer!Platform:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "platform"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!BrowserFetcher#product:member(1)",
              "docComment": "/**\n * @returns Returns the current `Product`, which is one of `chrome` or `firefox`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "product(): "
                },
                {
                  "kind": "Reference",
                  "text": "Product",
                  "canonicalReference": "@opennebula/puppeteer!Product:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "product"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!BrowserFetcher#remove:member(1)",
              "docComment": "/**\n * @remarks\n *\n * This method is affected by the current `product`.\n *\n * @param revision - A revision to remove for the current `product`.\n *\n * @returns A promise that resolves when the revision has been removes or throws if the revision has not been downloaded.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "remove(revision: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "revision",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "remove"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!BrowserFetcher#revisionInfo:member(1)",
              "docComment": "/**\n * @param revision - The revision to get info for.\n *\n * @returns The revision info for the given revision.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "revisionInfo(revision: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "BrowserFetcherRevisionInfo",
                  "canonicalReference": "@opennebula/puppeteer!BrowserFetcherRevisionInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "revision",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "revisionInfo"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@opennebula/puppeteer!BrowserFetcherOptions:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface BrowserFetcherOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "BrowserFetcherOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!BrowserFetcherOptions#host:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "host?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "host",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!BrowserFetcherOptions#path:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "path?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "path",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!BrowserFetcherOptions#platform:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "platform?: "
                },
                {
                  "kind": "Reference",
                  "text": "Platform",
                  "canonicalReference": "@opennebula/puppeteer!Platform:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "platform",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!BrowserFetcherOptions#product:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "product?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "product",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@opennebula/puppeteer!BrowserFetcherRevisionInfo:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface BrowserFetcherRevisionInfo "
            }
          ],
          "releaseTag": "Public",
          "name": "BrowserFetcherRevisionInfo",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!BrowserFetcherRevisionInfo#executablePath:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "executablePath: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "executablePath",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!BrowserFetcherRevisionInfo#folderPath:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "folderPath: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "folderPath",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!BrowserFetcherRevisionInfo#local:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "local: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "local",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!BrowserFetcherRevisionInfo#product:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "product: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "product",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!BrowserFetcherRevisionInfo#revision:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "revision: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "revision",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!BrowserFetcherRevisionInfo#url:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "url: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "url",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@opennebula/puppeteer!BrowserLaunchArgumentOptions:interface",
          "docComment": "/**\n * Launcher options that only apply to Chrome.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface BrowserLaunchArgumentOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "BrowserLaunchArgumentOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!BrowserLaunchArgumentOptions#args:member",
              "docComment": "/**\n * Additional command line arguments to pass to the browser instance.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "args?: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "args",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!BrowserLaunchArgumentOptions#devtools:member",
              "docComment": "/**\n * Whether to auto-open a DevTools panel for each tab. If this is set to `true`, then `headless` will be set to `false` automatically.\n *\n * @defaultValue\n *\n * `false`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "devtools?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "devtools",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!BrowserLaunchArgumentOptions#headless:member",
              "docComment": "/**\n * Whether to run the browser in headless mode.\n *\n * @defaultValue\n *\n * true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "headless?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "headless",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!BrowserLaunchArgumentOptions#userDataDir:member",
              "docComment": "/**\n * Path to a user data directory. {@link https://chromium.googlesource.com/chromium/src/+/master/docs/user_data_dir.md | see the Chromium docs} for more info.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "userDataDir?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "userDataDir",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@opennebula/puppeteer!CDPSession:class",
          "docComment": "/**\n * The `CDPSession` instances are used to talk raw Chrome Devtools Protocol.\n *\n * @remarks\n *\n * Protocol methods can be called with {@link CDPSession.send} method and protocol events can be subscribed to with `CDPSession.on` method.\n *\n * Useful links: {@link https://chromedevtools.github.io/devtools-protocol/ | DevTools Protocol Viewer} and {@link https://github.com/aslushnikov/getting-started-with-cdp/blob/master/README.md | Getting Started with DevTools Protocol}.\n *\n * The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the `CDPSession` class.\n *\n * @example\n * ```js\n * const client = await page.target().createCDPSession();\n * await client.send('Animation.enable');\n * client.on('Animation.animationCreated', () => console.log('Animation created!'));\n * const response = await client.send('Animation.getPlaybackRate');\n * console.log('playback rate is ' + response.playbackRate);\n * await client.send('Animation.setPlaybackRate', {\n *   playbackRate: response.playbackRate / 2\n * });\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class CDPSession extends "
            },
            {
              "kind": "Reference",
              "text": "EventEmitter",
              "canonicalReference": "@opennebula/puppeteer!EventEmitter:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "CDPSession",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!CDPSession#connection:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "connection(): "
                },
                {
                  "kind": "Reference",
                  "text": "Connection",
                  "canonicalReference": "@opennebula/puppeteer!Connection:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "connection"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!CDPSession#detach:member(1)",
              "docComment": "/**\n * Detaches the cdpSession from the target. Once detached, the cdpSession object won't emit any events and can't be used to send messages.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "detach(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "detach"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!CDPSession#send:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "send<T extends "
                },
                {
                  "kind": "Content",
                  "text": "keyof "
                },
                {
                  "kind": "Reference",
                  "text": "ProtocolMapping.Commands",
                  "canonicalReference": "devtools-protocol!ProtocolMapping.Commands:interface"
                },
                {
                  "kind": "Content",
                  "text": ">(method: "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ", ...paramArgs: "
                },
                {
                  "kind": "Reference",
                  "text": "ProtocolMapping.Commands",
                  "canonicalReference": "devtools-protocol!ProtocolMapping.Commands:interface"
                },
                {
                  "kind": "Content",
                  "text": "[T]['paramsType']"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ProtocolMapping.Commands",
                  "canonicalReference": "devtools-protocol!ProtocolMapping.Commands:interface"
                },
                {
                  "kind": "Content",
                  "text": "[T]['returnType']>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "method",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "paramArgs",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 8
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "send"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@opennebula/puppeteer!CDPSessionOnMessageObject:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface CDPSessionOnMessageObject "
            }
          ],
          "releaseTag": "Public",
          "name": "CDPSessionOnMessageObject",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!CDPSessionOnMessageObject#error:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "error: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        message: string;\n        data: any;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "error",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!CDPSessionOnMessageObject#id:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "id?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "id",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!CDPSessionOnMessageObject#method:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "method: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "method",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!CDPSessionOnMessageObject#params:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "params: "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<string, unknown>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "params",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!CDPSessionOnMessageObject#result:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "result?: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "result",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@opennebula/puppeteer!ChromeReleaseChannel:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ChromeReleaseChannel = "
            },
            {
              "kind": "Content",
              "text": "'chrome' | 'chrome-beta' | 'chrome-canary' | 'chrome-dev'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ChromeReleaseChannel",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@opennebula/puppeteer!clearCustomQueryHandlers:function(1)",
          "docComment": "/**\n * Clears all registered handlers.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function clearCustomQueryHandlers(): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "clearCustomQueryHandlers"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@opennebula/puppeteer!ClickOptions:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ClickOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "ClickOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!ClickOptions#button:member",
              "docComment": "/**\n * @defaultValue\n *\n * 'left'\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "button?: "
                },
                {
                  "kind": "Content",
                  "text": "'left' | 'right' | 'middle'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "button",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!ClickOptions#clickCount:member",
              "docComment": "/**\n * @defaultValue\n *\n * 1\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clickCount?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "clickCount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!ClickOptions#delay:member",
              "docComment": "/**\n * Time to wait between `mousedown` and `mouseup` in milliseconds.\n *\n * @defaultValue\n *\n * 0\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "delay?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "delay",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@opennebula/puppeteer!CommonEventEmitter:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface CommonEventEmitter "
            }
          ],
          "releaseTag": "Public",
          "name": "CommonEventEmitter",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@opennebula/puppeteer!CommonEventEmitter#addListener:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addListener(event: "
                },
                {
                  "kind": "Reference",
                  "text": "EventType",
                  "canonicalReference": "@opennebula/puppeteer!EventType:type"
                },
                {
                  "kind": "Content",
                  "text": ", handler: "
                },
                {
                  "kind": "Reference",
                  "text": "Handler",
                  "canonicalReference": "@opennebula/puppeteer!Handler:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "CommonEventEmitter",
                  "canonicalReference": "@opennebula/puppeteer!CommonEventEmitter:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "handler",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "addListener"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@opennebula/puppeteer!CommonEventEmitter#emit:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "emit(event: "
                },
                {
                  "kind": "Reference",
                  "text": "EventType",
                  "canonicalReference": "@opennebula/puppeteer!EventType:type"
                },
                {
                  "kind": "Content",
                  "text": ", eventData?: "
                },
                {
                  "kind": "Content",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "eventData",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "emit"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@opennebula/puppeteer!CommonEventEmitter#listenerCount:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "listenerCount(event: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "listenerCount"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@opennebula/puppeteer!CommonEventEmitter#off:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "off(event: "
                },
                {
                  "kind": "Reference",
                  "text": "EventType",
                  "canonicalReference": "@opennebula/puppeteer!EventType:type"
                },
                {
                  "kind": "Content",
                  "text": ", handler: "
                },
                {
                  "kind": "Reference",
                  "text": "Handler",
                  "canonicalReference": "@opennebula/puppeteer!Handler:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "CommonEventEmitter",
                  "canonicalReference": "@opennebula/puppeteer!CommonEventEmitter:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "handler",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "off"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@opennebula/puppeteer!CommonEventEmitter#on:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on(event: "
                },
                {
                  "kind": "Reference",
                  "text": "EventType",
                  "canonicalReference": "@opennebula/puppeteer!EventType:type"
                },
                {
                  "kind": "Content",
                  "text": ", handler: "
                },
                {
                  "kind": "Reference",
                  "text": "Handler",
                  "canonicalReference": "@opennebula/puppeteer!Handler:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "CommonEventEmitter",
                  "canonicalReference": "@opennebula/puppeteer!CommonEventEmitter:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "handler",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "on"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@opennebula/puppeteer!CommonEventEmitter#once:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "once(event: "
                },
                {
                  "kind": "Reference",
                  "text": "EventType",
                  "canonicalReference": "@opennebula/puppeteer!EventType:type"
                },
                {
                  "kind": "Content",
                  "text": ", handler: "
                },
                {
                  "kind": "Reference",
                  "text": "Handler",
                  "canonicalReference": "@opennebula/puppeteer!Handler:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "CommonEventEmitter",
                  "canonicalReference": "@opennebula/puppeteer!CommonEventEmitter:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "handler",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "once"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@opennebula/puppeteer!CommonEventEmitter#removeAllListeners:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeAllListeners(event?: "
                },
                {
                  "kind": "Reference",
                  "text": "EventType",
                  "canonicalReference": "@opennebula/puppeteer!EventType:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "CommonEventEmitter",
                  "canonicalReference": "@opennebula/puppeteer!CommonEventEmitter:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "removeAllListeners"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@opennebula/puppeteer!CommonEventEmitter#removeListener:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeListener(event: "
                },
                {
                  "kind": "Reference",
                  "text": "EventType",
                  "canonicalReference": "@opennebula/puppeteer!EventType:type"
                },
                {
                  "kind": "Content",
                  "text": ", handler: "
                },
                {
                  "kind": "Reference",
                  "text": "Handler",
                  "canonicalReference": "@opennebula/puppeteer!Handler:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "CommonEventEmitter",
                  "canonicalReference": "@opennebula/puppeteer!CommonEventEmitter:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "handler",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "removeListener"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@opennebula/puppeteer!connect:function(1)",
          "docComment": "/**\n * This method attaches Puppeteer to an existing browser instance.\n *\n * @remarks\n *\n * @param options - Set of configurable options to set on the browser.\n *\n * @returns Promise which resolves to browser instance.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function connect(options: "
            },
            {
              "kind": "Reference",
              "text": "ConnectOptions",
              "canonicalReference": "@opennebula/puppeteer!ConnectOptions:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Browser",
              "canonicalReference": "@opennebula/puppeteer!Browser:class"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "connect"
        },
        {
          "kind": "Class",
          "canonicalReference": "@opennebula/puppeteer!Connection:class",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Connection extends "
            },
            {
              "kind": "Reference",
              "text": "EventEmitter",
              "canonicalReference": "@opennebula/puppeteer!EventEmitter:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "Connection",
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@opennebula/puppeteer!Connection#_callbacks:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_callbacks: "
                },
                {
                  "kind": "Reference",
                  "text": "Map",
                  "canonicalReference": "!Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "<number, "
                },
                {
                  "kind": "Reference",
                  "text": "ConnectionCallback",
                  "canonicalReference": "@opennebula/puppeteer!ConnectionCallback:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "_callbacks",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@opennebula/puppeteer!Connection#_closed:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_closed: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "_closed",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@opennebula/puppeteer!Connection#_delay:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_delay: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "_delay",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@opennebula/puppeteer!Connection#_lastId:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_lastId: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "_lastId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Connection#_onClose:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_onClose(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "_onClose"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Connection#_onMessage:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_onMessage(message: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "_onMessage"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Connection#_rawSend:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_rawSend(message: "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<string, unknown>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "_rawSend"
            },
            {
              "kind": "Property",
              "canonicalReference": "@opennebula/puppeteer!Connection#_sessions:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_sessions: "
                },
                {
                  "kind": "Reference",
                  "text": "Map",
                  "canonicalReference": "!Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string, "
                },
                {
                  "kind": "Reference",
                  "text": "CDPSession",
                  "canonicalReference": "@opennebula/puppeteer!CDPSession:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "_sessions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@opennebula/puppeteer!Connection#_transport:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_transport: "
                },
                {
                  "kind": "Reference",
                  "text": "ConnectionTransport",
                  "canonicalReference": "@opennebula/puppeteer!ConnectionTransport:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "_transport",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@opennebula/puppeteer!Connection#_url:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_url: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "_url",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Constructor",
              "canonicalReference": "@opennebula/puppeteer!Connection:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `Connection` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(url: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", transport: "
                },
                {
                  "kind": "Reference",
                  "text": "ConnectionTransport",
                  "canonicalReference": "@opennebula/puppeteer!ConnectionTransport:interface"
                },
                {
                  "kind": "Content",
                  "text": ", delay?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "url",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "transport",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "delay",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Connection#createSession:member(1)",
              "docComment": "/**\n * @param targetInfo - The target info\n *\n * @returns The CDP session that is created\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createSession(targetInfo: "
                },
                {
                  "kind": "Reference",
                  "text": "Protocol.Target.TargetInfo",
                  "canonicalReference": "devtools-protocol!Protocol.Target.TargetInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "CDPSession",
                  "canonicalReference": "@opennebula/puppeteer!CDPSession:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "targetInfo",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "createSession"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Connection#dispose:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dispose(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "dispose"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Connection.fromSession:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static fromSession(session: "
                },
                {
                  "kind": "Reference",
                  "text": "CDPSession",
                  "canonicalReference": "@opennebula/puppeteer!CDPSession:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Connection",
                  "canonicalReference": "@opennebula/puppeteer!Connection:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "session",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "fromSession"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Connection#send:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "send<T extends "
                },
                {
                  "kind": "Content",
                  "text": "keyof "
                },
                {
                  "kind": "Reference",
                  "text": "ProtocolMapping.Commands",
                  "canonicalReference": "devtools-protocol!ProtocolMapping.Commands:interface"
                },
                {
                  "kind": "Content",
                  "text": ">(method: "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ", ...paramArgs: "
                },
                {
                  "kind": "Reference",
                  "text": "ProtocolMapping.Commands",
                  "canonicalReference": "devtools-protocol!ProtocolMapping.Commands:interface"
                },
                {
                  "kind": "Content",
                  "text": "[T]['paramsType']"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ProtocolMapping.Commands",
                  "canonicalReference": "devtools-protocol!ProtocolMapping.Commands:interface"
                },
                {
                  "kind": "Content",
                  "text": "[T]['returnType']>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "method",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "paramArgs",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 8
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "send"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Connection#session:member(1)",
              "docComment": "/**\n * @param sessionId - The session id\n *\n * @returns The current CDP session if it exists\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "session(sessionId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "CDPSession",
                  "canonicalReference": "@opennebula/puppeteer!CDPSession:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "sessionId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "session"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Connection#url:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "url(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "url"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@opennebula/puppeteer!ConnectionCallback:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ConnectionCallback "
            }
          ],
          "releaseTag": "Public",
          "name": "ConnectionCallback",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!ConnectionCallback#error:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "error: "
                },
                {
                  "kind": "Reference",
                  "text": "Error",
                  "canonicalReference": "!Error:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "error",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!ConnectionCallback#method:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "method: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "method",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!ConnectionCallback#reject:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "reject: "
                },
                {
                  "kind": "Reference",
                  "text": "Function",
                  "canonicalReference": "!Function:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "reject",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!ConnectionCallback#resolve:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "resolve: "
                },
                {
                  "kind": "Reference",
                  "text": "Function",
                  "canonicalReference": "!Function:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "resolve",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@opennebula/puppeteer!ConnectionTransport:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ConnectionTransport "
            }
          ],
          "releaseTag": "Public",
          "name": "ConnectionTransport",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@opennebula/puppeteer!ConnectionTransport#close:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "close(): "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "close"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!ConnectionTransport#onclose:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onclose?: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onclose",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!ConnectionTransport#onmessage:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onmessage?: "
                },
                {
                  "kind": "Content",
                  "text": "(message: string) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onmessage",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@opennebula/puppeteer!ConnectionTransport#send:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "send(string: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "string",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "send"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@opennebula/puppeteer!ConnectOptions:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ConnectOptions extends "
            },
            {
              "kind": "Reference",
              "text": "BrowserConnectOptions",
              "canonicalReference": "@opennebula/puppeteer!BrowserConnectOptions:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "ConnectOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!ConnectOptions#browserURL:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "browserURL?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "browserURL",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!ConnectOptions#browserWSEndpoint:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "browserWSEndpoint?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "browserWSEndpoint",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!ConnectOptions#product:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "product?: "
                },
                {
                  "kind": "Reference",
                  "text": "Product",
                  "canonicalReference": "@opennebula/puppeteer!Product:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "product",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!ConnectOptions#transport:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "transport?: "
                },
                {
                  "kind": "Reference",
                  "text": "ConnectionTransport",
                  "canonicalReference": "@opennebula/puppeteer!ConnectionTransport:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "transport",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@opennebula/puppeteer!ConsoleMessage:class",
          "docComment": "/**\n * ConsoleMessage objects are dispatched by page via the 'console' event.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class ConsoleMessage "
            }
          ],
          "releaseTag": "Public",
          "name": "ConsoleMessage",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@opennebula/puppeteer!ConsoleMessage:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `ConsoleMessage` class\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(type: "
                },
                {
                  "kind": "Reference",
                  "text": "ConsoleMessageType",
                  "canonicalReference": "@opennebula/puppeteer!ConsoleMessageType:type"
                },
                {
                  "kind": "Content",
                  "text": ", text: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", args: "
                },
                {
                  "kind": "Reference",
                  "text": "JSHandle",
                  "canonicalReference": "@opennebula/puppeteer!JSHandle:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ", stackTraceLocations: "
                },
                {
                  "kind": "Reference",
                  "text": "ConsoleMessageLocation",
                  "canonicalReference": "@opennebula/puppeteer!ConsoleMessageLocation:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "type",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "text",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "args",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 7
                  }
                },
                {
                  "parameterName": "stackTraceLocations",
                  "parameterTypeTokenRange": {
                    "startIndex": 8,
                    "endIndex": 10
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!ConsoleMessage#args:member(1)",
              "docComment": "/**\n * @returns An array of arguments passed to the console.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "args(): "
                },
                {
                  "kind": "Reference",
                  "text": "JSHandle",
                  "canonicalReference": "@opennebula/puppeteer!JSHandle:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "args"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!ConsoleMessage#location:member(1)",
              "docComment": "/**\n * @returns The location of the console message.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "location(): "
                },
                {
                  "kind": "Reference",
                  "text": "ConsoleMessageLocation",
                  "canonicalReference": "@opennebula/puppeteer!ConsoleMessageLocation:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "location"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!ConsoleMessage#stackTrace:member(1)",
              "docComment": "/**\n * @returns The array of locations on the stack of the console message.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stackTrace(): "
                },
                {
                  "kind": "Reference",
                  "text": "ConsoleMessageLocation",
                  "canonicalReference": "@opennebula/puppeteer!ConsoleMessageLocation:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "stackTrace"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!ConsoleMessage#text:member(1)",
              "docComment": "/**\n * @returns The text of the console message.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "text(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "text"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!ConsoleMessage#type:member(1)",
              "docComment": "/**\n * @returns The type of the console message.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type(): "
                },
                {
                  "kind": "Reference",
                  "text": "ConsoleMessageType",
                  "canonicalReference": "@opennebula/puppeteer!ConsoleMessageType:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "type"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@opennebula/puppeteer!ConsoleMessageLocation:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ConsoleMessageLocation "
            }
          ],
          "releaseTag": "Public",
          "name": "ConsoleMessageLocation",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!ConsoleMessageLocation#columnNumber:member",
              "docComment": "/**\n * 0-based column number in the resource if known or `undefined` otherwise.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "columnNumber?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "columnNumber",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!ConsoleMessageLocation#lineNumber:member",
              "docComment": "/**\n * 0-based line number in the resource if known or `undefined` otherwise.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lineNumber?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "lineNumber",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!ConsoleMessageLocation#url:member",
              "docComment": "/**\n * URL of the resource if known or `undefined` otherwise.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "url?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "url",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@opennebula/puppeteer!ConsoleMessageType:type",
          "docComment": "/**\n * The supported types for console messages.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ConsoleMessageType = "
            },
            {
              "kind": "Content",
              "text": "'log' | 'debug' | 'info' | 'error' | 'warning' | 'dir' | 'dirxml' | 'table' | 'trace' | 'clear' | 'startGroup' | 'startGroupCollapsed' | 'endGroup' | 'assert' | 'profile' | 'profileEnd' | 'count' | 'timeEnd' | 'verbose'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ConsoleMessageType",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@opennebula/puppeteer!ContinueRequestOverrides:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ContinueRequestOverrides "
            }
          ],
          "releaseTag": "Public",
          "name": "ContinueRequestOverrides",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!ContinueRequestOverrides#headers:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "headers?: "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<string, string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "headers",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!ContinueRequestOverrides#method:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "method?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "method",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!ContinueRequestOverrides#postData:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "postData?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "postData",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!ContinueRequestOverrides#url:member",
              "docComment": "/**\n * If set, the request URL will change. This is not a redirect.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "url?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "url",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@opennebula/puppeteer!Coverage:class",
          "docComment": "/**\n * The Coverage class provides methods to gathers information about parts of JavaScript and CSS that were used by the page.\n *\n * @remarks\n *\n * To output coverage in a form consumable by {@link https://github.com/istanbuljs | Istanbul}, see {@link https://github.com/istanbuljs/puppeteer-to-istanbul | puppeteer-to-istanbul}.\n *\n * @example\n *\n * An example of using JavaScript and CSS coverage to get percentage of initially executed code:\n * ```js\n * // Enable both JavaScript and CSS coverage\n * await Promise.all([\n *   page.coverage.startJSCoverage(),\n *   page.coverage.startCSSCoverage()\n * ]);\n * // Navigate to page\n * await page.goto('https://example.com');\n * // Disable both JavaScript and CSS coverage\n * const [jsCoverage, cssCoverage] = await Promise.all([\n *   page.coverage.stopJSCoverage(),\n *   page.coverage.stopCSSCoverage(),\n * ]);\n * let totalBytes = 0;\n * let usedBytes = 0;\n * const coverage = [...jsCoverage, ...cssCoverage];\n * for (const entry of coverage) {\n *   totalBytes += entry.text.length;\n *   for (const range of entry.ranges)\n *     usedBytes += range.end - range.start - 1;\n * }\n * console.log(`Bytes used: ${usedBytes / totalBytes * 100}%`);\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Coverage "
            }
          ],
          "releaseTag": "Public",
          "name": "Coverage",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@opennebula/puppeteer!Coverage:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `Coverage` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(client: "
                },
                {
                  "kind": "Reference",
                  "text": "CDPSession",
                  "canonicalReference": "@opennebula/puppeteer!CDPSession:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "client",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Coverage#startCSSCoverage:member(1)",
              "docComment": "/**\n * @param options - Set of configurable options for coverage, defaults to `resetOnNavigation : true`\n *\n * @returns Promise that resolves when coverage is started.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "startCSSCoverage(options?: "
                },
                {
                  "kind": "Reference",
                  "text": "CSSCoverageOptions",
                  "canonicalReference": "@opennebula/puppeteer!CSSCoverageOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "startCSSCoverage"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Coverage#startJSCoverage:member(1)",
              "docComment": "/**\n * @remarks\n *\n * Anonymous scripts are ones that don't have an associated url. These are scripts that are dynamically created on the page using `eval` or `new Function`. If `reportAnonymousScripts` is set to `true`, anonymous scripts will have `__puppeteer_evaluation_script__` as their URL.\n *\n * @param options - Set of configurable options for coverage defaults to `resetOnNavigation : true, reportAnonymousScripts : false`\n *\n * @returns Promise that resolves when coverage is started.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "startJSCoverage(options?: "
                },
                {
                  "kind": "Reference",
                  "text": "JSCoverageOptions",
                  "canonicalReference": "@opennebula/puppeteer!JSCoverageOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "startJSCoverage"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Coverage#stopCSSCoverage:member(1)",
              "docComment": "/**\n * @remarks\n *\n * CSS Coverage doesn't include dynamically injected style tags without sourceURLs.\n *\n * @returns Promise that resolves to the array of coverage reports for all stylesheets.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stopCSSCoverage(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "CoverageEntry",
                  "canonicalReference": "@opennebula/puppeteer!CoverageEntry:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "stopCSSCoverage"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Coverage#stopJSCoverage:member(1)",
              "docComment": "/**\n * @remarks\n *\n * JavaScript Coverage doesn't include anonymous scripts by default. However, scripts with sourceURLs are reported.\n *\n * @returns Promise that resolves to the array of coverage reports for all scripts.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stopJSCoverage(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "CoverageEntry",
                  "canonicalReference": "@opennebula/puppeteer!CoverageEntry:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "stopJSCoverage"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@opennebula/puppeteer!CoverageEntry:interface",
          "docComment": "/**\n * The CoverageEntry class represents one entry of the coverage report.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface CoverageEntry "
            }
          ],
          "releaseTag": "Public",
          "name": "CoverageEntry",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!CoverageEntry#ranges:member",
              "docComment": "/**\n * The covered range as start and end positions.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ranges: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<{\n        start: number;\n        end: number;\n    }>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "ranges",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!CoverageEntry#text:member",
              "docComment": "/**\n * The content of the style sheet or script.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "text: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "text",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!CoverageEntry#url:member",
              "docComment": "/**\n * The URL of the style sheet or script.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "url: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "url",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@opennebula/puppeteer!Credentials:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Credentials "
            }
          ],
          "releaseTag": "Public",
          "name": "Credentials",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!Credentials#password:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "password: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "password",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!Credentials#username:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "username: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "username",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@opennebula/puppeteer!CSSCoverage:class",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class CSSCoverage "
            }
          ],
          "releaseTag": "Public",
          "name": "CSSCoverage",
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@opennebula/puppeteer!CSSCoverage#_client:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_client: "
                },
                {
                  "kind": "Reference",
                  "text": "CDPSession",
                  "canonicalReference": "@opennebula/puppeteer!CDPSession:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "_client",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@opennebula/puppeteer!CSSCoverage#_enabled:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_enabled: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "_enabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@opennebula/puppeteer!CSSCoverage#_eventListeners:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_eventListeners: "
                },
                {
                  "kind": "Reference",
                  "text": "PuppeteerEventListener",
                  "canonicalReference": "@opennebula/puppeteer!PuppeteerEventListener:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "_eventListeners",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!CSSCoverage#_onExecutionContextsCleared:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_onExecutionContextsCleared(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "_onExecutionContextsCleared"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!CSSCoverage#_onStyleSheet:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_onStyleSheet(event: "
                },
                {
                  "kind": "Reference",
                  "text": "Protocol.CSS.StyleSheetAddedEvent",
                  "canonicalReference": "devtools-protocol!Protocol.CSS.StyleSheetAddedEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "_onStyleSheet"
            },
            {
              "kind": "Property",
              "canonicalReference": "@opennebula/puppeteer!CSSCoverage#_reportAnonymousScripts:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_reportAnonymousScripts: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "_reportAnonymousScripts",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@opennebula/puppeteer!CSSCoverage#_resetOnNavigation:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_resetOnNavigation: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "_resetOnNavigation",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@opennebula/puppeteer!CSSCoverage#_stylesheetSources:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_stylesheetSources: "
                },
                {
                  "kind": "Reference",
                  "text": "Map",
                  "canonicalReference": "!Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string, string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "_stylesheetSources",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@opennebula/puppeteer!CSSCoverage#_stylesheetURLs:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_stylesheetURLs: "
                },
                {
                  "kind": "Reference",
                  "text": "Map",
                  "canonicalReference": "!Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string, string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "_stylesheetURLs",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Constructor",
              "canonicalReference": "@opennebula/puppeteer!CSSCoverage:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `CSSCoverage` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(client: "
                },
                {
                  "kind": "Reference",
                  "text": "CDPSession",
                  "canonicalReference": "@opennebula/puppeteer!CDPSession:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "client",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!CSSCoverage#start:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "start(options?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        resetOnNavigation?: boolean;\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "start"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!CSSCoverage#stop:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stop(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "CoverageEntry",
                  "canonicalReference": "@opennebula/puppeteer!CoverageEntry:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "stop"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@opennebula/puppeteer!CSSCoverageOptions:interface",
          "docComment": "/**\n * Set of configurable options for CSS coverage.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface CSSCoverageOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "CSSCoverageOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!CSSCoverageOptions#resetOnNavigation:member",
              "docComment": "/**\n * Whether to reset coverage on every navigation.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "resetOnNavigation?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "resetOnNavigation",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@opennebula/puppeteer!CustomError:class",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class CustomError extends "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "CustomError",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@opennebula/puppeteer!CustomError:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `CustomError` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(message: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@opennebula/puppeteer!CustomQueryHandler:interface",
          "docComment": "/**\n * Contains two functions `queryOne` and `queryAll` that can be {@link Puppeteer.registerCustomQueryHandler | registered} as alternative querying strategies. The functions `queryOne` and `queryAll` are executed in the page context. `queryOne` should take an `Element` and a selector string as argument and return a single `Element` or `null` if no element is found. `queryAll` takes the same arguments but should instead return a `NodeListOf<Element>` or `Array<Element>` with all the elements that match the given query selector.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface CustomQueryHandler "
            }
          ],
          "releaseTag": "Public",
          "name": "CustomQueryHandler",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!CustomQueryHandler#queryAll:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "queryAll?: "
                },
                {
                  "kind": "Content",
                  "text": "(element: "
                },
                {
                  "kind": "Reference",
                  "text": "Element",
                  "canonicalReference": "!Element:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "Document",
                  "canonicalReference": "!Document:interface"
                },
                {
                  "kind": "Content",
                  "text": ", selector: string) => "
                },
                {
                  "kind": "Reference",
                  "text": "Element",
                  "canonicalReference": "!Element:interface"
                },
                {
                  "kind": "Content",
                  "text": "[] | "
                },
                {
                  "kind": "Reference",
                  "text": "NodeListOf",
                  "canonicalReference": "!NodeListOf:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Element",
                  "canonicalReference": "!Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "queryAll",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 12
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!CustomQueryHandler#queryOne:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "queryOne?: "
                },
                {
                  "kind": "Content",
                  "text": "(element: "
                },
                {
                  "kind": "Reference",
                  "text": "Element",
                  "canonicalReference": "!Element:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "Document",
                  "canonicalReference": "!Document:interface"
                },
                {
                  "kind": "Content",
                  "text": ", selector: string) => "
                },
                {
                  "kind": "Reference",
                  "text": "Element",
                  "canonicalReference": "!Element:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "queryOne",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@opennebula/puppeteer!customQueryHandlerNames:function(1)",
          "docComment": "/**\n * @returns a list with the names of all registered custom query handlers.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function customQueryHandlerNames(): "
            },
            {
              "kind": "Content",
              "text": "string[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "customQueryHandlerNames"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@opennebula/puppeteer!Device:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Device "
            }
          ],
          "releaseTag": "Public",
          "name": "Device",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!Device#name:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!Device#userAgent:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "userAgent: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "userAgent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!Device#viewport:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "viewport: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        width: number;\n        height: number;\n        deviceScaleFactor: number;\n        isMobile: boolean;\n        hasTouch: boolean;\n        isLandscape: boolean;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "viewport",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@opennebula/puppeteer!devices:var",
          "docComment": "/**\n * @remarks\n *\n * A list of devices to be used with `page.emulate(options)`. Actual list of devices can be found in {@link https://github.com/puppeteer/puppeteer/blob/main/src/common/DeviceDescriptors.ts | src/common/DeviceDescriptors.ts}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "devices: "
            },
            {
              "kind": "Reference",
              "text": "DevicesMap",
              "canonicalReference": "@opennebula/puppeteer!DevicesMap:type"
            }
          ],
          "releaseTag": "Public",
          "name": "devices",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@opennebula/puppeteer!DevicesMap:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type DevicesMap = "
            },
            {
              "kind": "Content",
              "text": "{\n    [name: string]: "
            },
            {
              "kind": "Reference",
              "text": "Device",
              "canonicalReference": "@opennebula/puppeteer!Device:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "DevicesMap",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@opennebula/puppeteer!Dialog:class",
          "docComment": "/**\n * Dialog instances are dispatched by the {@link Page} via the `dialog` event.\n *\n * @remarks\n *\n * The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the `Dialog` class.\n *\n * @example\n * ```js\n * const puppeteer = require('puppeteer');\n *\n * (async () => {\n *   const browser = await puppeteer.launch();\n *   const page = await browser.newPage();\n *   page.on('dialog', async dialog => {\n *     console.log(dialog.message());\n *     await dialog.dismiss();\n *     await browser.close();\n *   });\n *   page.evaluate(() => alert('1'));\n * })();\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Dialog "
            }
          ],
          "releaseTag": "Public",
          "name": "Dialog",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Dialog#accept:member(1)",
              "docComment": "/**\n * @param promptText - optional text that will be entered in the dialog prompt. Has no effect if the dialog's type is not `prompt`.\n *\n * @returns A promise that resolves when the dialog has been accepted.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "accept(promptText?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "promptText",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "accept"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Dialog#defaultValue:member(1)",
              "docComment": "/**\n * @returns The default value of the prompt, or an empty string if the dialog is not a `prompt`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "defaultValue(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "defaultValue"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Dialog#dismiss:member(1)",
              "docComment": "/**\n * @returns A promise which will resolve once the dialog has been dismissed\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dismiss(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "dismiss"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Dialog#message:member(1)",
              "docComment": "/**\n * @returns The message displayed in the dialog.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "message(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "message"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Dialog#type:member(1)",
              "docComment": "/**\n * @returns The type of the dialog.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type(): "
                },
                {
                  "kind": "Reference",
                  "text": "Protocol.Page.DialogType",
                  "canonicalReference": "devtools-protocol!Protocol.Page.DialogType:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "type"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@opennebula/puppeteer!ElementHandle:class",
          "docComment": "/**\n * ElementHandle represents an in-page DOM element.\n *\n * @remarks\n *\n * ElementHandles can be created with the {@link Page.$} method.\n * ```js\n * const puppeteer = require('puppeteer');\n *\n * (async () => {\n *  const browser = await puppeteer.launch();\n *  const page = await browser.newPage();\n *  await page.goto('https://example.com');\n *  const hrefElement = await page.$('a');\n *  await hrefElement.click();\n *  // ...\n * })();\n * ```\n *\n * ElementHandle prevents the DOM element from being garbage-collected unless the handle is {@link JSHandle.dispose | disposed}. ElementHandles are auto-disposed when their origin frame gets navigated.\n *\n * ElementHandle instances can be used as arguments in {@link Page.$eval} and {@link Page.evaluate} methods.\n *\n * If you're using TypeScript, ElementHandle takes a generic argument that denotes the type of element the handle is holding within. For example, if you have a handle to a `<select>` element, you can type it as `ElementHandle<HTMLSelectElement>` and you get some nicer type checks.\n *\n * The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the `ElementHandle` class.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class ElementHandle<ElementType extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": " "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "JSHandle",
              "canonicalReference": "@opennebula/puppeteer!JSHandle:class"
            },
            {
              "kind": "Content",
              "text": "<ElementType> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "ElementType",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              }
            }
          ],
          "name": "ElementHandle",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!ElementHandle#$:member(1)",
              "docComment": "/**\n * Runs `element.querySelector` within the page. If no element matches the selector, the return value resolves to `null`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "$<T extends "
                },
                {
                  "kind": "Reference",
                  "text": "Element",
                  "canonicalReference": "!Element:interface"
                },
                {
                  "kind": "Content",
                  "text": " "
                },
                {
                  "kind": "Content",
                  "text": "= "
                },
                {
                  "kind": "Reference",
                  "text": "Element",
                  "canonicalReference": "!Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ">(selector: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ElementHandle",
                  "canonicalReference": "@opennebula/puppeteer!ElementHandle:class"
                },
                {
                  "kind": "Content",
                  "text": "<T> | null>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "selector",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "name": "$"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!ElementHandle#$$:member(1)",
              "docComment": "/**\n * Runs `element.querySelectorAll` within the page. If no elements match the selector, the return value resolves to `[]`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "$$<T extends "
                },
                {
                  "kind": "Reference",
                  "text": "Element",
                  "canonicalReference": "!Element:interface"
                },
                {
                  "kind": "Content",
                  "text": " "
                },
                {
                  "kind": "Content",
                  "text": "= "
                },
                {
                  "kind": "Reference",
                  "text": "Element",
                  "canonicalReference": "!Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ">(selector: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ElementHandle",
                  "canonicalReference": "@opennebula/puppeteer!ElementHandle:class"
                },
                {
                  "kind": "Content",
                  "text": "<T>>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 14
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "selector",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "name": "$$"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!ElementHandle#$$eval:member(1)",
              "docComment": "/**\n * This method runs `document.querySelectorAll` within the element and passes it as the first argument to `pageFunction`. If there's no element matching `selector`, the method throws an error.\n *\n * If `pageFunction` returns a Promise, then `frame.$$eval` would wait for the promise to resolve and return its value.\n *\n * @example\n * ```html\n * <div class=\"feed\">\n *   <div class=\"tweet\">Hello!</div>\n *   <div class=\"tweet\">Hi!</div>\n * </div>\n * ```\n *\n * @example\n * ```js\n * const feedHandle = await page.$('.feed');\n * expect(await feedHandle.$$eval('.tweet', nodes => nodes.map(n => n.innerText)))\n *  .toEqual(['Hello!', 'Hi!']);\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "$$eval<ReturnType>(selector: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", pageFunction: "
                },
                {
                  "kind": "Content",
                  "text": "(elements: "
                },
                {
                  "kind": "Reference",
                  "text": "Element",
                  "canonicalReference": "!Element:interface"
                },
                {
                  "kind": "Content",
                  "text": "[], ...args: unknown[]) => ReturnType | "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<ReturnType>"
                },
                {
                  "kind": "Content",
                  "text": ", ...args: "
                },
                {
                  "kind": "Reference",
                  "text": "SerializableOrJSHandle",
                  "canonicalReference": "@opennebula/puppeteer!SerializableOrJSHandle:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "WrapElementHandle",
                  "canonicalReference": "@opennebula/puppeteer!WrapElementHandle:type"
                },
                {
                  "kind": "Content",
                  "text": "<ReturnType>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 12,
                "endIndex": 16
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "selector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "pageFunction",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 8
                  }
                },
                {
                  "parameterName": "args",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 11
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "ReturnType",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "$$eval"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!ElementHandle#$eval:member(1)",
              "docComment": "/**\n * This method runs `document.querySelector` within the element and passes it as the first argument to `pageFunction`. If there's no element matching `selector`, the method throws an error.\n *\n * If `pageFunction` returns a Promise, then `frame.$eval` would wait for the promise to resolve and return its value.\n *\n * @example\n * ```js\n * const tweetHandle = await page.$('.tweet');\n * expect(await tweetHandle.$eval('.like', node => node.innerText)).toBe('100');\n * expect(await tweetHandle.$eval('.retweets', node => node.innerText)).toBe('10');\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "$eval<ReturnType>(selector: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", pageFunction: "
                },
                {
                  "kind": "Content",
                  "text": "(element: "
                },
                {
                  "kind": "Reference",
                  "text": "Element",
                  "canonicalReference": "!Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ", ...args: unknown[]) => ReturnType | "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<ReturnType>"
                },
                {
                  "kind": "Content",
                  "text": ", ...args: "
                },
                {
                  "kind": "Reference",
                  "text": "SerializableOrJSHandle",
                  "canonicalReference": "@opennebula/puppeteer!SerializableOrJSHandle:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "WrapElementHandle",
                  "canonicalReference": "@opennebula/puppeteer!WrapElementHandle:type"
                },
                {
                  "kind": "Content",
                  "text": "<ReturnType>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 12,
                "endIndex": 16
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "selector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "pageFunction",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 8
                  }
                },
                {
                  "parameterName": "args",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 11
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "ReturnType",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "$eval"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!ElementHandle#$x:member(1)",
              "docComment": "/**\n * The method evaluates the XPath expression relative to the elementHandle. If there are no such elements, the method will resolve to an empty array.\n *\n * @param expression - Expression to {@link https://developer.mozilla.org/en-US/docs/Web/API/Document/evaluate | evaluate}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "$x(expression: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ElementHandle",
                  "canonicalReference": "@opennebula/puppeteer!ElementHandle:class"
                },
                {
                  "kind": "Content",
                  "text": "[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "expression",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "$x"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!ElementHandle#asElement:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "asElement(): "
                },
                {
                  "kind": "Reference",
                  "text": "ElementHandle",
                  "canonicalReference": "@opennebula/puppeteer!ElementHandle:class"
                },
                {
                  "kind": "Content",
                  "text": "<ElementType> | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "asElement"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!ElementHandle#boundingBox:member(1)",
              "docComment": "/**\n * This method returns the bounding box of the element (relative to the main frame), or `null` if the element is not visible.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "boundingBox(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "BoundingBox",
                  "canonicalReference": "@opennebula/puppeteer!BoundingBox:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "boundingBox"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!ElementHandle#boxModel:member(1)",
              "docComment": "/**\n * This method returns boxes of the element, or `null` if the element is not visible.\n *\n * @remarks\n *\n * Boxes are represented as an array of points; Each Point is an object `{x, y}`. Box points are sorted clock-wise.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "boxModel(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "BoxModel",
                  "canonicalReference": "@opennebula/puppeteer!BoxModel:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "boxModel"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!ElementHandle#click:member(1)",
              "docComment": "/**\n * This method scrolls element into view if needed, and then uses {@link Page.mouse} to click in the center of the element. If the element is detached from DOM, the method throws an error.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "click(options?: "
                },
                {
                  "kind": "Reference",
                  "text": "ClickOptions",
                  "canonicalReference": "@opennebula/puppeteer!ClickOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "click"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!ElementHandle#clickablePoint:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clickablePoint(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Point",
                  "canonicalReference": "@opennebula/puppeteer!Point:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "clickablePoint"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!ElementHandle#contentFrame:member(1)",
              "docComment": "/**\n * Resolves to the content frame for element handles referencing iframe nodes, or null otherwise\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "contentFrame(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Frame",
                  "canonicalReference": "@opennebula/puppeteer!Frame:class"
                },
                {
                  "kind": "Content",
                  "text": " | null>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "contentFrame"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!ElementHandle#drag:member(1)",
              "docComment": "/**\n * This method creates and captures a dragevent from the element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "drag(target: "
                },
                {
                  "kind": "Reference",
                  "text": "Point",
                  "canonicalReference": "@opennebula/puppeteer!Point:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Protocol.Input.DragData",
                  "canonicalReference": "devtools-protocol!Protocol.Input.DragData:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "target",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "drag"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!ElementHandle#dragAndDrop:member(1)",
              "docComment": "/**\n * This method triggers a dragenter, dragover, and drop on the element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dragAndDrop(target: "
                },
                {
                  "kind": "Reference",
                  "text": "ElementHandle",
                  "canonicalReference": "@opennebula/puppeteer!ElementHandle:class"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        delay: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "target",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "dragAndDrop"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!ElementHandle#dragEnter:member(1)",
              "docComment": "/**\n * This method creates a `dragenter` event on the element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dragEnter(data?: "
                },
                {
                  "kind": "Reference",
                  "text": "Protocol.Input.DragData",
                  "canonicalReference": "devtools-protocol!Protocol.Input.DragData:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "dragEnter"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!ElementHandle#dragOver:member(1)",
              "docComment": "/**\n * This method creates a `dragover` event on the element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dragOver(data?: "
                },
                {
                  "kind": "Reference",
                  "text": "Protocol.Input.DragData",
                  "canonicalReference": "devtools-protocol!Protocol.Input.DragData:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "dragOver"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!ElementHandle#drop:member(1)",
              "docComment": "/**\n * This method triggers a drop on the element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "drop(data?: "
                },
                {
                  "kind": "Reference",
                  "text": "Protocol.Input.DragData",
                  "canonicalReference": "devtools-protocol!Protocol.Input.DragData:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "drop"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!ElementHandle#focus:member(1)",
              "docComment": "/**\n * Calls {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus | focus} on the element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "focus(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "focus"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!ElementHandle#hover:member(1)",
              "docComment": "/**\n * This method scrolls element into view if needed, and then uses {@link Page.mouse} to hover over the center of the element. If the element is detached from DOM, the method throws an error.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hover(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "hover"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!ElementHandle#isIntersectingViewport:member(1)",
              "docComment": "/**\n * Resolves to true if the element is visible in the current viewport.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isIntersectingViewport(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "isIntersectingViewport"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!ElementHandle#press:member(1)",
              "docComment": "/**\n * Focuses the element, and then uses {@link Keyboard.down} and {@link Keyboard.up}.\n *\n * @remarks\n *\n * If `key` is a single character and no modifier keys besides `Shift` are being held down, a `keypress`/`input` event will also be generated. The `text` option can be specified to force an input event to be generated.\n *\n * **NOTE** Modifier keys DO affect `elementHandle.press`. Holding down `Shift` will type the text in upper case.\n *\n * @param key - Name of key to press, such as `ArrowLeft`. See {@link KeyInput} for a list of all key names.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "press(key: "
                },
                {
                  "kind": "Reference",
                  "text": "KeyInput",
                  "canonicalReference": "@opennebula/puppeteer!KeyInput:type"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "PressOptions",
                  "canonicalReference": "@opennebula/puppeteer!PressOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "press"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!ElementHandle#screenshot:member(1)",
              "docComment": "/**\n * This method scrolls element into view if needed, and then uses {@link Page.screenshot} to take a screenshot of the element. If the element is detached from DOM, the method throws an error.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "screenshot(options?: "
                },
                {
                  "kind": "Content",
                  "text": "{}"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string | "
                },
                {
                  "kind": "Reference",
                  "text": "Buffer",
                  "canonicalReference": "!Buffer:class"
                },
                {
                  "kind": "Content",
                  "text": " | void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "screenshot"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!ElementHandle#select:member(1)",
              "docComment": "/**\n * Triggers a `change` and `input` event once all the provided options have been selected. If there's no `<select>` element matching `selector`, the method throws an error.\n *\n * @param values - Values of options to select. If the `<select>` has the `multiple` attribute, all values are considered, otherwise only the first one is taken into account.\n *\n * @example\n * ```js\n * handle.select('blue'); // single selection\n * handle.select('red', 'green', 'blue'); // multiple selections\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "select(...values: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "values",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "select"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!ElementHandle#tap:member(1)",
              "docComment": "/**\n * This method scrolls element into view if needed, and then uses {@link Touchscreen.tap} to tap in the center of the element. If the element is detached from DOM, the method throws an error.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tap(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "tap"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!ElementHandle#type:member(1)",
              "docComment": "/**\n * Focuses the element, and then sends a `keydown`, `keypress`/`input`, and `keyup` event for each character in the text.\n *\n * To press a special key, like `Control` or `ArrowDown`, use {@link ElementHandle.press}.\n *\n * @example\n * ```js\n * await elementHandle.type('Hello'); // Types instantly\n * await elementHandle.type('World', {delay: 100}); // Types slower, like a user\n * ```\n *\n * @example\n *\n * An example of typing into a text field and then submitting the form:\n * ```js\n * const elementHandle = await page.$('input');\n * await elementHandle.type('some text');\n * await elementHandle.press('Enter');\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type(text: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        delay: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "text",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "type"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!ElementHandle#uploadFile:member(1)",
              "docComment": "/**\n * This method expects `elementHandle` to point to an {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input | input element}.\n *\n * @param filePaths - Sets the value of the file input to these paths. If some of the `filePaths` are relative paths, then they are resolved relative to the {@link https://nodejs.org/api/process.html#process_process_cwd | current working directory}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "uploadFile(...filePaths: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "filePaths",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "uploadFile"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 6,
            "endIndex": 8
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@opennebula/puppeteer!ErrorCode:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ErrorCode = "
            },
            {
              "kind": "Content",
              "text": "'aborted' | 'accessdenied' | 'addressunreachable' | 'blockedbyclient' | 'blockedbyresponse' | 'connectionaborted' | 'connectionclosed' | 'connectionfailed' | 'connectionrefused' | 'connectionreset' | 'internetdisconnected' | 'namenotresolved' | 'timedout' | 'failed'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ErrorCode",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@opennebula/puppeteer!errors:var",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "errors: "
            },
            {
              "kind": "Reference",
              "text": "PuppeteerErrors",
              "canonicalReference": "@opennebula/puppeteer!PuppeteerErrors:type"
            }
          ],
          "releaseTag": "Public",
          "name": "errors",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@opennebula/puppeteer!EvaluateFn:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type EvaluateFn<T = "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "string | ((arg1: T, ...args: any[]) => any)"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "EvaluateFn",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@opennebula/puppeteer!EvaluateFnReturnType:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type EvaluateFnReturnType<T extends "
            },
            {
              "kind": "Reference",
              "text": "EvaluateFn",
              "canonicalReference": "@opennebula/puppeteer!EvaluateFn:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "T extends (...args: any[]) => infer R ? R : any"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "EvaluateFnReturnType",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@opennebula/puppeteer!EvaluateHandleFn:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type EvaluateHandleFn = "
            },
            {
              "kind": "Content",
              "text": "string | ((...args: any[]) => any)"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "EvaluateHandleFn",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@opennebula/puppeteer!EVALUATION_SCRIPT_URL:var",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "EVALUATION_SCRIPT_URL = \"__puppeteer_evaluation_script__\""
            }
          ],
          "releaseTag": "Public",
          "name": "EVALUATION_SCRIPT_URL",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@opennebula/puppeteer!EventEmitter:class",
          "docComment": "/**\n * The EventEmitter class that many Puppeteer classes extend.\n *\n * @remarks\n *\n * This allows you to listen to events that Puppeteer classes fire and act accordingly. Therefore you'll mostly use {@link EventEmitter.on | on} and {@link EventEmitter.off | off} to bind and unbind to event listeners.\n *\n * The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the `EventEmitter` class.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class EventEmitter implements "
            },
            {
              "kind": "Reference",
              "text": "CommonEventEmitter",
              "canonicalReference": "@opennebula/puppeteer!CommonEventEmitter:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "EventEmitter",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!EventEmitter#addListener:member(1)",
              "docComment": "/**\n * Add an event listener.\n *\n * @deprecated\n *\n * please use {@link EventEmitter.on} instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addListener(event: "
                },
                {
                  "kind": "Reference",
                  "text": "EventType",
                  "canonicalReference": "@opennebula/puppeteer!EventType:type"
                },
                {
                  "kind": "Content",
                  "text": ", handler: "
                },
                {
                  "kind": "Reference",
                  "text": "Handler",
                  "canonicalReference": "@opennebula/puppeteer!Handler:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "EventEmitter",
                  "canonicalReference": "@opennebula/puppeteer!EventEmitter:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "handler",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "addListener"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!EventEmitter#emit:member(1)",
              "docComment": "/**\n * Emit an event and call any associated listeners.\n *\n * @param event - the event you'd like to emit\n *\n * @param eventData - any data you'd like to emit with the event\n *\n * @returns `true` if there are any listeners, `false` if there are not.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "emit(event: "
                },
                {
                  "kind": "Reference",
                  "text": "EventType",
                  "canonicalReference": "@opennebula/puppeteer!EventType:type"
                },
                {
                  "kind": "Content",
                  "text": ", eventData?: "
                },
                {
                  "kind": "Content",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "eventData",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "emit"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!EventEmitter#listenerCount:member(1)",
              "docComment": "/**\n * Gets the number of listeners for a given event.\n *\n * @param event - the event to get the listener count for\n *\n * @returns the number of listeners bound to the given event\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "listenerCount(event: "
                },
                {
                  "kind": "Reference",
                  "text": "EventType",
                  "canonicalReference": "@opennebula/puppeteer!EventType:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "listenerCount"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!EventEmitter#off:member(1)",
              "docComment": "/**\n * Remove an event listener from firing.\n *\n * @param event - the event type you'd like to stop listening to.\n *\n * @param handler - the function that should be removed.\n *\n * @returns `this` to enable you to chain method calls.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "off(event: "
                },
                {
                  "kind": "Reference",
                  "text": "EventType",
                  "canonicalReference": "@opennebula/puppeteer!EventType:type"
                },
                {
                  "kind": "Content",
                  "text": ", handler: "
                },
                {
                  "kind": "Reference",
                  "text": "Handler",
                  "canonicalReference": "@opennebula/puppeteer!Handler:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "EventEmitter",
                  "canonicalReference": "@opennebula/puppeteer!EventEmitter:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "handler",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "off"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!EventEmitter#on:member(1)",
              "docComment": "/**\n * Bind an event listener to fire when an event occurs.\n *\n * @param event - the event type you'd like to listen to. Can be a string or symbol.\n *\n * @param handler - the function to be called when the event occurs.\n *\n * @returns `this` to enable you to chain method calls.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on(event: "
                },
                {
                  "kind": "Reference",
                  "text": "EventType",
                  "canonicalReference": "@opennebula/puppeteer!EventType:type"
                },
                {
                  "kind": "Content",
                  "text": ", handler: "
                },
                {
                  "kind": "Reference",
                  "text": "Handler",
                  "canonicalReference": "@opennebula/puppeteer!Handler:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "EventEmitter",
                  "canonicalReference": "@opennebula/puppeteer!EventEmitter:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "handler",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "on"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!EventEmitter#once:member(1)",
              "docComment": "/**\n * Like `on` but the listener will only be fired once and then it will be removed.\n *\n * @param event - the event you'd like to listen to\n *\n * @param handler - the handler function to run when the event occurs\n *\n * @returns `this` to enable you to chain method calls.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "once(event: "
                },
                {
                  "kind": "Reference",
                  "text": "EventType",
                  "canonicalReference": "@opennebula/puppeteer!EventType:type"
                },
                {
                  "kind": "Content",
                  "text": ", handler: "
                },
                {
                  "kind": "Reference",
                  "text": "Handler",
                  "canonicalReference": "@opennebula/puppeteer!Handler:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "EventEmitter",
                  "canonicalReference": "@opennebula/puppeteer!EventEmitter:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "handler",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "once"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!EventEmitter#removeAllListeners:member(1)",
              "docComment": "/**\n * Removes all listeners. If given an event argument, it will remove only listeners for that event.\n *\n * @param event - the event to remove listeners for.\n *\n * @returns `this` to enable you to chain method calls.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeAllListeners(event?: "
                },
                {
                  "kind": "Reference",
                  "text": "EventType",
                  "canonicalReference": "@opennebula/puppeteer!EventType:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "EventEmitter",
                  "canonicalReference": "@opennebula/puppeteer!EventEmitter:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "removeAllListeners"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!EventEmitter#removeListener:member(1)",
              "docComment": "/**\n * Remove an event listener.\n *\n * @deprecated\n *\n * please use {@link EventEmitter.off} instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeListener(event: "
                },
                {
                  "kind": "Reference",
                  "text": "EventType",
                  "canonicalReference": "@opennebula/puppeteer!EventType:type"
                },
                {
                  "kind": "Content",
                  "text": ", handler: "
                },
                {
                  "kind": "Reference",
                  "text": "Handler",
                  "canonicalReference": "@opennebula/puppeteer!Handler:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "EventEmitter",
                  "canonicalReference": "@opennebula/puppeteer!EventEmitter:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "handler",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "removeListener"
            }
          ],
          "implementsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@opennebula/puppeteer!EventType:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type EventType = "
            },
            {
              "kind": "Content",
              "text": "string | symbol"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "EventType",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@opennebula/puppeteer!ExecutionContext:class",
          "docComment": "/**\n * This class represents a context for JavaScript execution. A [Page] might have many execution contexts: - each {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe | frame} has \"default\" execution context that is always created after frame is attached to DOM. This context is returned by the {@link Frame.executionContext} method. - {@link https://developer.chrome.com/extensions | Extension}'s content scripts create additional execution contexts.\n *\n * Besides pages, execution contexts can be found in {@link https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API | workers}.\n *\n * @remarks\n *\n * The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the `ExecutionContext` class.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class ExecutionContext "
            }
          ],
          "releaseTag": "Public",
          "name": "ExecutionContext",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!ExecutionContext#evaluate:member(1)",
              "docComment": "/**\n * @remarks\n *\n * If the function passed to the `executionContext.evaluate` returns a Promise, then `executionContext.evaluate` would wait for the promise to resolve and return its value. If the function passed to the `executionContext.evaluate` returns a non-serializable value, then `executionContext.evaluate` resolves to `undefined`. DevTools Protocol also supports transferring some additional values that are not serializable by `JSON`: `-0`, `NaN`, `Infinity`, `-Infinity`, and bigint literals.\n *\n * @param pageFunction - a function to be evaluated in the `executionContext`\n *\n * @param args - argument to pass to the page function\n *\n * @returns A promise that resolves to the return value of the given function.\n *\n * @example\n * ```js\n * const executionContext = await page.mainFrame().executionContext();\n * const result = await executionContext.evaluate(() => Promise.resolve(8 * 7))* ;\n * console.log(result); // prints \"56\"\n * ```\n *\n * @example\n *\n * A string can also be passed in instead of a function.\n * ```js\n * console.log(await executionContext.evaluate('1 + 2')); // prints \"3\"\n * ```\n *\n * @example\n *\n * {@link JSHandle} instances can be passed as arguments to the `executionContext.* evaluate`:\n * ```js\n * const oneHandle = await executionContext.evaluateHandle(() => 1);\n * const twoHandle = await executionContext.evaluateHandle(() => 2);\n * const result = await executionContext.evaluate(\n *    (a, b) => a + b, oneHandle, * twoHandle\n * );\n * await oneHandle.dispose();\n * await twoHandle.dispose();\n * console.log(result); // prints '3'.\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "evaluate<ReturnType extends "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ">(pageFunction: "
                },
                {
                  "kind": "Reference",
                  "text": "Function",
                  "canonicalReference": "!Function:interface"
                },
                {
                  "kind": "Content",
                  "text": " | string"
                },
                {
                  "kind": "Content",
                  "text": ", ...args: "
                },
                {
                  "kind": "Content",
                  "text": "unknown[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<ReturnType>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "pageFunction",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "args",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "ReturnType",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "evaluate"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!ExecutionContext#evaluateHandle:member(1)",
              "docComment": "/**\n * @remarks\n *\n * The only difference between `executionContext.evaluate` and `executionContext.evaluateHandle` is that `executionContext.evaluateHandle` returns an in-page object (a {@link JSHandle}). If the function passed to the `executionContext.evaluateHandle` returns a Promise, then `executionContext.evaluateHandle` would wait for the promise to resolve and return its value.\n *\n * @param pageFunction - a function to be evaluated in the `executionContext`\n *\n * @param args - argument to pass to the page function\n *\n * @returns A promise that resolves to the return value of the given function as an in-page object (a {@link JSHandle}).\n *\n * @example\n * ```js\n * const context = await page.mainFrame().executionContext();\n * const aHandle = await context.evaluateHandle(() => Promise.resolve(self));\n * aHandle; // Handle for the global object.\n * ```\n *\n * @example\n *\n * A string can also be passed in instead of a function.\n * ```js\n * // Handle for the '3' * object.\n * const aHandle = await context.evaluateHandle('1 + 2');\n * ```\n *\n * @example\n *\n * JSHandle instances can be passed as arguments to the `executionContext.* evaluateHandle`:\n * ```js\n * const aHandle = await context.evaluateHandle(() => document.body);\n * const resultHandle = await context.evaluateHandle(body => body.innerHTML, * aHandle);\n * console.log(await resultHandle.jsonValue()); // prints body's innerHTML\n * await aHandle.dispose();\n * await resultHandle.dispose();\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "evaluateHandle<HandleType extends "
                },
                {
                  "kind": "Reference",
                  "text": "JSHandle",
                  "canonicalReference": "@opennebula/puppeteer!JSHandle:class"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "ElementHandle",
                  "canonicalReference": "@opennebula/puppeteer!ElementHandle:class"
                },
                {
                  "kind": "Content",
                  "text": " "
                },
                {
                  "kind": "Content",
                  "text": "= "
                },
                {
                  "kind": "Reference",
                  "text": "JSHandle",
                  "canonicalReference": "@opennebula/puppeteer!JSHandle:class"
                },
                {
                  "kind": "Content",
                  "text": ">(pageFunction: "
                },
                {
                  "kind": "Reference",
                  "text": "EvaluateHandleFn",
                  "canonicalReference": "@opennebula/puppeteer!EvaluateHandleFn:type"
                },
                {
                  "kind": "Content",
                  "text": ", ...args: "
                },
                {
                  "kind": "Reference",
                  "text": "SerializableOrJSHandle",
                  "canonicalReference": "@opennebula/puppeteer!SerializableOrJSHandle:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<HandleType>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 13,
                "endIndex": 15
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "pageFunction",
                  "parameterTypeTokenRange": {
                    "startIndex": 8,
                    "endIndex": 9
                  }
                },
                {
                  "parameterName": "args",
                  "parameterTypeTokenRange": {
                    "startIndex": 10,
                    "endIndex": 12
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "HandleType",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  }
                }
              ],
              "name": "evaluateHandle"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!ExecutionContext#frame:member(1)",
              "docComment": "/**\n * @remarks\n *\n * Not every execution context is associated with a frame. For example, workers and extensions have execution contexts that are not associated with frames.\n *\n * @returns The frame associated with this execution context.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "frame(): "
                },
                {
                  "kind": "Reference",
                  "text": "Frame",
                  "canonicalReference": "@opennebula/puppeteer!Frame:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "frame"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!ExecutionContext#queryObjects:member(1)",
              "docComment": "/**\n * This method iterates the JavaScript heap and finds all the objects with the given prototype.\n *\n * @remarks\n *\n * @param prototypeHandle - a handle to the object prototype\n *\n * @returns A handle to an array of objects with the given prototype.\n *\n * @example\n * ```js\n * // Create a Map object\n * await page.evaluate(() => window.map = new Map());\n * // Get a handle to the Map object prototype\n * const mapPrototype = await page.evaluateHandle(() => Map.prototype);\n * // Query all map instances into an array\n * const mapInstances = await page.queryObjects(mapPrototype);\n * // Count amount of map objects in heap\n * const count = await page.evaluate(maps => maps.length, mapInstances);\n * await mapInstances.dispose();\n * await mapPrototype.dispose();\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "queryObjects(prototypeHandle: "
                },
                {
                  "kind": "Reference",
                  "text": "JSHandle",
                  "canonicalReference": "@opennebula/puppeteer!JSHandle:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "JSHandle",
                  "canonicalReference": "@opennebula/puppeteer!JSHandle:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "prototypeHandle",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "queryObjects"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@opennebula/puppeteer!FileChooser:class",
          "docComment": "/**\n * File choosers let you react to the page requesting for a file.\n *\n * @remarks\n *\n * `FileChooser` objects are returned via the `page.waitForFileChooser` method.\n *\n * The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the `FileChooser` class.\n *\n * @example\n *\n * An example of using `FileChooser`:\n * ```js\n * const [fileChooser] = await Promise.all([\n *   page.waitForFileChooser(),\n *   page.click('#upload-file-button'), // some button that triggers file selection\n * ]);\n * await fileChooser.accept(['/tmp/myfile.pdf']);\n * ```\n *\n * **NOTE** In browsers, only one file chooser can be opened at a time. All file choosers must be accepted or canceled. Not doing so will prevent subsequent file choosers from appearing.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class FileChooser "
            }
          ],
          "releaseTag": "Public",
          "name": "FileChooser",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!FileChooser#accept:member(1)",
              "docComment": "/**\n * Accept the file chooser request with given paths.\n *\n * @param filePaths - If some of the `filePaths` are relative paths, then they are resolved relative to the {@link https://nodejs.org/api/process.html#process_process_cwd | current working directory}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "accept(filePaths: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "filePaths",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "accept"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!FileChooser#cancel:member(1)",
              "docComment": "/**\n * Closes the file chooser without selecting any files.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cancel(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "cancel"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!FileChooser#isMultiple:member(1)",
              "docComment": "/**\n * Whether file chooser allow for {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#attr-multiple | multiple} file selection.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isMultiple(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "isMultiple"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@opennebula/puppeteer!Frame:class",
          "docComment": "/**\n * At every point of time, page exposes its current frame tree via the {@link Page.mainFrame | page.mainFrame} and {@link Frame.childFrames | frame.childFrames} methods.\n *\n * @remarks\n *\n * `Frame` object lifecycles are controlled by three events that are all dispatched on the page object:\n *\n * - {@link PageEmittedEvents.FrameAttached}\n *\n * - {@link PageEmittedEvents.FrameNavigated}\n *\n * - {@link PageEmittedEvents.FrameDetached}\n *\n * The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the `Frame` class.\n *\n * @Example\n *\n * An example of dumping frame tree:\n * ```js\n * const puppeteer = require('puppeteer');\n *\n * (async () => {\n *   const browser = await puppeteer.launch();\n *   const page = await browser.newPage();\n *   await page.goto('https://www.google.com/chrome/browser/canary.html');\n *   dumpFrameTree(page.mainFrame(), '');\n *   await browser.close();\n *\n *   function dumpFrameTree(frame, indent) {\n *     console.log(indent + frame.url());\n *     for (const child of frame.childFrames()) {\n *     dumpFrameTree(child, indent + '  ');\n *     }\n *   }\n * })();\n * ```\n *\n * @Example\n *\n * An example of getting text from an iframe element:\n * ```js\n * const frame = page.frames().find(frame => frame.name() === 'myframe');\n * const text = await frame.$eval('.selector', element => element.textContent);\n * console.log(text);\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Frame "
            }
          ],
          "releaseTag": "Public",
          "name": "Frame",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Frame#$:member(1)",
              "docComment": "/**\n * This method queries the frame for the given selector.\n *\n * @param selector - a selector to query for.\n *\n * @returns A promise which resolves to an `ElementHandle` pointing at the element, or `null` if it was not found.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "$<T extends "
                },
                {
                  "kind": "Reference",
                  "text": "Element",
                  "canonicalReference": "!Element:interface"
                },
                {
                  "kind": "Content",
                  "text": " "
                },
                {
                  "kind": "Content",
                  "text": "= "
                },
                {
                  "kind": "Reference",
                  "text": "Element",
                  "canonicalReference": "!Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ">(selector: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ElementHandle",
                  "canonicalReference": "@opennebula/puppeteer!ElementHandle:class"
                },
                {
                  "kind": "Content",
                  "text": "<T> | null>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "selector",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "name": "$"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Frame#$$:member(1)",
              "docComment": "/**\n * This runs `document.querySelectorAll` in the frame and returns the result.\n *\n * @param selector - a selector to search for\n *\n * @returns An array of element handles pointing to the found frame elements.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "$$<T extends "
                },
                {
                  "kind": "Reference",
                  "text": "Element",
                  "canonicalReference": "!Element:interface"
                },
                {
                  "kind": "Content",
                  "text": " "
                },
                {
                  "kind": "Content",
                  "text": "= "
                },
                {
                  "kind": "Reference",
                  "text": "Element",
                  "canonicalReference": "!Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ">(selector: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ElementHandle",
                  "canonicalReference": "@opennebula/puppeteer!ElementHandle:class"
                },
                {
                  "kind": "Content",
                  "text": "<T>>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 14
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "selector",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "name": "$$"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Frame#$$eval:member(1)",
              "docComment": "/**\n * @remarks\n *\n * This method runs `Array.from(document.querySelectorAll(selector))` within the frame and passes it as the first argument to `pageFunction`.\n *\n * If `pageFunction` returns a Promise, then `frame.$$eval` would wait for the promise to resolve and return its value.\n *\n * @param selector - the selector to query for\n *\n * @param pageFunction - the function to be evaluated in the frame's context\n *\n * @param args - additional arguments to pass to `pageFuncton`\n *\n * @example\n * ```js\n * const divsCounts = await frame.$$eval('div', divs => divs.length);\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "$$eval<ReturnType>(selector: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", pageFunction: "
                },
                {
                  "kind": "Content",
                  "text": "(elements: "
                },
                {
                  "kind": "Reference",
                  "text": "Element",
                  "canonicalReference": "!Element:interface"
                },
                {
                  "kind": "Content",
                  "text": "[], ...args: unknown[]) => ReturnType | "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<ReturnType>"
                },
                {
                  "kind": "Content",
                  "text": ", ...args: "
                },
                {
                  "kind": "Reference",
                  "text": "SerializableOrJSHandle",
                  "canonicalReference": "@opennebula/puppeteer!SerializableOrJSHandle:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "WrapElementHandle",
                  "canonicalReference": "@opennebula/puppeteer!WrapElementHandle:type"
                },
                {
                  "kind": "Content",
                  "text": "<ReturnType>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 12,
                "endIndex": 16
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "selector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "pageFunction",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 8
                  }
                },
                {
                  "parameterName": "args",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 11
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "ReturnType",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "$$eval"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Frame#$eval:member(1)",
              "docComment": "/**\n * @remarks\n *\n * This method runs `document.querySelector` within the frame and passes it as the first argument to `pageFunction`.\n *\n * If `pageFunction` returns a Promise, then `frame.$eval` would wait for the promise to resolve and return its value.\n *\n * @param selector - the selector to query for\n *\n * @param pageFunction - the function to be evaluated in the frame's context\n *\n * @param args - additional arguments to pass to `pageFuncton`\n *\n * @example\n * ```js\n * const searchValue = await frame.$eval('#search', el => el.value);\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "$eval<ReturnType>(selector: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", pageFunction: "
                },
                {
                  "kind": "Content",
                  "text": "(element: "
                },
                {
                  "kind": "Reference",
                  "text": "Element",
                  "canonicalReference": "!Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ", ...args: unknown[]) => ReturnType | "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<ReturnType>"
                },
                {
                  "kind": "Content",
                  "text": ", ...args: "
                },
                {
                  "kind": "Reference",
                  "text": "SerializableOrJSHandle",
                  "canonicalReference": "@opennebula/puppeteer!SerializableOrJSHandle:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "WrapElementHandle",
                  "canonicalReference": "@opennebula/puppeteer!WrapElementHandle:type"
                },
                {
                  "kind": "Content",
                  "text": "<ReturnType>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 12,
                "endIndex": 16
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "selector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "pageFunction",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 8
                  }
                },
                {
                  "parameterName": "args",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 11
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "ReturnType",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "$eval"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Frame#$x:member(1)",
              "docComment": "/**\n * This method evaluates the given XPath expression and returns the results.\n *\n * @param expression - the XPath expression to evaluate.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "$x(expression: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ElementHandle",
                  "canonicalReference": "@opennebula/puppeteer!ElementHandle:class"
                },
                {
                  "kind": "Content",
                  "text": "[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "expression",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "$x"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Frame#addScriptTag:member(1)",
              "docComment": "/**\n * Adds a `<script>` tag into the page with the desired url or content.\n *\n * @param options - configure the script to add to the page.\n *\n * @returns a promise that resolves to the added tag when the script's `onload` event fires or when the script content was injected into the frame.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addScriptTag(options: "
                },
                {
                  "kind": "Reference",
                  "text": "FrameAddScriptTagOptions",
                  "canonicalReference": "@opennebula/puppeteer!FrameAddScriptTagOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ElementHandle",
                  "canonicalReference": "@opennebula/puppeteer!ElementHandle:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "addScriptTag"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Frame#addStyleTag:member(1)",
              "docComment": "/**\n * Adds a `<link rel=\"stylesheet\">` tag into the page with the desired url or a `<style type=\"text/css\">` tag with the content.\n *\n * @param options - configure the CSS to add to the page.\n *\n * @returns a promise that resolves to the added tag when the stylesheets's `onload` event fires or when the CSS content was injected into the frame.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addStyleTag(options: "
                },
                {
                  "kind": "Reference",
                  "text": "FrameAddStyleTagOptions",
                  "canonicalReference": "@opennebula/puppeteer!FrameAddStyleTagOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ElementHandle",
                  "canonicalReference": "@opennebula/puppeteer!ElementHandle:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "addStyleTag"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Frame#childFrames:member(1)",
              "docComment": "/**\n * @returns an array of child frames.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "childFrames(): "
                },
                {
                  "kind": "Reference",
                  "text": "Frame",
                  "canonicalReference": "@opennebula/puppeteer!Frame:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "childFrames"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Frame#click:member(1)",
              "docComment": "/**\n * This method clicks the first element found that matches `selector`.\n *\n * @remarks\n *\n * This method scrolls the element into view if needed, and then uses {@link Page.mouse} to click in the center of the element. If there's no element matching `selector`, the method throws an error.\n *\n * Bear in mind that if `click()` triggers a navigation event and there's a separate `page.waitForNavigation()` promise to be resolved, you may end up with a race condition that yields unexpected results. The correct pattern for click and wait for navigation is the following:\n * ```javascript\n * const [response] = await Promise.all([\n *   page.waitForNavigation(waitOptions),\n *   frame.click(selector, clickOptions),\n * ]);\n * ```\n *\n * @param selector - the selector to search for to click. If there are multiple elements, the first will be clicked.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "click(selector: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        delay?: number;\n        button?: "
                },
                {
                  "kind": "Reference",
                  "text": "MouseButton",
                  "canonicalReference": "@opennebula/puppeteer!MouseButton:type"
                },
                {
                  "kind": "Content",
                  "text": ";\n        clickCount?: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "selector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 6
                  }
                }
              ],
              "name": "click"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Frame#content:member(1)",
              "docComment": "/**\n * @returns the full HTML contents of the frame, including the doctype.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "content(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "content"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Frame#evaluate:member(1)",
              "docComment": "/**\n * @remarks\n *\n * This method behaves identically to {@link Page.evaluate} except it's run within the context of the `frame`, rather than the entire page.\n *\n * @param pageFunction - a function that is run within the frame\n *\n * @param args - arguments to be passed to the pageFunction\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "evaluate<T extends "
                },
                {
                  "kind": "Reference",
                  "text": "EvaluateFn",
                  "canonicalReference": "@opennebula/puppeteer!EvaluateFn:type"
                },
                {
                  "kind": "Content",
                  "text": ">(pageFunction: "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ", ...args: "
                },
                {
                  "kind": "Reference",
                  "text": "SerializableOrJSHandle",
                  "canonicalReference": "@opennebula/puppeteer!SerializableOrJSHandle:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UnwrapPromiseLike",
                  "canonicalReference": "@opennebula/puppeteer!UnwrapPromiseLike:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "EvaluateFnReturnType",
                  "canonicalReference": "@opennebula/puppeteer!EvaluateFnReturnType:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 14
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "pageFunction",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "args",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 7
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "evaluate"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Frame#evaluateHandle:member(1)",
              "docComment": "/**\n * @remarks\n *\n * The only difference between {@link Frame.evaluate} and `frame.evaluateHandle` is that `evaluateHandle` will return the value wrapped in an in-page object.\n *\n * This method behaves identically to {@link Page.evaluateHandle} except it's run within the context of the `frame`, rather than the entire page.\n *\n * @param pageFunction - a function that is run within the frame\n *\n * @param args - arguments to be passed to the pageFunction\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "evaluateHandle<HandlerType extends "
                },
                {
                  "kind": "Reference",
                  "text": "JSHandle",
                  "canonicalReference": "@opennebula/puppeteer!JSHandle:class"
                },
                {
                  "kind": "Content",
                  "text": " "
                },
                {
                  "kind": "Content",
                  "text": "= "
                },
                {
                  "kind": "Reference",
                  "text": "JSHandle",
                  "canonicalReference": "@opennebula/puppeteer!JSHandle:class"
                },
                {
                  "kind": "Content",
                  "text": ">(pageFunction: "
                },
                {
                  "kind": "Reference",
                  "text": "EvaluateHandleFn",
                  "canonicalReference": "@opennebula/puppeteer!EvaluateHandleFn:type"
                },
                {
                  "kind": "Content",
                  "text": ", ...args: "
                },
                {
                  "kind": "Reference",
                  "text": "SerializableOrJSHandle",
                  "canonicalReference": "@opennebula/puppeteer!SerializableOrJSHandle:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<HandlerType>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "pageFunction",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  }
                },
                {
                  "parameterName": "args",
                  "parameterTypeTokenRange": {
                    "startIndex": 8,
                    "endIndex": 10
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "HandlerType",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "name": "evaluateHandle"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Frame#executionContext:member(1)",
              "docComment": "/**\n * @returns a promise that resolves to the frame's default execution context.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "executionContext(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ExecutionContext",
                  "canonicalReference": "@opennebula/puppeteer!ExecutionContext:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "executionContext"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Frame#focus:member(1)",
              "docComment": "/**\n * This method fetches an element with `selector` and focuses it.\n *\n * @remarks\n *\n * If there's no element matching `selector`, the method throws an error.\n *\n * @param selector - the selector for the element to focus. If there are multiple elements, the first will be focused.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "focus(selector: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "selector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "focus"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Frame#goto:member(1)",
              "docComment": "/**\n * @remarks\n *\n * `frame.goto` will throw an error if: - there's an SSL error (e.g. in case of self-signed certificates).\n *\n * - target URL is invalid.\n *\n * - the `timeout` is exceeded during navigation.\n *\n * - the remote server does not respond or is unreachable.\n *\n * - the main resource failed to load.\n *\n * `frame.goto` will not throw an error when any valid HTTP status code is returned by the remote server, including 404 \"Not Found\" and 500 \"Internal Server Error\". The status code for such responses can be retrieved by calling {@link HTTPResponse.status}.\n *\n * NOTE: `frame.goto` either throws an error or returns a main resource response. The only exceptions are navigation to `about:blank` or navigation to the same URL with a different hash, which would succeed and return `null`.\n *\n * NOTE: Headless mode doesn't support navigation to a PDF document. See the {@link https://bugs.chromium.org/p/chromium/issues/detail?id=761295 | upstream\n * issue}.\n *\n * @param url - the URL to navigate the frame to. This should include the scheme, e.g. `https://`.\n *\n * @param options - navigation options. `waitUntil` is useful to define when the navigation should be considered successful - see the docs for {@link PuppeteerLifeCycleEvent} for more details.\n *\n * @returns A promise which resolves to the main resource response. In case of multiple redirects, the navigation will resolve with the response of the last redirect.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "goto(url: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        referer?: string;\n        timeout?: number;\n        waitUntil?: "
                },
                {
                  "kind": "Reference",
                  "text": "PuppeteerLifeCycleEvent",
                  "canonicalReference": "@opennebula/puppeteer!PuppeteerLifeCycleEvent:type"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "PuppeteerLifeCycleEvent",
                  "canonicalReference": "@opennebula/puppeteer!PuppeteerLifeCycleEvent:type"
                },
                {
                  "kind": "Content",
                  "text": "[];\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTTPResponse",
                  "canonicalReference": "@opennebula/puppeteer!HTTPResponse:class"
                },
                {
                  "kind": "Content",
                  "text": " | null>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "url",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 8
                  }
                }
              ],
              "name": "goto"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Frame#hover:member(1)",
              "docComment": "/**\n * This method fetches an element with `selector`, scrolls it into view if needed, and then uses {@link Page.mouse} to hover over the center of the element.\n *\n * @remarks\n *\n * If there's no element matching `selector`, the method throws an\n *\n * @param selector - the selector for the element to hover. If there are multiple elements, the first will be hovered.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hover(selector: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "selector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "hover"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Frame#isDetached:member(1)",
              "docComment": "/**\n * @returns `true` if the frame has been detached, or `false` otherwise.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isDetached(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "isDetached"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Frame#name:member(1)",
              "docComment": "/**\n * @remarks\n *\n * If the name is empty, it returns the `id` attribute instead.\n *\n * Note: This value is calculated once when the frame is created, and will not update if the attribute is changed later.\n *\n * @returns the frame's `name` attribute as specified in the tag.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "name"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Frame#parentFrame:member(1)",
              "docComment": "/**\n * @returns the parent `Frame`, if any. Detached and main frames return `null`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "parentFrame(): "
                },
                {
                  "kind": "Reference",
                  "text": "Frame",
                  "canonicalReference": "@opennebula/puppeteer!Frame:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "parentFrame"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Frame#select:member(1)",
              "docComment": "/**\n * Triggers a `change` and `input` event once all the provided options have been selected.\n *\n * @remarks\n *\n * If there's no `<select>` element matching `selector`, the method throws an error.\n *\n * @param selector - a selector to query the frame for\n *\n * @param values - an array of values to select. If the `<select>` has the `multiple` attribute, all values are considered, otherwise only the first one is taken into account.\n *\n * @returns the list of values that were successfully selected.\n *\n * @example\n * ```js\n * frame.select('select#colors', 'blue'); // single selection\n * frame.select('select#colors', 'red', 'green', 'blue'); // multiple selections\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "select(selector: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", ...values: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "selector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "values",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "select"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Frame#setContent:member(1)",
              "docComment": "/**\n * Set the content of the frame.\n *\n * @param html - HTML markup to assign to the page.\n *\n * @param options - options to configure how long before timing out and at what point to consider the content setting successful.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setContent(html: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        timeout?: number;\n        waitUntil?: "
                },
                {
                  "kind": "Reference",
                  "text": "PuppeteerLifeCycleEvent",
                  "canonicalReference": "@opennebula/puppeteer!PuppeteerLifeCycleEvent:type"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "PuppeteerLifeCycleEvent",
                  "canonicalReference": "@opennebula/puppeteer!PuppeteerLifeCycleEvent:type"
                },
                {
                  "kind": "Content",
                  "text": "[];\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "html",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 8
                  }
                }
              ],
              "name": "setContent"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Frame#tap:member(1)",
              "docComment": "/**\n * This method fetches an element with `selector`, scrolls it into view if needed, and then uses {@link Page.touchscreen} to tap in the center of the element.\n *\n * @remarks\n *\n * If there's no element matching `selector`, the method throws an error.\n *\n * @param selector - the selector to tap.\n *\n * @returns a promise that resolves when the element has been tapped.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tap(selector: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "selector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "tap"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Frame#title:member(1)",
              "docComment": "/**\n * @returns the frame's title.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "title(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "title"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Frame#type:member(1)",
              "docComment": "/**\n * Sends a `keydown`, `keypress`/`input`, and `keyup` event for each character in the text.\n *\n * @remarks\n *\n * To press a special key, like `Control` or `ArrowDown`, use {@link Keyboard.press}.\n *\n * @param selector - the selector for the element to type into. If there are multiple the first will be used.\n *\n * @param text - text to type into the element\n *\n * @param options - takes one option, `delay`, which sets the time to wait between key presses in milliseconds. Defaults to `0`.\n *\n * @returns a promise that resolves when the typing is complete.\n *\n * @example\n * ```js\n * await frame.type('#mytextarea', 'Hello'); // Types instantly\n * await frame.type('#mytextarea', 'World', {delay: 100}); // Types slower, like a user\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type(selector: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", text: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        delay: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "selector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "text",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "type"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Frame#url:member(1)",
              "docComment": "/**\n * @returns the frame's URL.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "url(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "url"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Frame#waitFor:member(1)",
              "docComment": "/**\n * @remarks\n *\n * This method behaves differently depending on the first parameter. If it's a `string`, it will be treated as a `selector` or `xpath` (if the string starts with `//`). This method then is a shortcut for {@link Frame.waitForSelector} or {@link Frame.waitForXPath}.\n *\n * If the first argument is a function this method is a shortcut for {@link Frame.waitForFunction}.\n *\n * If the first argument is a `number`, it's treated as a timeout in milliseconds and the method returns a promise which resolves after the timeout.\n *\n * @deprecated\n *\n * Don't use this method directly. Instead use the more explicit methods available: {@link Frame.waitForSelector}, {@link Frame.waitForXPath}, {@link Frame.waitForFunction} or {@link Frame.waitForTimeout}.\n *\n * @param selectorOrFunctionOrTimeout - a selector, predicate or timeout to wait for.\n *\n * @param options - optional waiting parameters.\n *\n * @param args - arguments to pass to `pageFunction`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "waitFor(selectorOrFunctionOrTimeout: "
                },
                {
                  "kind": "Content",
                  "text": "string | number | "
                },
                {
                  "kind": "Reference",
                  "text": "Function",
                  "canonicalReference": "!Function:interface"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<string, unknown>"
                },
                {
                  "kind": "Content",
                  "text": ", ...args: "
                },
                {
                  "kind": "Reference",
                  "text": "SerializableOrJSHandle",
                  "canonicalReference": "@opennebula/puppeteer!SerializableOrJSHandle:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "JSHandle",
                  "canonicalReference": "@opennebula/puppeteer!JSHandle:class"
                },
                {
                  "kind": "Content",
                  "text": " | null>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 14
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "selectorOrFunctionOrTimeout",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "args",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 9
                  }
                }
              ],
              "name": "waitFor"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Frame#waitForFunction:member(1)",
              "docComment": "/**\n * @remarks\n *\n * @param pageFunction - the function to evaluate in the frame context.\n *\n * @param options - options to configure the polling method and timeout.\n *\n * @param args - arguments to pass to the `pageFunction`.\n *\n * @returns the promise which resolve when the `pageFunction` returns a truthy value.\n *\n * @example\n *\n * The `waitForFunction` can be used to observe viewport size change:\n * ```js\n * const puppeteer = require('puppeteer');\n *\n * (async () => {\n * .  const browser = await puppeteer.launch();\n * .  const page = await browser.newPage();\n * .  const watchDog = page.mainFrame().waitForFunction('window.innerWidth < 100');\n * .  page.setViewport({width: 50, height: 50});\n * .  await watchDog;\n * .  await browser.close();\n * })();\n * ```\n *\n * To pass arguments from Node.js to the predicate of `page.waitForFunction` function:\n * ```js\n * const selector = '.foo';\n * await frame.waitForFunction(\n *   selector => !!document.querySelector(selector),\n *   {}, // empty options object\n *   selector\n * );\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "waitForFunction(pageFunction: "
                },
                {
                  "kind": "Reference",
                  "text": "Function",
                  "canonicalReference": "!Function:interface"
                },
                {
                  "kind": "Content",
                  "text": " | string"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "FrameWaitForFunctionOptions",
                  "canonicalReference": "@opennebula/puppeteer!FrameWaitForFunctionOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ", ...args: "
                },
                {
                  "kind": "Reference",
                  "text": "SerializableOrJSHandle",
                  "canonicalReference": "@opennebula/puppeteer!SerializableOrJSHandle:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "JSHandle",
                  "canonicalReference": "@opennebula/puppeteer!JSHandle:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "pageFunction",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "args",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 8
                  }
                }
              ],
              "name": "waitForFunction"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Frame#waitForNavigation:member(1)",
              "docComment": "/**\n * @remarks\n *\n * This resolves when the frame navigates to a new URL. It is useful for when you run code which will indirectly cause the frame to navigate. Consider this example:\n * ```js\n * const [response] = await Promise.all([\n *   // The navigation promise resolves after navigation has finished\n *   frame.waitForNavigation(),\n *   // Clicking the link will indirectly cause a navigation\n *   frame.click('a.my-link'),\n * ]);\n * ```\n *\n * Usage of the {@link https://developer.mozilla.org/en-US/docs/Web/API/History_API | History API} to change the URL is considered a navigation.\n *\n * @param options - options to configure when the navigation is consided finished.\n *\n * @returns a promise that resolves when the frame navigates to a new URL.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "waitForNavigation(options?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        timeout?: number;\n        waitUntil?: "
                },
                {
                  "kind": "Reference",
                  "text": "PuppeteerLifeCycleEvent",
                  "canonicalReference": "@opennebula/puppeteer!PuppeteerLifeCycleEvent:type"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "PuppeteerLifeCycleEvent",
                  "canonicalReference": "@opennebula/puppeteer!PuppeteerLifeCycleEvent:type"
                },
                {
                  "kind": "Content",
                  "text": "[];\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTTPResponse",
                  "canonicalReference": "@opennebula/puppeteer!HTTPResponse:class"
                },
                {
                  "kind": "Content",
                  "text": " | null>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 6
                  }
                }
              ],
              "name": "waitForNavigation"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Frame#waitForSelector:member(1)",
              "docComment": "/**\n * @remarks\n *\n * Wait for the `selector` to appear in page. If at the moment of calling the method the `selector` already exists, the method will return immediately. If the selector doesn't appear after the `timeout` milliseconds of waiting, the function will throw.\n *\n * This method works across navigations.\n *\n * @param selector - the selector to wait for.\n *\n * @param options - options to define if the element should be visible and how long to wait before timing out.\n *\n * @returns a promise which resolves when an element matching the selector string is added to the DOM.\n *\n * @example\n * ```js\n * const puppeteer = require('puppeteer');\n *\n * (async () => {\n *   const browser = await puppeteer.launch();\n *   const page = await browser.newPage();\n *   let currentURL;\n *   page.mainFrame()\n *   .waitForSelector('img')\n *   .then(() => console.log('First URL with image: ' + currentURL));\n *\n *   for (currentURL of ['https://example.com', 'https://google.com', 'https://bbc.com']) {\n *     await page.goto(currentURL);\n *   }\n *   await browser.close();\n * })();\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "waitForSelector(selector: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "WaitForSelectorOptions",
                  "canonicalReference": "@opennebula/puppeteer!WaitForSelectorOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ElementHandle",
                  "canonicalReference": "@opennebula/puppeteer!ElementHandle:class"
                },
                {
                  "kind": "Content",
                  "text": " | null>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "selector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "waitForSelector"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Frame#waitForTimeout:member(1)",
              "docComment": "/**\n * Causes your script to wait for the given number of milliseconds.\n *\n * @remarks\n *\n * It's generally recommended to not wait for a number of seconds, but instead use {@link Frame.waitForSelector}, {@link Frame.waitForXPath} or {@link Frame.waitForFunction} to wait for exactly the conditions you want.\n *\n * @param milliseconds - the number of milliseconds to wait.\n *\n * @example\n *\n * Wait for 1 second:\n * ```\n * await frame.waitForTimeout(1000);\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "waitForTimeout(milliseconds: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "milliseconds",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "waitForTimeout"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Frame#waitForXPath:member(1)",
              "docComment": "/**\n * @remarks\n *\n * Wait for the `xpath` to appear in page. If at the moment of calling the method the `xpath` already exists, the method will return immediately. If the xpath doesn't appear after the `timeout` milliseconds of waiting, the function will throw.\n *\n * For a code example, see the example for {@link Frame.waitForSelector}. That function behaves identically other than taking a CSS selector rather than an XPath.\n *\n * @param xpath - the XPath expression to wait for.\n *\n * @param options - options to configure the visiblity of the element and how long to wait before timing out.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "waitForXPath(xpath: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "WaitForSelectorOptions",
                  "canonicalReference": "@opennebula/puppeteer!WaitForSelectorOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ElementHandle",
                  "canonicalReference": "@opennebula/puppeteer!ElementHandle:class"
                },
                {
                  "kind": "Content",
                  "text": " | null>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "xpath",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "waitForXPath"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@opennebula/puppeteer!FrameAddScriptTagOptions:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface FrameAddScriptTagOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "FrameAddScriptTagOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!FrameAddScriptTagOptions#content:member",
              "docComment": "/**\n * Raw JavaScript content to be injected into the frame.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "content?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "content",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!FrameAddScriptTagOptions#path:member",
              "docComment": "/**\n * The path to a JavaScript file to be injected into the frame.\n *\n * @remarks\n *\n * If `path` is a relative path, it is resolved relative to the current working directory (`process.cwd()` in Node.js).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "path?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "path",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!FrameAddScriptTagOptions#type:member",
              "docComment": "/**\n * Set the script's `type`. Use `module` in order to load an ES2015 module.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!FrameAddScriptTagOptions#url:member",
              "docComment": "/**\n * the URL of the script to be added.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "url?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "url",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@opennebula/puppeteer!FrameAddStyleTagOptions:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface FrameAddStyleTagOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "FrameAddStyleTagOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!FrameAddStyleTagOptions#content:member",
              "docComment": "/**\n * Raw CSS content to be injected into the frame.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "content?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "content",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!FrameAddStyleTagOptions#path:member",
              "docComment": "/**\n * The path to a CSS file to be injected into the frame.\n *\n * @remarks\n *\n * If `path` is a relative path, it is resolved relative to the current working directory (`process.cwd()` in Node.js).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "path?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "path",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!FrameAddStyleTagOptions#url:member",
              "docComment": "/**\n * the URL of the CSS file to be added.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "url?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "url",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@opennebula/puppeteer!FrameWaitForFunctionOptions:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface FrameWaitForFunctionOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "FrameWaitForFunctionOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!FrameWaitForFunctionOptions#polling:member",
              "docComment": "/**\n * An interval at which the `pageFunction` is executed, defaults to `raf`. If `polling` is a number, then it is treated as an interval in milliseconds at which the function would be executed. If `polling` is a string, then it can be one of the following values:\n *\n * - `raf` - to constantly execute `pageFunction` in `requestAnimationFrame` callback. This is the tightest polling mode which is suitable to observe styling changes.\n *\n * - `mutation` - to execute `pageFunction` on every DOM mutation.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "polling?: "
                },
                {
                  "kind": "Content",
                  "text": "string | number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "polling",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!FrameWaitForFunctionOptions#timeout:member",
              "docComment": "/**\n * Maximum time to wait in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable the timeout. Puppeteer's default timeout can be changed using {@link Page.setDefaultTimeout}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "timeout?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "timeout",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@opennebula/puppeteer!GeolocationOptions:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface GeolocationOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "GeolocationOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!GeolocationOptions#accuracy:member",
              "docComment": "/**\n * Optional non-negative accuracy value.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "accuracy?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "accuracy",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!GeolocationOptions#latitude:member",
              "docComment": "/**\n * Longitude between -180 and 180.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "latitude: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "latitude",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!GeolocationOptions#longitude:member",
              "docComment": "/**\n * Latitude between -90 and 90.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "longitude: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "longitude",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@opennebula/puppeteer!Handler:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Handler<T = "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "(event?: T) => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Handler",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@opennebula/puppeteer!HTTPRequest:class",
          "docComment": "/**\n * Represents an HTTP request sent by a page.\n *\n * @remarks\n *\n * Whenever the page sends a request, such as for a network resource, the following events are emitted by Puppeteer's `page`:\n *\n * - `request`: emitted when the request is issued by the page. - `requestfinished` - emitted when the response body is downloaded and the request is complete.\n *\n * If request fails at some point, then instead of `requestfinished` event the `requestfailed` event is emitted.\n *\n * All of these events provide an instance of `HTTPRequest` representing the request that occurred:\n * ```\n * page.on('request', request => ...)\n * ```\n *\n * NOTE: HTTP Error responses, such as 404 or 503, are still successful responses from HTTP standpoint, so request will complete with `requestfinished` event.\n *\n * If request gets a 'redirect' response, the request is successfully finished with the `requestfinished` event, and a new request is issued to a redirected url.\n *\n * The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the `HTTPRequest` class.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class HTTPRequest "
            }
          ],
          "releaseTag": "Public",
          "name": "HTTPRequest",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!HTTPRequest#abort:member(1)",
              "docComment": "/**\n * Aborts a request.\n *\n * @remarks\n *\n * To use this, request interception should be enabled with {@link Page.setRequestInterception}. If it is not enabled, this method will throw an exception immediately.\n *\n * @param errorCode - optional error code to provide.\n *\n * @param priority - If provided, intercept is resolved using cooperative handling rules. Otherwise, intercept is resolved immediately.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "abort(errorCode?: "
                },
                {
                  "kind": "Reference",
                  "text": "ErrorCode",
                  "canonicalReference": "@opennebula/puppeteer!ErrorCode:type"
                },
                {
                  "kind": "Content",
                  "text": ", priority?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "errorCode",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "priority",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "abort"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!HTTPRequest#abortErrorReason:member(1)",
              "docComment": "/**\n * @returns the most recent reason for aborting the request\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "abortErrorReason(): "
                },
                {
                  "kind": "Reference",
                  "text": "Protocol.Network.ErrorReason",
                  "canonicalReference": "devtools-protocol!Protocol.Network.ErrorReason:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "abortErrorReason"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!HTTPRequest#continue:member(1)",
              "docComment": "/**\n * Continues request with optional request overrides.\n *\n * @remarks\n *\n * To use this, request interception should be enabled with {@link Page.setRequestInterception}.\n *\n * Exception is immediately thrown if the request interception is not enabled.\n *\n * @param overrides - optional overrides to apply to the request.\n *\n * @param priority - If provided, intercept is resolved using cooperative handling rules. Otherwise, intercept is resolved immediately.\n *\n * @example\n * ```js\n * await page.setRequestInterception(true);\n * page.on('request', request => {\n *   // Override headers\n *   const headers = Object.assign({}, request.headers(), {\n *     foo: 'bar', // set \"foo\" header\n *     origin: undefined, // remove \"origin\" header\n *   });\n *   request.continue({headers});\n * });\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "continue(overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "ContinueRequestOverrides",
                  "canonicalReference": "@opennebula/puppeteer!ContinueRequestOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ", priority?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "overrides",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "priority",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "continue"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!HTTPRequest#continueRequestOverrides:member(1)",
              "docComment": "/**\n * @returns the `ContinueRequestOverrides` that will be used if the interception is allowed to continue (ie, `abort()` and `respond()` aren't called).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "continueRequestOverrides(): "
                },
                {
                  "kind": "Reference",
                  "text": "ContinueRequestOverrides",
                  "canonicalReference": "@opennebula/puppeteer!ContinueRequestOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "continueRequestOverrides"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!HTTPRequest#enqueueInterceptAction:member(1)",
              "docComment": "/**\n * Adds an async request handler to the processing queue. Deferred handlers are not guaranteed to execute in any particular order, but they are guarnateed to resolve before the request interception is finalized.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "enqueueInterceptAction(pendingHandler: "
                },
                {
                  "kind": "Content",
                  "text": "() => void | "
                },
                {
                  "kind": "Reference",
                  "text": "PromiseLike",
                  "canonicalReference": "!PromiseLike:interface"
                },
                {
                  "kind": "Content",
                  "text": "<unknown>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "pendingHandler",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  }
                }
              ],
              "name": "enqueueInterceptAction"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!HTTPRequest#failure:member(1)",
              "docComment": "/**\n * Access information about the request's failure.\n *\n * @remarks\n *\n * @returns `null` unless the request failed. If the request fails this can return an object with `errorText` containing a human-readable error message, e.g. `net::ERR_FAILED`. It is not guaranteeded that there will be failure text if the request fails.\n *\n * @example\n *\n * Example of logging all failed requests:\n * ```js\n * page.on('requestfailed', request => {\n *   console.log(request.url() + ' ' + request.failure().errorText);\n * });\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "failure(): "
                },
                {
                  "kind": "Content",
                  "text": "{\n        errorText: string;\n    } | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "failure"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!HTTPRequest#finalizeInterceptions:member(1)",
              "docComment": "/**\n * Awaits pending interception handlers and then decides how to fulfill the request interception.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "finalizeInterceptions(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "finalizeInterceptions"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!HTTPRequest#frame:member(1)",
              "docComment": "/**\n * @returns the frame that initiated the request, or null if navigating to error pages.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "frame(): "
                },
                {
                  "kind": "Reference",
                  "text": "Frame",
                  "canonicalReference": "@opennebula/puppeteer!Frame:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "frame"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!HTTPRequest#headers:member(1)",
              "docComment": "/**\n * @returns an object with HTTP headers associated with the request. All header names are lower-case.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "headers(): "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<string, string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "headers"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!HTTPRequest#isNavigationRequest:member(1)",
              "docComment": "/**\n * @returns true if the request is the driver of the current frame's navigation.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isNavigationRequest(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "isNavigationRequest"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!HTTPRequest#method:member(1)",
              "docComment": "/**\n * @returns the method used (`GET`, `POST`, etc.)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "method(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "method"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!HTTPRequest#postData:member(1)",
              "docComment": "/**\n * @returns the request's post body, if any.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "postData(): "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "postData"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!HTTPRequest#redirectChain:member(1)",
              "docComment": "/**\n * A `redirectChain` is a chain of requests initiated to fetch a resource.\n *\n * @remarks\n *\n * `redirectChain` is shared between all the requests of the same chain.\n *\n * For example, if the website `http://example.com` has a single redirect to `https://example.com`, then the chain will contain one request:\n * ```js\n * const response = await page.goto('http://example.com');\n * const chain = response.request().redirectChain();\n * console.log(chain.length); // 1\n * console.log(chain[0].url()); // 'http://example.com'\n * ```\n *\n * If the website `https://google.com` has no redirects, then the chain will be empty:\n * ```js\n * const response = await page.goto('https://google.com');\n * const chain = response.request().redirectChain();\n * console.log(chain.length); // 0\n * ```\n *\n * @returns the chain of requests - if a server responds with at least a single redirect, this chain will contain all requests that were redirected.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "redirectChain(): "
                },
                {
                  "kind": "Reference",
                  "text": "HTTPRequest",
                  "canonicalReference": "@opennebula/puppeteer!HTTPRequest:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "redirectChain"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!HTTPRequest#resourceType:member(1)",
              "docComment": "/**\n * Contains the request's resource type as it was perceived by the rendering engine.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "resourceType(): "
                },
                {
                  "kind": "Reference",
                  "text": "ResourceType",
                  "canonicalReference": "@opennebula/puppeteer!ResourceType:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "resourceType"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!HTTPRequest#respond:member(1)",
              "docComment": "/**\n * Fulfills a request with the given response.\n *\n * @remarks\n *\n * To use this, request interception should be enabled with {@link Page.setRequestInterception}.\n *\n * Exception is immediately thrown if the request interception is not enabled.\n *\n * @param response - the response to fulfill the request with.\n *\n * @param priority - If provided, intercept is resolved using cooperative handling rules. Otherwise, intercept is resolved immediately.\n *\n * @example\n *\n * An example of fulfilling all requests with 404 responses:\n * ```js\n * await page.setRequestInterception(true);\n * page.on('request', request => {\n *   request.respond({\n *     status: 404,\n *     contentType: 'text/plain',\n *     body: 'Not Found!'\n *   });\n * });\n * ```\n *\n * NOTE: Mocking responses for dataURL requests is not supported. Calling `request.respond` for a dataURL request is a noop.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "respond(response: "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ResponseForRequest",
                  "canonicalReference": "@opennebula/puppeteer!ResponseForRequest:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ", priority?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "response",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "priority",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  }
                }
              ],
              "name": "respond"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!HTTPRequest#response:member(1)",
              "docComment": "/**\n * @returns A matching `HTTPResponse` object, or null if the response has not been received yet.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "response(): "
                },
                {
                  "kind": "Reference",
                  "text": "HTTPResponse",
                  "canonicalReference": "@opennebula/puppeteer!HTTPResponse:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "response"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!HTTPRequest#responseForRequest:member(1)",
              "docComment": "/**\n * @returns The `ResponseForRequest` that gets used if the interception is allowed to respond (ie, `abort()` is not called).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "responseForRequest(): "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ResponseForRequest",
                  "canonicalReference": "@opennebula/puppeteer!ResponseForRequest:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "responseForRequest"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!HTTPRequest#url:member(1)",
              "docComment": "/**\n * @returns the URL of the request\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "url(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "url"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@opennebula/puppeteer!HTTPResponse:class",
          "docComment": "/**\n * The HTTPResponse class represents responses which are received by the {@link Page} class.\n *\n * @remarks\n *\n * The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the `HTTPResponse` class.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class HTTPResponse "
            }
          ],
          "releaseTag": "Public",
          "name": "HTTPResponse",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!HTTPResponse#buffer:member(1)",
              "docComment": "/**\n * @returns Promise which resolves to a buffer with response body.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "buffer(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Buffer",
                  "canonicalReference": "!Buffer:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "buffer"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!HTTPResponse#frame:member(1)",
              "docComment": "/**\n * @returns A {@link Frame} that initiated this response, or `null` if navigating to error pages.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "frame(): "
                },
                {
                  "kind": "Reference",
                  "text": "Frame",
                  "canonicalReference": "@opennebula/puppeteer!Frame:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "frame"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!HTTPResponse#fromCache:member(1)",
              "docComment": "/**\n * @returns True if the response was served from either the browser's disk cache or memory cache.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fromCache(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "fromCache"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!HTTPResponse#fromServiceWorker:member(1)",
              "docComment": "/**\n * @returns True if the response was served by a service worker.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fromServiceWorker(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "fromServiceWorker"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!HTTPResponse#headers:member(1)",
              "docComment": "/**\n * @returns An object with HTTP headers associated with the response. All header names are lower-case.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "headers(): "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<string, string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "headers"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!HTTPResponse#json:member(1)",
              "docComment": "/**\n * @remarks\n *\n * This method will throw if the response body is not parsable via `JSON.parse`.\n *\n * @returns Promise which resolves to a JSON representation of response body.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "json(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<any>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "json"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!HTTPResponse#ok:member(1)",
              "docComment": "/**\n * @returns True if the response was successful (status in the range 200-299).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ok(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "ok"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!HTTPResponse#remoteAddress:member(1)",
              "docComment": "/**\n * @returns The IP address and port number used to connect to the remote server.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "remoteAddress(): "
                },
                {
                  "kind": "Reference",
                  "text": "RemoteAddress",
                  "canonicalReference": "@opennebula/puppeteer!RemoteAddress:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "remoteAddress"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!HTTPResponse#request:member(1)",
              "docComment": "/**\n * @returns A matching {@link HTTPRequest} object.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "request(): "
                },
                {
                  "kind": "Reference",
                  "text": "HTTPRequest",
                  "canonicalReference": "@opennebula/puppeteer!HTTPRequest:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "request"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!HTTPResponse#securityDetails:member(1)",
              "docComment": "/**\n * @returns {@link SecurityDetails} if the response was received over the secure connection, or `null` otherwise.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "securityDetails(): "
                },
                {
                  "kind": "Reference",
                  "text": "SecurityDetails",
                  "canonicalReference": "@opennebula/puppeteer!SecurityDetails:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "securityDetails"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!HTTPResponse#status:member(1)",
              "docComment": "/**\n * @returns The status code of the response (e.g., 200 for a success).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "status(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "status"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!HTTPResponse#statusText:member(1)",
              "docComment": "/**\n * @returns The status text of the response (e.g. usually an \"OK\" for a success).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "statusText(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "statusText"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!HTTPResponse#text:member(1)",
              "docComment": "/**\n * @returns Promise which resolves to a text representation of response body.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "text(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "text"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!HTTPResponse#url:member(1)",
              "docComment": "/**\n * @returns The URL of the response.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "url(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "url"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@opennebula/puppeteer!InterceptResolutionStrategy:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type InterceptResolutionStrategy = "
            },
            {
              "kind": "Content",
              "text": "'abort' | 'respond' | 'continue' | 'disabled' | 'none' | 'alreay-handled'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "InterceptResolutionStrategy",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@opennebula/puppeteer!InternalNetworkConditions:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface InternalNetworkConditions extends "
            },
            {
              "kind": "Reference",
              "text": "NetworkConditions",
              "canonicalReference": "@opennebula/puppeteer!NetworkConditions:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "InternalNetworkConditions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!InternalNetworkConditions#offline:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "offline: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "offline",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@opennebula/puppeteer!JSCoverage:class",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class JSCoverage "
            }
          ],
          "releaseTag": "Public",
          "name": "JSCoverage",
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@opennebula/puppeteer!JSCoverage#_client:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_client: "
                },
                {
                  "kind": "Reference",
                  "text": "CDPSession",
                  "canonicalReference": "@opennebula/puppeteer!CDPSession:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "_client",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@opennebula/puppeteer!JSCoverage#_enabled:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_enabled: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "_enabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@opennebula/puppeteer!JSCoverage#_eventListeners:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_eventListeners: "
                },
                {
                  "kind": "Reference",
                  "text": "PuppeteerEventListener",
                  "canonicalReference": "@opennebula/puppeteer!PuppeteerEventListener:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "_eventListeners",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!JSCoverage#_onExecutionContextsCleared:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_onExecutionContextsCleared(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "_onExecutionContextsCleared"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!JSCoverage#_onScriptParsed:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_onScriptParsed(event: "
                },
                {
                  "kind": "Reference",
                  "text": "Protocol.Debugger.ScriptParsedEvent",
                  "canonicalReference": "devtools-protocol!Protocol.Debugger.ScriptParsedEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "_onScriptParsed"
            },
            {
              "kind": "Property",
              "canonicalReference": "@opennebula/puppeteer!JSCoverage#_reportAnonymousScripts:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_reportAnonymousScripts: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "_reportAnonymousScripts",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@opennebula/puppeteer!JSCoverage#_resetOnNavigation:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_resetOnNavigation: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "_resetOnNavigation",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@opennebula/puppeteer!JSCoverage#_scriptSources:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_scriptSources: "
                },
                {
                  "kind": "Reference",
                  "text": "Map",
                  "canonicalReference": "!Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string, string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "_scriptSources",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@opennebula/puppeteer!JSCoverage#_scriptURLs:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_scriptURLs: "
                },
                {
                  "kind": "Reference",
                  "text": "Map",
                  "canonicalReference": "!Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string, string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "_scriptURLs",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Constructor",
              "canonicalReference": "@opennebula/puppeteer!JSCoverage:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `JSCoverage` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(client: "
                },
                {
                  "kind": "Reference",
                  "text": "CDPSession",
                  "canonicalReference": "@opennebula/puppeteer!CDPSession:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "client",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!JSCoverage#start:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "start(options?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        resetOnNavigation?: boolean;\n        reportAnonymousScripts?: boolean;\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "start"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!JSCoverage#stop:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stop(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "CoverageEntry",
                  "canonicalReference": "@opennebula/puppeteer!CoverageEntry:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "stop"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@opennebula/puppeteer!JSCoverageOptions:interface",
          "docComment": "/**\n * Set of configurable options for JS coverage.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface JSCoverageOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "JSCoverageOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!JSCoverageOptions#reportAnonymousScripts:member",
              "docComment": "/**\n * Whether anonymous scripts generated by the page should be reported.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "reportAnonymousScripts?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "reportAnonymousScripts",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!JSCoverageOptions#resetOnNavigation:member",
              "docComment": "/**\n * Whether to reset coverage on every navigation.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "resetOnNavigation?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "resetOnNavigation",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@opennebula/puppeteer!JSHandle:class",
          "docComment": "/**\n * Represents an in-page JavaScript object. JSHandles can be created with the {@link Page.evaluateHandle | page.evaluateHandle} method.\n *\n * @remarks\n *\n * The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the `JSHandle` class.\n *\n * @example\n * ```js\n * const windowHandle = await page.evaluateHandle(() => window);\n * ```\n *\n * JSHandle prevents the referenced JavaScript object from being garbage-collected unless the handle is {@link JSHandle.dispose | disposed}. JSHandles are auto- disposed when their origin frame gets navigated or the parent context gets destroyed.\n *\n * JSHandle instances can be used as arguments for {@link Page.$eval}, {@link Page.evaluate}, and {@link Page.evaluateHandle}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class JSHandle<HandleObjectType = "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "HandleObjectType",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "JSHandle",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!JSHandle#asElement:member(1)",
              "docComment": "/**\n * @returns Either `null` or the object handle itself, if the object handle is an instance of {@link ElementHandle}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "asElement(): "
                },
                {
                  "kind": "Reference",
                  "text": "ElementHandle",
                  "canonicalReference": "@opennebula/puppeteer!ElementHandle:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "asElement"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!JSHandle#dispose:member(1)",
              "docComment": "/**\n * Stops referencing the element handle, and resolves when the object handle is successfully disposed of.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dispose(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "dispose"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!JSHandle#evaluate:member(1)",
              "docComment": "/**\n * This method passes this handle as the first argument to `pageFunction`. If `pageFunction` returns a Promise, then `handle.evaluate` would wait for the promise to resolve and return its value.\n *\n * @example\n * ```js\n * const tweetHandle = await page.$('.tweet .retweets');\n * expect(await tweetHandle.evaluate(node => node.innerText)).toBe('10');\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "evaluate<T extends "
                },
                {
                  "kind": "Reference",
                  "text": "EvaluateFn",
                  "canonicalReference": "@opennebula/puppeteer!EvaluateFn:type"
                },
                {
                  "kind": "Content",
                  "text": "<HandleObjectType>"
                },
                {
                  "kind": "Content",
                  "text": ">(pageFunction: "
                },
                {
                  "kind": "Content",
                  "text": "T | string"
                },
                {
                  "kind": "Content",
                  "text": ", ...args: "
                },
                {
                  "kind": "Reference",
                  "text": "SerializableOrJSHandle",
                  "canonicalReference": "@opennebula/puppeteer!SerializableOrJSHandle:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UnwrapPromiseLike",
                  "canonicalReference": "@opennebula/puppeteer!UnwrapPromiseLike:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "EvaluateFnReturnType",
                  "canonicalReference": "@opennebula/puppeteer!EvaluateFnReturnType:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 15
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "pageFunction",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "args",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 8
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "evaluate"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!JSHandle#evaluateHandle:member(1)",
              "docComment": "/**\n * This method passes this handle as the first argument to `pageFunction`.\n *\n * @remarks\n *\n * The only difference between `jsHandle.evaluate` and `jsHandle.evaluateHandle` is that `jsHandle.evaluateHandle` returns an in-page object (JSHandle).\n *\n * If the function passed to `jsHandle.evaluateHandle` returns a Promise, then `evaluateHandle.evaluateHandle` waits for the promise to resolve and returns its value.\n *\n * See {@link Page.evaluateHandle} for more details.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "evaluateHandle<HandleType extends "
                },
                {
                  "kind": "Reference",
                  "text": "JSHandle",
                  "canonicalReference": "@opennebula/puppeteer!JSHandle:class"
                },
                {
                  "kind": "Content",
                  "text": " "
                },
                {
                  "kind": "Content",
                  "text": "= "
                },
                {
                  "kind": "Reference",
                  "text": "JSHandle",
                  "canonicalReference": "@opennebula/puppeteer!JSHandle:class"
                },
                {
                  "kind": "Content",
                  "text": ">(pageFunction: "
                },
                {
                  "kind": "Reference",
                  "text": "EvaluateHandleFn",
                  "canonicalReference": "@opennebula/puppeteer!EvaluateHandleFn:type"
                },
                {
                  "kind": "Content",
                  "text": ", ...args: "
                },
                {
                  "kind": "Reference",
                  "text": "SerializableOrJSHandle",
                  "canonicalReference": "@opennebula/puppeteer!SerializableOrJSHandle:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<HandleType>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "pageFunction",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  }
                },
                {
                  "parameterName": "args",
                  "parameterTypeTokenRange": {
                    "startIndex": 8,
                    "endIndex": 10
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "HandleType",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "name": "evaluateHandle"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!JSHandle#executionContext:member(1)",
              "docComment": "/**\n * Returns the execution context the handle belongs to.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "executionContext(): "
                },
                {
                  "kind": "Reference",
                  "text": "ExecutionContext",
                  "canonicalReference": "@opennebula/puppeteer!ExecutionContext:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "executionContext"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!JSHandle#getProperties:member(1)",
              "docComment": "/**\n * The method returns a map with property names as keys and JSHandle instances for the property values.\n *\n * @example\n * ```js\n * const listHandle = await page.evaluateHandle(() => document.body.children);\n * const properties = await listHandle.getProperties();\n * const children = [];\n * for (const property of properties.values()) {\n *   const element = property.asElement();\n *   if (element)\n *     children.push(element);\n * }\n * children; // holds elementHandles to all children of document.body\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getProperties(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Map",
                  "canonicalReference": "!Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string, "
                },
                {
                  "kind": "Reference",
                  "text": "JSHandle",
                  "canonicalReference": "@opennebula/puppeteer!JSHandle:class"
                },
                {
                  "kind": "Content",
                  "text": ">>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getProperties"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!JSHandle#getProperty:member(1)",
              "docComment": "/**\n * Fetches a single property from the referenced object.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getProperty(propertyName: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "JSHandle",
                  "canonicalReference": "@opennebula/puppeteer!JSHandle:class"
                },
                {
                  "kind": "Content",
                  "text": " | undefined>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "propertyName",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getProperty"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!JSHandle#jsonValue:member(1)",
              "docComment": "/**\n * @remarks\n *\n * The JSON is generated by running {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify | JSON.stringify} on the object in page and consequent {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse | JSON.parse} in puppeteer. **NOTE** The method throws if the referenced object is not stringifiable.\n *\n * @returns Returns a JSON representation of the object.If the object has a `toJSON` function, it will not be called.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "jsonValue<T = "
                },
                {
                  "kind": "Content",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": ">(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "jsonValue"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!JSHandle#toString:member(1)",
              "docComment": "/**\n * Returns a string representation of the JSHandle.\n *\n * @remarks\n *\n * Useful during debugging.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toString(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "toString"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@opennebula/puppeteer!JSONArray:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type JSONArray = "
            },
            {
              "kind": "Reference",
              "text": "Serializable",
              "canonicalReference": "@opennebula/puppeteer!Serializable:type"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "JSONArray",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@opennebula/puppeteer!JSONObject:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface JSONObject "
            }
          ],
          "releaseTag": "Public",
          "name": "JSONObject",
          "members": [
            {
              "kind": "IndexSignature",
              "canonicalReference": "@opennebula/puppeteer!JSONObject:index(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "[key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Reference",
                  "text": "Serializable",
                  "canonicalReference": "@opennebula/puppeteer!Serializable:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@opennebula/puppeteer!Keyboard:class",
          "docComment": "/**\n * Keyboard provides an api for managing a virtual keyboard. The high level api is {@link Keyboard.\"type\"}, which takes raw characters and generates proper keydown, keypress/input, and keyup events on your page.\n *\n * @remarks\n *\n * For finer control, you can use {@link Keyboard.down}, {@link Keyboard.up}, and {@link Keyboard.sendCharacter} to manually fire events as if they were generated from a real keyboard.\n *\n * On MacOS, keyboard shortcuts like `⌘ A` -\\> Select All do not work. See {@link https://github.com/puppeteer/puppeteer/issues/1313 | #1313}.\n *\n * The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the `Keyboard` class.\n *\n * @example\n *\n * An example of holding down `Shift` in order to select and delete some text:\n * ```js\n * await page.keyboard.type('Hello World!');\n * await page.keyboard.press('ArrowLeft');\n *\n * await page.keyboard.down('Shift');\n * for (let i = 0; i < ' World'.length; i++)\n *   await page.keyboard.press('ArrowLeft');\n * await page.keyboard.up('Shift');\n *\n * await page.keyboard.press('Backspace');\n * // Result text will end up saying 'Hello!'\n * ```\n *\n * @example\n *\n * An example of pressing `A`\n * ```js\n * await page.keyboard.down('Shift');\n * await page.keyboard.press('KeyA');\n * await page.keyboard.up('Shift');\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Keyboard "
            }
          ],
          "releaseTag": "Public",
          "name": "Keyboard",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Keyboard#down:member(1)",
              "docComment": "/**\n * Dispatches a `keydown` event.\n *\n * @remarks\n *\n * If `key` is a single character and no modifier keys besides `Shift` are being held down, a `keypress`/`input` event will also generated. The `text` option can be specified to force an input event to be generated. If `key` is a modifier key, `Shift`, `Meta`, `Control`, or `Alt`, subsequent key presses will be sent with that modifier active. To release the modifier key, use {@link Keyboard.up}.\n *\n * After the key is pressed once, subsequent calls to {@link Keyboard.down} will have {@link https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/repeat | repeat} set to true. To release the key, use {@link Keyboard.up}.\n *\n * Modifier keys DO influence {@link Keyboard.down}. Holding down `Shift` will type the text in upper case.\n *\n * @param key - Name of key to press, such as `ArrowLeft`. See {@link KeyInput} for a list of all key names.\n *\n * @param options - An object of options. Accepts text which, if specified, generates an input event with this text.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "down(key: "
                },
                {
                  "kind": "Reference",
                  "text": "KeyInput",
                  "canonicalReference": "@opennebula/puppeteer!KeyInput:type"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        text?: string;\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "down"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Keyboard#press:member(1)",
              "docComment": "/**\n * Shortcut for {@link Keyboard.down} and {@link Keyboard.up}.\n *\n * @remarks\n *\n * If `key` is a single character and no modifier keys besides `Shift` are being held down, a `keypress`/`input` event will also generated. The `text` option can be specified to force an input event to be generated.\n *\n * Modifier keys DO effect {@link Keyboard.press}. Holding down `Shift` will type the text in upper case.\n *\n * @param key - Name of key to press, such as `ArrowLeft`. See {@link KeyInput} for a list of all key names.\n *\n * @param options - An object of options. Accepts text which, if specified, generates an input event with this text. Accepts delay which, if specified, is the time to wait between `keydown` and `keyup` in milliseconds. Defaults to 0.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "press(key: "
                },
                {
                  "kind": "Reference",
                  "text": "KeyInput",
                  "canonicalReference": "@opennebula/puppeteer!KeyInput:type"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        delay?: number;\n        text?: string;\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "press"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Keyboard#sendCharacter:member(1)",
              "docComment": "/**\n * Dispatches a `keypress` and `input` event. This does not send a `keydown` or `keyup` event.\n *\n * @remarks\n *\n * Modifier keys DO NOT effect {@link Keyboard.sendCharacter | Keyboard.sendCharacter}. Holding down `Shift` will not type the text in upper case.\n *\n * @param char - Character to send into the page.\n *\n * @example\n * ```js\n * page.keyboard.sendCharacter('嗨');\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sendCharacter(char: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "char",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "sendCharacter"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Keyboard#type:member(1)",
              "docComment": "/**\n * Sends a `keydown`, `keypress`/`input`, and `keyup` event for each character in the text.\n *\n * @remarks\n *\n * To press a special key, like `Control` or `ArrowDown`, use {@link Keyboard.press}.\n *\n * Modifier keys DO NOT effect `keyboard.type`. Holding down `Shift` will not type the text in upper case.\n *\n * @param text - A text to type into a focused element.\n *\n * @param options - An object of options. Accepts delay which, if specified, is the time to wait between `keydown` and `keyup` in milliseconds. Defaults to 0.\n *\n * @example\n * ```js\n * await page.keyboard.type('Hello'); // Types instantly\n * await page.keyboard.type('World', {delay: 100}); // Types slower, like a user\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type(text: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        delay?: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "text",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "type"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Keyboard#up:member(1)",
              "docComment": "/**\n * Dispatches a `keyup` event.\n *\n * @param key - Name of key to release, such as `ArrowLeft`. See {@link KeyInput | KeyInput} for a list of all key names.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "up(key: "
                },
                {
                  "kind": "Reference",
                  "text": "KeyInput",
                  "canonicalReference": "@opennebula/puppeteer!KeyInput:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "up"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@opennebula/puppeteer!KeyInput:type",
          "docComment": "/**\n * All the valid keys that can be passed to functions that take user input, such as {@link Keyboard.press | keyboard.press}\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type KeyInput = "
            },
            {
              "kind": "Content",
              "text": "'0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | 'Power' | 'Eject' | 'Abort' | 'Help' | 'Backspace' | 'Tab' | 'Numpad5' | 'NumpadEnter' | 'Enter' | '\\r' | '\\n' | 'ShiftLeft' | 'ShiftRight' | 'ControlLeft' | 'ControlRight' | 'AltLeft' | 'AltRight' | 'Pause' | 'CapsLock' | 'Escape' | 'Convert' | 'NonConvert' | 'Space' | 'Numpad9' | 'PageUp' | 'Numpad3' | 'PageDown' | 'End' | 'Numpad1' | 'Home' | 'Numpad7' | 'ArrowLeft' | 'Numpad4' | 'Numpad8' | 'ArrowUp' | 'ArrowRight' | 'Numpad6' | 'Numpad2' | 'ArrowDown' | 'Select' | 'Open' | 'PrintScreen' | 'Insert' | 'Numpad0' | 'Delete' | 'NumpadDecimal' | 'Digit0' | 'Digit1' | 'Digit2' | 'Digit3' | 'Digit4' | 'Digit5' | 'Digit6' | 'Digit7' | 'Digit8' | 'Digit9' | 'KeyA' | 'KeyB' | 'KeyC' | 'KeyD' | 'KeyE' | 'KeyF' | 'KeyG' | 'KeyH' | 'KeyI' | 'KeyJ' | 'KeyK' | 'KeyL' | 'KeyM' | 'KeyN' | 'KeyO' | 'KeyP' | 'KeyQ' | 'KeyR' | 'KeyS' | 'KeyT' | 'KeyU' | 'KeyV' | 'KeyW' | 'KeyX' | 'KeyY' | 'KeyZ' | 'MetaLeft' | 'MetaRight' | 'ContextMenu' | 'NumpadMultiply' | 'NumpadAdd' | 'NumpadSubtract' | 'NumpadDivide' | 'F1' | 'F2' | 'F3' | 'F4' | 'F5' | 'F6' | 'F7' | 'F8' | 'F9' | 'F10' | 'F11' | 'F12' | 'F13' | 'F14' | 'F15' | 'F16' | 'F17' | 'F18' | 'F19' | 'F20' | 'F21' | 'F22' | 'F23' | 'F24' | 'NumLock' | 'ScrollLock' | 'AudioVolumeMute' | 'AudioVolumeDown' | 'AudioVolumeUp' | 'MediaTrackNext' | 'MediaTrackPrevious' | 'MediaStop' | 'MediaPlayPause' | 'Semicolon' | 'Equal' | 'NumpadEqual' | 'Comma' | 'Minus' | 'Period' | 'Slash' | 'Backquote' | 'BracketLeft' | 'Backslash' | 'BracketRight' | 'Quote' | 'AltGraph' | 'Props' | 'Cancel' | 'Clear' | 'Shift' | 'Control' | 'Alt' | 'Accept' | 'ModeChange' | ' ' | 'Print' | 'Execute' | '\\u0000' | 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | 'Meta' | '*' | '+' | '-' | '/' | ';' | '=' | ',' | '.' | '`' | '[' | '\\\\' | ']' | \"'\" | 'Attn' | 'CrSel' | 'ExSel' | 'EraseEof' | 'Play' | 'ZoomOut' | ')' | '!' | '@' | '#' | '$' | '%' | '^' | '&' | '(' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | ':' | '<' | '_' | '>' | '?' | '~' | '{' | '|' | '}' | '\"' | 'SoftLeft' | 'SoftRight' | 'Camera' | 'Call' | 'EndCall' | 'VolumeDown' | 'VolumeUp'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "KeyInput",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@opennebula/puppeteer!launch:function(1)",
          "docComment": "/**\n * Launches puppeteer and launches a browser instance with given arguments and options when specified.\n *\n * @remarks\n *\n * @param options - Set of configurable options to set on the browser.\n *\n * @returns Promise which resolves to browser instance.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function launch(options?: "
            },
            {
              "kind": "Reference",
              "text": "LaunchOptions",
              "canonicalReference": "@opennebula/puppeteer!LaunchOptions:interface"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "BrowserLaunchArgumentOptions",
              "canonicalReference": "@opennebula/puppeteer!BrowserLaunchArgumentOptions:interface"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "BrowserConnectOptions",
              "canonicalReference": "@opennebula/puppeteer!BrowserConnectOptions:interface"
            },
            {
              "kind": "Content",
              "text": " & {\n    product?: "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "@opennebula/puppeteer!Product:type"
            },
            {
              "kind": "Content",
              "text": ";\n    extraPrefsFirefox?: "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, unknown>;\n}"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Browser",
              "canonicalReference": "@opennebula/puppeteer!Browser:class"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 12,
            "endIndex": 16
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 11
              }
            }
          ],
          "name": "launch"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@opennebula/puppeteer!LaunchOptions:interface",
          "docComment": "/**\n * Generic launch options that can be passed when launching any browser.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface LaunchOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "LaunchOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!LaunchOptions#channel:member",
              "docComment": "/**\n * Chrome Release Channel\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "channel?: "
                },
                {
                  "kind": "Reference",
                  "text": "ChromeReleaseChannel",
                  "canonicalReference": "@opennebula/puppeteer!ChromeReleaseChannel:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "channel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!LaunchOptions#dumpio:member",
              "docComment": "/**\n * If true, pipes the browser process stdout and stderr to `process.stdout` and `process.stderr`.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dumpio?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "dumpio",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!LaunchOptions#env:member",
              "docComment": "/**\n * Specify environment variables that will be visible to the browser.\n *\n * @defaultValue\n *\n * The contents of `process.env`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "env?: "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<string, string | undefined>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "env",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!LaunchOptions#executablePath:member",
              "docComment": "/**\n * Path to a browser executable to use instead of the bundled Chromium. Note that Puppeteer is only guaranteed to work with the bundled Chromium, so use this setting at your own risk.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "executablePath?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "executablePath",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!LaunchOptions#extraPrefsFirefox:member",
              "docComment": "/**\n * {@link https://developer.mozilla.org/en-US/docs/Mozilla/Preferences/Preference_reference | Additional preferences} that can be passed when launching with Firefox.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "extraPrefsFirefox?: "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<string, unknown>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "extraPrefsFirefox",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!LaunchOptions#handleSIGHUP:member",
              "docComment": "/**\n * Close the browser process on `SIGHUP`.\n *\n * @defaultValue\n *\n * `true`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "handleSIGHUP?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "handleSIGHUP",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!LaunchOptions#handleSIGINT:member",
              "docComment": "/**\n * Close the browser process on `Ctrl+C`.\n *\n * @defaultValue\n *\n * `true`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "handleSIGINT?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "handleSIGINT",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!LaunchOptions#handleSIGTERM:member",
              "docComment": "/**\n * Close the browser process on `SIGTERM`.\n *\n * @defaultValue\n *\n * `true`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "handleSIGTERM?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "handleSIGTERM",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!LaunchOptions#ignoreDefaultArgs:member",
              "docComment": "/**\n * If `true`, do not use `puppeteer.defaultArgs()` when creating a browser. If an array is provided, these args will be filtered out. Use this with care - you probably want the default arguments Puppeteer uses.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ignoreDefaultArgs?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "ignoreDefaultArgs",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!LaunchOptions#pipe:member",
              "docComment": "/**\n * Connect to a browser over a pipe instead of a WebSocket.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pipe?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "pipe",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!LaunchOptions#product:member",
              "docComment": "/**\n * Which browser to launch.\n *\n * @defaultValue\n *\n * `chrome`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "product?: "
                },
                {
                  "kind": "Reference",
                  "text": "Product",
                  "canonicalReference": "@opennebula/puppeteer!Product:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "product",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!LaunchOptions#timeout:member",
              "docComment": "/**\n * Maximum time in milliseconds to wait for the browser to start. Pass `0` to disable the timeout.\n *\n * @defaultValue\n *\n * 30000 (30 seconds).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "timeout?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "timeout",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!LaunchOptions#waitForInitialPage:member",
              "docComment": "/**\n * Whether to wait for the initial page to be ready. Useful when a user explicitly disables that (e.g. `--no-startup-window` for Chrome).\n *\n * @defaultValue\n *\n * true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "waitForInitialPage?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "waitForInitialPage",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@opennebula/puppeteer!MediaFeature:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface MediaFeature "
            }
          ],
          "releaseTag": "Public",
          "name": "MediaFeature",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!MediaFeature#name:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!MediaFeature#value:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "value: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "value",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@opennebula/puppeteer!Metrics:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Metrics "
            }
          ],
          "releaseTag": "Public",
          "name": "Metrics",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!Metrics#Documents:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Documents?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "Documents",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!Metrics#Frames:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Frames?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "Frames",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!Metrics#JSEventListeners:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "JSEventListeners?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "JSEventListeners",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!Metrics#JSHeapTotalSize:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "JSHeapTotalSize?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "JSHeapTotalSize",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!Metrics#JSHeapUsedSize:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "JSHeapUsedSize?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "JSHeapUsedSize",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!Metrics#LayoutCount:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "LayoutCount?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "LayoutCount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!Metrics#LayoutDuration:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "LayoutDuration?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "LayoutDuration",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!Metrics#Nodes:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Nodes?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "Nodes",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!Metrics#RecalcStyleCount:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "RecalcStyleCount?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "RecalcStyleCount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!Metrics#RecalcStyleDuration:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "RecalcStyleDuration?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "RecalcStyleDuration",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!Metrics#ScriptDuration:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ScriptDuration?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "ScriptDuration",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!Metrics#TaskDuration:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "TaskDuration?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "TaskDuration",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!Metrics#Timestamp:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Timestamp?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "Timestamp",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@opennebula/puppeteer!Mouse:class",
          "docComment": "/**\n * The Mouse class operates in main-frame CSS pixels relative to the top-left corner of the viewport.\n *\n * @remarks\n *\n * Every `page` object has its own Mouse, accessible with [`page.mouse`](#pagemouse).\n *\n * The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the `Mouse` class.\n *\n * @example\n * ```js\n * // Using ‘page.mouse’ to trace a 100x100 square.\n * await page.mouse.move(0, 0);\n * await page.mouse.down();\n * await page.mouse.move(0, 100);\n * await page.mouse.move(100, 100);\n * await page.mouse.move(100, 0);\n * await page.mouse.move(0, 0);\n * await page.mouse.up();\n * ```\n *\n * **Note**: The mouse events trigger synthetic `MouseEvent`s. This means that it does not fully replicate the functionality of what a normal user would be able to do with their mouse.\n *\n * For example, dragging and selecting text is not possible using `page.mouse`. Instead, you can use the {@link https://developer.mozilla.org/en-US/docs/Web/API/DocumentOrShadowRoot/getSelection | `DocumentOrShadowRoot.getSelection()`} functionality implemented in the platform.\n *\n * @example\n *\n * For example, if you want to select all content between nodes:\n * ```js\n * await page.evaluate((from, to) => {\n *   const selection = from.getRootNode().getSelection();\n *   const range = document.createRange();\n *   range.setStartBefore(from);\n *   range.setEndAfter(to);\n *   selection.removeAllRanges();\n *   selection.addRange(range);\n * }, fromJSHandle, toJSHandle);\n * ```\n *\n * If you then would want to copy-paste your selection, you can use the clipboard api:\n * ```js\n * // The clipboard api does not allow you to copy, unless the tab is focused.\n * await page.bringToFront();\n * await page.evaluate(() => {\n *   // Copy the selected content to the clipboard\n *   document.execCommand('copy');\n *   // Obtain the content of the clipboard as a string\n *   return navigator.clipboard.readText();\n * });\n * ```\n *\n * **Note**: If you want access to the clipboard API, you have to give it permission to do so:\n * ```js\n * await browser.defaultBrowserContext().overridePermissions(\n *   '<your origin>', ['clipboard-read', 'clipboard-write']\n * );\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Mouse "
            }
          ],
          "releaseTag": "Public",
          "name": "Mouse",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Mouse#click:member(1)",
              "docComment": "/**\n * Shortcut for `mouse.move`, `mouse.down` and `mouse.up`.\n *\n * @param x - Horizontal position of the mouse.\n *\n * @param y - Vertical position of the mouse.\n *\n * @param options - Optional `MouseOptions`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "click(x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "MouseOptions",
                  "canonicalReference": "@opennebula/puppeteer!MouseOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": " & {\n        delay?: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 7
                  }
                }
              ],
              "name": "click"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Mouse#down:member(1)",
              "docComment": "/**\n * Dispatches a `mousedown` event.\n *\n * @param options - Optional `MouseOptions`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "down(options?: "
                },
                {
                  "kind": "Reference",
                  "text": "MouseOptions",
                  "canonicalReference": "@opennebula/puppeteer!MouseOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "down"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Mouse#drag:member(1)",
              "docComment": "/**\n * Dispatches a `drag` event.\n *\n * @param start - starting point for drag\n *\n * @param target - point to drag to\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "drag(start: "
                },
                {
                  "kind": "Reference",
                  "text": "Point",
                  "canonicalReference": "@opennebula/puppeteer!Point:interface"
                },
                {
                  "kind": "Content",
                  "text": ", target: "
                },
                {
                  "kind": "Reference",
                  "text": "Point",
                  "canonicalReference": "@opennebula/puppeteer!Point:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Protocol.Input.DragData",
                  "canonicalReference": "devtools-protocol!Protocol.Input.DragData:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "start",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "target",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "drag"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Mouse#dragAndDrop:member(1)",
              "docComment": "/**\n * Performs a drag, dragenter, dragover, and drop in sequence.\n *\n * @param target - point to drag from\n *\n * @param target - point to drop on\n *\n * @param options - An object of options. Accepts delay which, if specified, is the time to wait between `dragover` and `drop` in milliseconds. Defaults to 0.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dragAndDrop(start: "
                },
                {
                  "kind": "Reference",
                  "text": "Point",
                  "canonicalReference": "@opennebula/puppeteer!Point:interface"
                },
                {
                  "kind": "Content",
                  "text": ", target: "
                },
                {
                  "kind": "Reference",
                  "text": "Point",
                  "canonicalReference": "@opennebula/puppeteer!Point:interface"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        delay?: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "start",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "target",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "dragAndDrop"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Mouse#dragEnter:member(1)",
              "docComment": "/**\n * Dispatches a `dragenter` event.\n *\n * @param target - point for emitting `dragenter` event\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dragEnter(target: "
                },
                {
                  "kind": "Reference",
                  "text": "Point",
                  "canonicalReference": "@opennebula/puppeteer!Point:interface"
                },
                {
                  "kind": "Content",
                  "text": ", data: "
                },
                {
                  "kind": "Reference",
                  "text": "Protocol.Input.DragData",
                  "canonicalReference": "devtools-protocol!Protocol.Input.DragData:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "target",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "dragEnter"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Mouse#dragOver:member(1)",
              "docComment": "/**\n * Dispatches a `dragover` event.\n *\n * @param target - point for emitting `dragover` event\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dragOver(target: "
                },
                {
                  "kind": "Reference",
                  "text": "Point",
                  "canonicalReference": "@opennebula/puppeteer!Point:interface"
                },
                {
                  "kind": "Content",
                  "text": ", data: "
                },
                {
                  "kind": "Reference",
                  "text": "Protocol.Input.DragData",
                  "canonicalReference": "devtools-protocol!Protocol.Input.DragData:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "target",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "dragOver"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Mouse#drop:member(1)",
              "docComment": "/**\n * Performs a dragenter, dragover, and drop in sequence.\n *\n * @param target - point to drop on\n *\n * @param data - drag data containing items and operations mask\n *\n * @param options - An object of options. Accepts delay which, if specified, is the time to wait between `dragover` and `drop` in milliseconds. Defaults to 0.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "drop(target: "
                },
                {
                  "kind": "Reference",
                  "text": "Point",
                  "canonicalReference": "@opennebula/puppeteer!Point:interface"
                },
                {
                  "kind": "Content",
                  "text": ", data: "
                },
                {
                  "kind": "Reference",
                  "text": "Protocol.Input.DragData",
                  "canonicalReference": "devtools-protocol!Protocol.Input.DragData:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "target",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "drop"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Mouse#move:member(1)",
              "docComment": "/**\n * Dispatches a `mousemove` event.\n *\n * @param x - Horizontal position of the mouse.\n *\n * @param y - Vertical position of the mouse.\n *\n * @param options - Optional object. If specified, the `steps` property sends intermediate `mousemove` events when set to `1` (default).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "move(x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        steps?: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "move"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Mouse#up:member(1)",
              "docComment": "/**\n * Dispatches a `mouseup` event.\n *\n * @param options - Optional `MouseOptions`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "up(options?: "
                },
                {
                  "kind": "Reference",
                  "text": "MouseOptions",
                  "canonicalReference": "@opennebula/puppeteer!MouseOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "up"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Mouse#wheel:member(1)",
              "docComment": "/**\n * Dispatches a `mousewheel` event.\n *\n * @param options - Optional: `MouseWheelOptions`.\n *\n * @example\n *\n * An example of zooming into an element:\n * ```js\n * await page.goto('https://mdn.mozillademos.org/en-US/docs/Web/API/Element/wheel_event$samples/Scaling_an_element_via_the_wheel?revision=1587366');\n *\n * const elem = await page.$('div');\n * const boundingBox = await elem.boundingBox();\n * await page.mouse.move(\n *   boundingBox.x + boundingBox.width / 2,\n *   boundingBox.y + boundingBox.height / 2\n * );\n *\n * await page.mouse.wheel({ deltaY: -100 })\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "wheel(options?: "
                },
                {
                  "kind": "Reference",
                  "text": "MouseWheelOptions",
                  "canonicalReference": "@opennebula/puppeteer!MouseWheelOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "wheel"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@opennebula/puppeteer!MouseButton:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type MouseButton = "
            },
            {
              "kind": "Content",
              "text": "'left' | 'right' | 'middle'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "MouseButton",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@opennebula/puppeteer!MouseOptions:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface MouseOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "MouseOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!MouseOptions#button:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "button?: "
                },
                {
                  "kind": "Reference",
                  "text": "MouseButton",
                  "canonicalReference": "@opennebula/puppeteer!MouseButton:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "button",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!MouseOptions#clickCount:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clickCount?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "clickCount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@opennebula/puppeteer!MouseWheelOptions:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface MouseWheelOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "MouseWheelOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!MouseWheelOptions#deltaX:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "deltaX?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "deltaX",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!MouseWheelOptions#deltaY:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "deltaY?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "deltaY",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@opennebula/puppeteer!NetworkConditions:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface NetworkConditions "
            }
          ],
          "releaseTag": "Public",
          "name": "NetworkConditions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!NetworkConditions#download:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "download: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "download",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!NetworkConditions#latency:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "latency: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "latency",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!NetworkConditions#upload:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "upload: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "upload",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@opennebula/puppeteer!networkConditions:var",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "networkConditions: "
            },
            {
              "kind": "Reference",
              "text": "PredefinedNetworkConditions",
              "canonicalReference": "@opennebula/puppeteer!PredefinedNetworkConditions:type"
            }
          ],
          "releaseTag": "Public",
          "name": "networkConditions",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@opennebula/puppeteer!Page:class",
          "docComment": "/**\n * Page provides methods to interact with a single tab or {@link https://developer.chrome.com/extensions/background_pages | extension background page} in Chromium.\n *\n * @remarks\n *\n * One Browser instance might have multiple Page instances.\n *\n * The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the `Page` class.\n *\n * @example\n *\n * This example creates a page, navigates it to a URL, and then * saves a screenshot:\n * ```js\n * const puppeteer = require('puppeteer');\n *\n * (async () => {\n *   const browser = await puppeteer.launch();\n *   const page = await browser.newPage();\n *   await page.goto('https://example.com');\n *   await page.screenshot({path: 'screenshot.png'});\n *   await browser.close();\n * })();\n * ```\n *\n * The Page class extends from Puppeteer's {@link EventEmitter} class and will emit various events which are documented in the {@link PageEmittedEvents} enum.\n *\n * @example\n *\n * This example logs a message for a single page `load` event:\n * ```js\n * page.once('load', () => console.log('Page loaded!'));\n * ```\n *\n * To unsubscribe from events use the `off` method:\n * ```js\n * function logRequest(interceptedRequest) {\n *   console.log('A request was made:', interceptedRequest.url());\n * }\n * page.on('request', logRequest);\n * // Sometime later...\n * page.off('request', logRequest);\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Page extends "
            },
            {
              "kind": "Reference",
              "text": "EventEmitter",
              "canonicalReference": "@opennebula/puppeteer!EventEmitter:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "Page",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#$:member(1)",
              "docComment": "/**\n * Runs `document.querySelector` within the page. If no element matches the selector, the return value resolves to `null`.\n *\n * @remarks\n *\n * Shortcut for {@link Frame.$ | Page.mainFrame().$(selector)}.\n *\n * @param selector - A `selector` to query page for {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | selector} to query page for.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "$<T extends "
                },
                {
                  "kind": "Reference",
                  "text": "Element",
                  "canonicalReference": "!Element:interface"
                },
                {
                  "kind": "Content",
                  "text": " "
                },
                {
                  "kind": "Content",
                  "text": "= "
                },
                {
                  "kind": "Reference",
                  "text": "Element",
                  "canonicalReference": "!Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ">(selector: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ElementHandle",
                  "canonicalReference": "@opennebula/puppeteer!ElementHandle:class"
                },
                {
                  "kind": "Content",
                  "text": "<T> | null>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "selector",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "name": "$"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#$$:member(1)",
              "docComment": "/**\n * The method runs `document.querySelectorAll` within the page. If no elements match the selector, the return value resolves to `[]`.\n *\n * @remarks\n *\n * Shortcut for {@link Frame.$$ | Page.mainFrame().$$(selector)}.\n *\n * @param selector - A `selector` to query page for\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "$$<T extends "
                },
                {
                  "kind": "Reference",
                  "text": "Element",
                  "canonicalReference": "!Element:interface"
                },
                {
                  "kind": "Content",
                  "text": " "
                },
                {
                  "kind": "Content",
                  "text": "= "
                },
                {
                  "kind": "Reference",
                  "text": "Element",
                  "canonicalReference": "!Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ">(selector: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ElementHandle",
                  "canonicalReference": "@opennebula/puppeteer!ElementHandle:class"
                },
                {
                  "kind": "Content",
                  "text": "<T>>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 14
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "selector",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "name": "$$"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#$$eval:member(1)",
              "docComment": "/**\n * This method runs `Array.from(document.querySelectorAll(selector))` within the page and passes the result as the first argument to the `pageFunction`.\n *\n * @remarks\n *\n * If `pageFunction` returns a promise `$$eval` will wait for the promise to resolve and then return its value.\n *\n * @param selector - the {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | selector} to query for\n *\n * @param pageFunction - the function to be evaluated in the page context. Will be passed the result of `Array.from(document.querySelectorAll(selector))` as its first argument.\n *\n * @param args - any additional arguments to pass through to `pageFunction`.\n *\n * @returns The result of calling `pageFunction`. If it returns an element it is wrapped in an {@link ElementHandle}, else the raw value itself is returned.\n *\n * @example\n * ```\n * // get the amount of divs on the page\n * const divCount = await page.$$eval('div', divs => divs.length);\n *\n * // get the text content of all the `.options` elements:\n * const options = await page.$$eval('div > span.options', options => {\n *   return options.map(option => option.textContent)\n * });\n * ```\n *\n * If you are using TypeScript, you may have to provide an explicit type to the first argument of the `pageFunction`. By default it is typed as `Element[]`, but you may need to provide a more specific sub-type:\n *\n * @example\n * ```\n * // if you don't provide HTMLInputElement here, TS will error\n * // as `value` is not on `Element`\n * await page.$$eval('input', (elements: HTMLInputElement[]) => {\n *   return elements.map(e => e.value);\n * });\n * ```\n *\n * The compiler should be able to infer the return type from the `pageFunction` you provide. If it is unable to, you can use the generic type to tell the compiler what return type you expect from `$$eval`:\n *\n * @example\n * ```\n * // The compiler can infer the return type in this case, but if it can't\n * // or if you want to be more explicit, provide it as the generic type.\n * const allInputValues = await page.$$eval<string[]>(\n *  'input', (elements: HTMLInputElement[]) => elements.map(e => e.textContent)\n * );\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "$$eval<ReturnType>(selector: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", pageFunction: "
                },
                {
                  "kind": "Content",
                  "text": "(elements: "
                },
                {
                  "kind": "Reference",
                  "text": "Element",
                  "canonicalReference": "!Element:interface"
                },
                {
                  "kind": "Content",
                  "text": "[], ...args: unknown[]) => ReturnType | "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<ReturnType>"
                },
                {
                  "kind": "Content",
                  "text": ", ...args: "
                },
                {
                  "kind": "Reference",
                  "text": "SerializableOrJSHandle",
                  "canonicalReference": "@opennebula/puppeteer!SerializableOrJSHandle:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "WrapElementHandle",
                  "canonicalReference": "@opennebula/puppeteer!WrapElementHandle:type"
                },
                {
                  "kind": "Content",
                  "text": "<ReturnType>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 12,
                "endIndex": 16
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "selector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "pageFunction",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 8
                  }
                },
                {
                  "parameterName": "args",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 11
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "ReturnType",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "$$eval"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#$eval:member(1)",
              "docComment": "/**\n * This method runs `document.querySelector` within the page and passes the result as the first argument to the `pageFunction`.\n *\n * @remarks\n *\n * If no element is found matching `selector`, the method will throw an error.\n *\n * If `pageFunction` returns a promise `$eval` will wait for the promise to resolve and then return its value.\n *\n * @param selector - the {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | selector} to query for\n *\n * @param pageFunction - the function to be evaluated in the page context. Will be passed the result of `document.querySelector(selector)` as its first argument.\n *\n * @param args - any additional arguments to pass through to `pageFunction`.\n *\n * @returns The result of calling `pageFunction`. If it returns an element it is wrapped in an {@link ElementHandle}, else the raw value itself is returned.\n *\n * @example\n * ```\n * const searchValue = await page.$eval('#search', el => el.value);\n * const preloadHref = await page.$eval('link[rel=preload]', el => el.href);\n * const html = await page.$eval('.main-container', el => el.outerHTML);\n * ```\n *\n * If you are using TypeScript, you may have to provide an explicit type to the first argument of the `pageFunction`. By default it is typed as `Element`, but you may need to provide a more specific sub-type:\n *\n * @example\n * ```\n * // if you don't provide HTMLInputElement here, TS will error\n * // as `value` is not on `Element`\n * const searchValue = await page.$eval('#search', (el: HTMLInputElement) => el.value);\n * ```\n *\n * The compiler should be able to infer the return type from the `pageFunction` you provide. If it is unable to, you can use the generic type to tell the compiler what return type you expect from `$eval`:\n *\n * @example\n * ```\n * // The compiler can infer the return type in this case, but if it can't\n * // or if you want to be more explicit, provide it as the generic type.\n * const searchValue = await page.$eval<string>(\n *  '#search', (el: HTMLInputElement) => el.value\n * );\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "$eval<ReturnType>(selector: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", pageFunction: "
                },
                {
                  "kind": "Content",
                  "text": "(element: "
                },
                {
                  "kind": "Reference",
                  "text": "Element",
                  "canonicalReference": "!Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ", ...args: unknown[]) => ReturnType | "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<ReturnType>"
                },
                {
                  "kind": "Content",
                  "text": ", ...args: "
                },
                {
                  "kind": "Reference",
                  "text": "SerializableOrJSHandle",
                  "canonicalReference": "@opennebula/puppeteer!SerializableOrJSHandle:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "WrapElementHandle",
                  "canonicalReference": "@opennebula/puppeteer!WrapElementHandle:type"
                },
                {
                  "kind": "Content",
                  "text": "<ReturnType>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 12,
                "endIndex": 16
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "selector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "pageFunction",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 8
                  }
                },
                {
                  "parameterName": "args",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 11
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "ReturnType",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "$eval"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#$x:member(1)",
              "docComment": "/**\n * The method evaluates the XPath expression relative to the page document as its context node. If there are no such elements, the method resolves to an empty array.\n *\n * @remarks\n *\n * Shortcut for {@link Frame.$x | Page.mainFrame().$x(expression)}.\n *\n * @param expression - Expression to evaluate\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "$x(expression: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ElementHandle",
                  "canonicalReference": "@opennebula/puppeteer!ElementHandle:class"
                },
                {
                  "kind": "Content",
                  "text": "[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "expression",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "$x"
            },
            {
              "kind": "Property",
              "canonicalReference": "@opennebula/puppeteer!Page#accessibility:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get accessibility(): "
                },
                {
                  "kind": "Reference",
                  "text": "Accessibility",
                  "canonicalReference": "@opennebula/puppeteer!Accessibility:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "accessibility",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#addScriptTag:member(1)",
              "docComment": "/**\n * Adds a `<script>` tag into the page with the desired URL or content.\n *\n * @remarks\n *\n * Shortcut for {@link Frame.addScriptTag | page.mainFrame().addScriptTag(options)}.\n *\n * @returns Promise which resolves to the added tag when the script's onload fires or when the script content was injected into frame.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addScriptTag(options: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        url?: string;\n        path?: string;\n        content?: string;\n        type?: string;\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ElementHandle",
                  "canonicalReference": "@opennebula/puppeteer!ElementHandle:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "addScriptTag"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#addStyleTag:member(1)",
              "docComment": "/**\n * Adds a `<link rel=\"stylesheet\">` tag into the page with the desired URL or a `<style type=\"text/css\">` tag with the content.\n *\n * @returns Promise which resolves to the added tag when the stylesheet's onload fires or when the CSS content was injected into frame.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addStyleTag(options: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        url?: string;\n        path?: string;\n        content?: string;\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ElementHandle",
                  "canonicalReference": "@opennebula/puppeteer!ElementHandle:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "addStyleTag"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#authenticate:member(1)",
              "docComment": "/**\n * Provide credentials for `HTTP authentication`.\n *\n * @remarks\n *\n * To disable authentication, pass `null`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "authenticate(credentials: "
                },
                {
                  "kind": "Reference",
                  "text": "Credentials",
                  "canonicalReference": "@opennebula/puppeteer!Credentials:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "credentials",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "authenticate"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#bringToFront:member(1)",
              "docComment": "/**\n * Brings page to front (activates tab).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "bringToFront(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "bringToFront"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#browser:member(1)",
              "docComment": "/**\n * Get the browser the page belongs to.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "browser(): "
                },
                {
                  "kind": "Reference",
                  "text": "Browser",
                  "canonicalReference": "@opennebula/puppeteer!Browser:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "browser"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#browserContext:member(1)",
              "docComment": "/**\n * Get the browser context that the page belongs to.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "browserContext(): "
                },
                {
                  "kind": "Reference",
                  "text": "BrowserContext",
                  "canonicalReference": "@opennebula/puppeteer!BrowserContext:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "browserContext"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#click:member(1)",
              "docComment": "/**\n * This method fetches an element with `selector`, scrolls it into view if needed, and then uses {@link Page.mouse} to click in the center of the element. If there's no element matching `selector`, the method throws an error.\n *\n * @remarks\n *\n * Bear in mind that if `click()` triggers a navigation event and there's a separate `page.waitForNavigation()` promise to be resolved, you may end up with a race condition that yields unexpected results. The correct pattern for click and wait for navigation is the following:\n * ```js\n * const [response] = await Promise.all([\n * page.waitForNavigation(waitOptions),\n * page.click(selector, clickOptions),\n * ]);\n * ```\n *\n * Shortcut for {@link Frame.click | page.mainFrame().click(selector[, options])}.\n *\n * @param selector - A `selector` to search for element to click. If there are multiple elements satisfying the `selector`, the first will be clicked\n *\n * @param options - `Object`\n *\n * @returns Promise which resolves when the element matching `selector` is successfully clicked. The Promise will be rejected if there is no element matching `selector`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "click(selector: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        delay?: number;\n        button?: "
                },
                {
                  "kind": "Reference",
                  "text": "MouseButton",
                  "canonicalReference": "@opennebula/puppeteer!MouseButton:type"
                },
                {
                  "kind": "Content",
                  "text": ";\n        clickCount?: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "selector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 6
                  }
                }
              ],
              "name": "click"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#close:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "close(options?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        runBeforeUnload?: boolean;\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "close"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#content:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "content(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "content"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#cookies:member(1)",
              "docComment": "/**\n * If no URLs are specified, this method returns cookies for the current page URL. If URLs are specified, only cookies for those URLs are returned.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cookies(...urls: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Protocol.Network.Cookie",
                  "canonicalReference": "devtools-protocol!Protocol.Network.Cookie:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "urls",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "cookies"
            },
            {
              "kind": "Property",
              "canonicalReference": "@opennebula/puppeteer!Page#coverage:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get coverage(): "
                },
                {
                  "kind": "Reference",
                  "text": "Coverage",
                  "canonicalReference": "@opennebula/puppeteer!Coverage:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "coverage",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#createPDFStream:member(1)",
              "docComment": "/**\n * Generatees a PDF of the page with the `print` CSS media type.\n *\n * @remarks\n *\n * NOTE: PDF generation is only supported in Chrome headless mode.\n *\n * To generate a PDF with the `screen` media type, call {@link Page.emulateMediaType | `page.emulateMediaType('screen')`} before calling `page.pdf()`.\n *\n * By default, `page.pdf()` generates a pdf with modified colors for printing. Use the {@link https://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-print-color-adjust | `-webkit-print-color-adjust`} property to force rendering of exact colors.\n *\n * @param options - options for generating the PDF.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createPDFStream(options?: "
                },
                {
                  "kind": "Reference",
                  "text": "PDFOptions",
                  "canonicalReference": "@opennebula/puppeteer!PDFOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Readable",
                  "canonicalReference": "!internal.Readable:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "createPDFStream"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#deleteCookie:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "deleteCookie(...cookies: "
                },
                {
                  "kind": "Reference",
                  "text": "Protocol.Network.DeleteCookiesRequest",
                  "canonicalReference": "devtools-protocol!Protocol.Network.DeleteCookiesRequest:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "cookies",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "deleteCookie"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#emulate:member(1)",
              "docComment": "/**\n * Emulates given device metrics and user agent. This method is a shortcut for calling two methods: {@link Page.setUserAgent} and {@link Page.setViewport} To aid emulation, Puppeteer provides a list of device descriptors that can be obtained via the {@link Puppeteer.devices} `page.emulate` will resize the page. A lot of websites don't expect phones to change size, so you should emulate before navigating to the page.\n *\n * @remarks\n *\n * List of all available devices is available in the source code: {@link https://github.com/puppeteer/puppeteer/blob/main/src/common/DeviceDescriptors.ts | src/common/DeviceDescriptors.ts}.\n *\n * @example\n * ```js\n * const puppeteer = require('puppeteer');\n * const iPhone = puppeteer.devices['iPhone 6'];\n * (async () => {\n * const browser = await puppeteer.launch();\n * const page = await browser.newPage();\n * await page.emulate(iPhone);\n * await page.goto('https://www.google.com');\n * // other actions...\n * await browser.close();\n * })();\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "emulate(options: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        viewport: "
                },
                {
                  "kind": "Reference",
                  "text": "Viewport",
                  "canonicalReference": "@opennebula/puppeteer!Viewport:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n        userAgent: string;\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  }
                }
              ],
              "name": "emulate"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#emulateCPUThrottling:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "emulateCPUThrottling(factor: "
                },
                {
                  "kind": "Content",
                  "text": "number | null"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "factor",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "emulateCPUThrottling"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#emulateIdleState:member(1)",
              "docComment": "/**\n * Emulates the idle state. If no arguments set, clears idle state emulation.\n *\n * @param overrides - Mock idle state. If not set, clears idle overrides\n *\n * @example\n * ```js\n * // set idle emulation\n * await page.emulateIdleState({isUserActive: true, isScreenUnlocked: false});\n *\n * // do some checks here\n * ...\n *\n * // clear idle emulation\n * await page.emulateIdleState();\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "emulateIdleState(overrides?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        isUserActive: boolean;\n        isScreenUnlocked: boolean;\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "overrides",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "emulateIdleState"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#emulateMediaFeatures:member(1)",
              "docComment": "/**\n * @param features - `<?Array<Object>>` Given an array of media feature objects, emulates CSS media features on the page. Each media feature object must have the following properties:\n *\n * @example\n * ```js\n * await page.emulateMediaFeatures([\n * { name: 'prefers-color-scheme', value: 'dark' },\n * ]);\n * await page.evaluate(() => matchMedia('(prefers-color-scheme: dark)').matches);\n * // → true\n * await page.evaluate(() => matchMedia('(prefers-color-scheme: light)').matches);\n * // → false\n *\n * await page.emulateMediaFeatures([\n * { name: 'prefers-reduced-motion', value: 'reduce' },\n * ]);\n * await page.evaluate(\n * () => matchMedia('(prefers-reduced-motion: reduce)').matches\n * );\n * // → true\n * await page.evaluate(\n * () => matchMedia('(prefers-reduced-motion: no-preference)').matches\n * );\n * // → false\n *\n * await page.emulateMediaFeatures([\n * { name: 'prefers-color-scheme', value: 'dark' },\n * { name: 'prefers-reduced-motion', value: 'reduce' },\n * ]);\n * await page.evaluate(() => matchMedia('(prefers-color-scheme: dark)').matches);\n * // → true\n * await page.evaluate(() => matchMedia('(prefers-color-scheme: light)').matches);\n * // → false\n * await page.evaluate(\n * () => matchMedia('(prefers-reduced-motion: reduce)').matches\n * );\n * // → true\n * await page.evaluate(\n * () => matchMedia('(prefers-reduced-motion: no-preference)').matches\n * );\n * // → false\n *\n * await page.emulateMediaFeatures([{ name: 'color-gamut', value: 'p3' }]);\n * await page.evaluate(() => matchMedia('(color-gamut: srgb)').matches);\n * // → true\n * await page.evaluate(() => matchMedia('(color-gamut: p3)').matches);\n * // → true\n * await page.evaluate(() => matchMedia('(color-gamut: rec2020)').matches);\n * // → false\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "emulateMediaFeatures(features?: "
                },
                {
                  "kind": "Reference",
                  "text": "MediaFeature",
                  "canonicalReference": "@opennebula/puppeteer!MediaFeature:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "features",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "emulateMediaFeatures"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#emulateMediaType:member(1)",
              "docComment": "/**\n * @param type - Changes the CSS media type of the page. The only allowed values are `screen`, `print` and `null`. Passing `null` disables CSS media emulation.\n *\n * @example\n * ```\n * await page.evaluate(() => matchMedia('screen').matches);\n * // → true\n * await page.evaluate(() => matchMedia('print').matches);\n * // → false\n *\n * await page.emulateMediaType('print');\n * await page.evaluate(() => matchMedia('screen').matches);\n * // → false\n * await page.evaluate(() => matchMedia('print').matches);\n * // → true\n *\n * await page.emulateMediaType(null);\n * await page.evaluate(() => matchMedia('screen').matches);\n * // → true\n * await page.evaluate(() => matchMedia('print').matches);\n * // → false\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "emulateMediaType(type?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "type",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "emulateMediaType"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#emulateNetworkConditions:member(1)",
              "docComment": "/**\n * @remarks\n *\n * NOTE: This does not affect WebSockets and WebRTC PeerConnections (see https://crbug.com/563644). To set the page offline, you can use [page.setOfflineMode(enabled)](#pagesetofflinemodeenabled).\n *\n * @param networkConditions - Passing `null` disables network condition emulation.\n *\n * @example\n * ```js\n * const puppeteer = require('puppeteer');\n * const slow3G = puppeteer.networkConditions['Slow 3G'];\n *\n * (async () => {\n * const browser = await puppeteer.launch();\n * const page = await browser.newPage();\n * await page.emulateNetworkConditions(slow3G);\n * await page.goto('https://www.google.com');\n * // other actions...\n * await browser.close();\n * })();\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "emulateNetworkConditions(networkConditions: "
                },
                {
                  "kind": "Reference",
                  "text": "NetworkConditions",
                  "canonicalReference": "@opennebula/puppeteer!NetworkConditions:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "networkConditions",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "emulateNetworkConditions"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#emulateTimezone:member(1)",
              "docComment": "/**\n * @param timezoneId - Changes the timezone of the page. See {@link https://source.chromium.org/chromium/chromium/deps/icu.git/+/faee8bc70570192d82d2978a71e2a615788597d1:source/data/misc/metaZones.txt | ICU’s metaZones.txt} for a list of supported timezone IDs. Passing `null` disables timezone emulation.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "emulateTimezone(timezoneId?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "timezoneId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "emulateTimezone"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#emulateVisionDeficiency:member(1)",
              "docComment": "/**\n * Simulates the given vision deficiency on the page.\n *\n * @param type - the type of deficiency to simulate, or `'none'` to reset.\n *\n * @example\n * ```js\n * const puppeteer = require('puppeteer');\n *\n * (async () => {\n *   const browser = await puppeteer.launch();\n *   const page = await browser.newPage();\n *   await page.goto('https://v8.dev/blog/10-years');\n *\n *   await page.emulateVisionDeficiency('achromatopsia');\n *   await page.screenshot({ path: 'achromatopsia.png' });\n *\n *   await page.emulateVisionDeficiency('deuteranopia');\n *   await page.screenshot({ path: 'deuteranopia.png' });\n *\n *   await page.emulateVisionDeficiency('blurredVision');\n *   await page.screenshot({ path: 'blurred-vision.png' });\n *\n *   await browser.close();\n * })();\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "emulateVisionDeficiency(type?: "
                },
                {
                  "kind": "Reference",
                  "text": "Protocol.Emulation.SetEmulatedVisionDeficiencyRequest",
                  "canonicalReference": "devtools-protocol!Protocol.Emulation.SetEmulatedVisionDeficiencyRequest:interface"
                },
                {
                  "kind": "Content",
                  "text": "['type']"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "type",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "emulateVisionDeficiency"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#evaluate:member(1)",
              "docComment": "/**\n * @remarks\n *\n * Evaluates a function in the page's context and returns the result.\n *\n * If the function passed to `page.evaluteHandle` returns a Promise, the function will wait for the promise to resolve and return its value.\n *\n * @param pageFunction - a function that is run within the page\n *\n * @param args - arguments to be passed to the pageFunction\n *\n * @returns the return value of `pageFunction`.\n *\n * @example\n * ```js\n * const result = await frame.evaluate(() => {\n *   return Promise.resolve(8 * 7);\n * });\n * console.log(result); // prints \"56\"\n * ```\n *\n * You can pass a string instead of a function (although functions are recommended as they are easier to debug and use with TypeScript):\n *\n * @example\n * ```\n * const aHandle = await page.evaluate('1 + 2');\n * ```\n *\n * To get the best TypeScript experience, you should pass in as the generic the type of `pageFunction`:\n * ```\n * const aHandle = await page.evaluate<() => number>(() => 2);\n * ```\n *\n * @example\n *\n * {@link ElementHandle} instances (including {@link JSHandle}s) can be passed as arguments to the `pageFunction`:\n * ```\n * const bodyHandle = await page.$('body');\n * const html = await page.evaluate(body => body.innerHTML, bodyHandle);\n * await bodyHandle.dispose();\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "evaluate<T extends "
                },
                {
                  "kind": "Reference",
                  "text": "EvaluateFn",
                  "canonicalReference": "@opennebula/puppeteer!EvaluateFn:type"
                },
                {
                  "kind": "Content",
                  "text": ">(pageFunction: "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ", ...args: "
                },
                {
                  "kind": "Reference",
                  "text": "SerializableOrJSHandle",
                  "canonicalReference": "@opennebula/puppeteer!SerializableOrJSHandle:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UnwrapPromiseLike",
                  "canonicalReference": "@opennebula/puppeteer!UnwrapPromiseLike:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "EvaluateFnReturnType",
                  "canonicalReference": "@opennebula/puppeteer!EvaluateFnReturnType:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 14
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "pageFunction",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "args",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 7
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "evaluate"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#evaluateHandle:member(1)",
              "docComment": "/**\n * @remarks\n *\n * The only difference between {@link Page.evaluate | page.evaluate} and `page.evaluateHandle` is that `evaluateHandle` will return the value wrapped in an in-page object.\n *\n * If the function passed to `page.evaluteHandle` returns a Promise, the function will wait for the promise to resolve and return its value.\n *\n * You can pass a string instead of a function (although functions are recommended as they are easier to debug and use with TypeScript):\n *\n * @param pageFunction - a function that is run within the page\n *\n * @param args - arguments to be passed to the pageFunction\n *\n * @example\n * ```\n * const aHandle = await page.evaluateHandle('document')\n * ```\n *\n * @example\n *\n * {@link JSHandle} instances can be passed as arguments to the `pageFunction`:\n * ```\n * const aHandle = await page.evaluateHandle(() => document.body);\n * const resultHandle = await page.evaluateHandle(body => body.innerHTML, aHandle);\n * console.log(await resultHandle.jsonValue());\n * await resultHandle.dispose();\n * ```\n *\n * Most of the time this function returns a {@link JSHandle}, but if `pageFunction` returns a reference to an element, you instead get an {@link ElementHandle} back:\n *\n * @example\n * ```\n * const button = await page.evaluateHandle(() => document.querySelector('button'));\n * // can call `click` because `button` is an `ElementHandle`\n * await button.click();\n * ```\n *\n * The TypeScript definitions assume that `evaluateHandle` returns a `JSHandle`, but if you know it's going to return an `ElementHandle`, pass it as the generic argument:\n * ```\n * const button = await page.evaluateHandle<ElementHandle>(...);\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "evaluateHandle<HandlerType extends "
                },
                {
                  "kind": "Reference",
                  "text": "JSHandle",
                  "canonicalReference": "@opennebula/puppeteer!JSHandle:class"
                },
                {
                  "kind": "Content",
                  "text": " "
                },
                {
                  "kind": "Content",
                  "text": "= "
                },
                {
                  "kind": "Reference",
                  "text": "JSHandle",
                  "canonicalReference": "@opennebula/puppeteer!JSHandle:class"
                },
                {
                  "kind": "Content",
                  "text": ">(pageFunction: "
                },
                {
                  "kind": "Reference",
                  "text": "EvaluateHandleFn",
                  "canonicalReference": "@opennebula/puppeteer!EvaluateHandleFn:type"
                },
                {
                  "kind": "Content",
                  "text": ", ...args: "
                },
                {
                  "kind": "Reference",
                  "text": "SerializableOrJSHandle",
                  "canonicalReference": "@opennebula/puppeteer!SerializableOrJSHandle:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<HandlerType>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "pageFunction",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  }
                },
                {
                  "parameterName": "args",
                  "parameterTypeTokenRange": {
                    "startIndex": 8,
                    "endIndex": 10
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "HandlerType",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "name": "evaluateHandle"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#evaluateOnNewDocument:member(1)",
              "docComment": "/**\n * Adds a function which would be invoked in one of the following scenarios:\n *\n * - whenever the page is navigated\n *\n * - whenever the child frame is attached or navigated. In this case, the function is invoked in the context of the newly attached frame.\n *\n * The function is invoked after the document was created but before any of its scripts were run. This is useful to amend the JavaScript environment, e.g. to seed `Math.random`.\n *\n * @param pageFunction - Function to be evaluated in browser context\n *\n * @param args - Arguments to pass to `pageFunction`\n *\n * @example\n *\n * An example of overriding the navigator.languages property before the page loads:\n * ```js\n * // preload.js\n *\n * // overwrite the `languages` property to use a custom getter\n * Object.defineProperty(navigator, 'languages', {\n * get: function () {\n * return ['en-US', 'en', 'bn'];\n * },\n * });\n *\n * // In your puppeteer script, assuming the preload.js file is\n * in same folder of our script\n * const preloadFile = fs.readFileSync('./preload.js', 'utf8');\n * await page.evaluateOnNewDocument(preloadFile);\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "evaluateOnNewDocument(pageFunction: "
                },
                {
                  "kind": "Reference",
                  "text": "Function",
                  "canonicalReference": "!Function:interface"
                },
                {
                  "kind": "Content",
                  "text": " | string"
                },
                {
                  "kind": "Content",
                  "text": ", ...args: "
                },
                {
                  "kind": "Content",
                  "text": "unknown[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "pageFunction",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "args",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "name": "evaluateOnNewDocument"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#exposeFunction:member(1)",
              "docComment": "/**\n * The method adds a function called `name` on the page's `window` object. When called, the function executes `puppeteerFunction` in node.js and returns a `Promise` which resolves to the return value of `puppeteerFunction`.\n *\n * If the puppeteerFunction returns a `Promise`, it will be awaited.\n *\n * NOTE: Functions installed via `page.exposeFunction` survive navigations.\n *\n * @param name - Name of the function on the window object\n *\n * @param puppeteerFunction - Callback function which will be called in Puppeteer's context.\n *\n * @example\n *\n * An example of adding an `md5` function into the page:\n * ```js\n * const puppeteer = require('puppeteer');\n * const crypto = require('crypto');\n *\n * (async () => {\n * const browser = await puppeteer.launch();\n * const page = await browser.newPage();\n * page.on('console', (msg) => console.log(msg.text()));\n * await page.exposeFunction('md5', (text) =>\n * crypto.createHash('md5').update(text).digest('hex')\n * );\n * await page.evaluate(async () => {\n * // use window.md5 to compute hashes\n * const myString = 'PUPPETEER';\n * const myHash = await window.md5(myString);\n * console.log(`md5 of ${myString} is ${myHash}`);\n * });\n * await browser.close();\n * })();\n * ```\n *\n * An example of adding a `window.readfile` function into the page:\n * ```js\n * const puppeteer = require('puppeteer');\n * const fs = require('fs');\n *\n * (async () => {\n * const browser = await puppeteer.launch();\n * const page = await browser.newPage();\n * page.on('console', (msg) => console.log(msg.text()));\n * await page.exposeFunction('readfile', async (filePath) => {\n * return new Promise((resolve, reject) => {\n * fs.readFile(filePath, 'utf8', (err, text) => {\n *    if (err) reject(err);\n *    else resolve(text);\n *  });\n * });\n * });\n * await page.evaluate(async () => {\n * // use window.readfile to read contents of a file\n * const content = await window.readfile('/etc/hosts');\n * console.log(content);\n * });\n * await browser.close();\n * })();\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "exposeFunction(name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", puppeteerFunction: "
                },
                {
                  "kind": "Reference",
                  "text": "Function",
                  "canonicalReference": "!Function:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "puppeteerFunction",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "exposeFunction"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#focus:member(1)",
              "docComment": "/**\n * This method fetches an element with `selector` and focuses it. If there's no element matching `selector`, the method throws an error.\n *\n * @remarks\n *\n * Shortcut for {@link Frame.focus | page.mainFrame().focus(selector)}.\n *\n * @param selector - A {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | selector} of an element to focus. If there are multiple elements satisfying the selector, the first will be focused.\n *\n * @returns Promise which resolves when the element matching selector is successfully focused. The promise will be rejected if there is no element matching selector.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "focus(selector: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "selector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "focus"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#frames:member(1)",
              "docComment": "/**\n * @returns An array of all frames attached to the page.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "frames(): "
                },
                {
                  "kind": "Reference",
                  "text": "Frame",
                  "canonicalReference": "@opennebula/puppeteer!Frame:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "frames"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#goBack:member(1)",
              "docComment": "/**\n * This method navigate to the previous page in history.\n *\n * @remarks\n *\n * The argument `options` might have the following properties:\n *\n * - `timeout` : Maximum navigation time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the {@link Page.setDefaultNavigationTimeout | page.setDefaultNavigationTimeout(timeout)} or {@link Page.setDefaultTimeout | page.setDefaultTimeout(timeout)} methods.\n *\n * - `waitUntil` : When to consider navigation succeeded, defaults to `load`. Given an array of event strings, navigation is considered to be successful after all events have been fired. Events can be either:<br/> - `load` : consider navigation to be finished when the load event is fired.<br/> - `domcontentloaded` : consider navigation to be finished when the DOMContentLoaded event is fired.<br/> - `networkidle0` : consider navigation to be finished when there are no more than 0 network connections for at least `500` ms.<br/> - `networkidle2` : consider navigation to be finished when there are no more than 2 network connections for at least `500` ms.\n *\n * @param options - Navigation parameters\n *\n * @returns Promise which resolves to the main resource response. In case of multiple redirects, the navigation will resolve with the response of the last redirect. If can not go back, resolves to `null`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "goBack(options?: "
                },
                {
                  "kind": "Reference",
                  "text": "WaitForOptions",
                  "canonicalReference": "@opennebula/puppeteer!WaitForOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTTPResponse",
                  "canonicalReference": "@opennebula/puppeteer!HTTPResponse:class"
                },
                {
                  "kind": "Content",
                  "text": " | null>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "goBack"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#goForward:member(1)",
              "docComment": "/**\n * This method navigate to the next page in history.\n *\n * @remarks\n *\n * The argument `options` might have the following properties:\n *\n * - `timeout` : Maximum navigation time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the {@link Page.setDefaultNavigationTimeout | page.setDefaultNavigationTimeout(timeout)} or {@link Page.setDefaultTimeout | page.setDefaultTimeout(timeout)} methods.\n *\n * - `waitUntil`: When to consider navigation succeeded, defaults to `load`. Given an array of event strings, navigation is considered to be successful after all events have been fired. Events can be either:<br/> - `load` : consider navigation to be finished when the load event is fired.<br/> - `domcontentloaded` : consider navigation to be finished when the DOMContentLoaded event is fired.<br/> - `networkidle0` : consider navigation to be finished when there are no more than 0 network connections for at least `500` ms.<br/> - `networkidle2` : consider navigation to be finished when there are no more than 2 network connections for at least `500` ms.\n *\n * @param options - Navigation Parameter\n *\n * @returns Promise which resolves to the main resource response. In case of multiple redirects, the navigation will resolve with the response of the last redirect. If can not go forward, resolves to `null`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "goForward(options?: "
                },
                {
                  "kind": "Reference",
                  "text": "WaitForOptions",
                  "canonicalReference": "@opennebula/puppeteer!WaitForOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTTPResponse",
                  "canonicalReference": "@opennebula/puppeteer!HTTPResponse:class"
                },
                {
                  "kind": "Content",
                  "text": " | null>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "goForward"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#goto:member(1)",
              "docComment": "/**\n * @remarks\n *\n * The argument `options` might have the following properties:\n *\n * - `timeout` : Maximum navigation time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the {@link Page.setDefaultNavigationTimeout | page.setDefaultNavigationTimeout(timeout)} or {@link Page.setDefaultTimeout | page.setDefaultTimeout(timeout)} methods.\n *\n * - `waitUntil`:When to consider navigation succeeded, defaults to `load`. Given an array of event strings, navigation is considered to be successful after all events have been fired. Events can be either:<br/> - `load` : consider navigation to be finished when the load event is fired.<br/> - `domcontentloaded` : consider navigation to be finished when the DOMContentLoaded event is fired.<br/> - `networkidle0` : consider navigation to be finished when there are no more than 0 network connections for at least `500` ms.<br/> - `networkidle2` : consider navigation to be finished when there are no more than 2 network connections for at least `500` ms.\n *\n * - `referer` : Referer header value. If provided it will take preference over the referer header value set by {@link Page.setExtraHTTPHeaders | page.setExtraHTTPHeaders()}.\n *\n * `page.goto` will throw an error if: - there's an SSL error (e.g. in case of self-signed certificates). - target URL is invalid. - the timeout is exceeded during navigation. - the remote server does not respond or is unreachable. - the main resource failed to load.\n *\n * `page.goto` will not throw an error when any valid HTTP status code is returned by the remote server, including 404 \"Not Found\" and 500 \"Internal Server Error\". The status code for such responses can be retrieved by calling response.status().\n *\n * NOTE: `page.goto` either throws an error or returns a main resource response. The only exceptions are navigation to about:blank or navigation to the same URL with a different hash, which would succeed and return null.\n *\n * NOTE: Headless mode doesn't support navigation to a PDF document. See the {@link https://bugs.chromium.org/p/chromium/issues/detail?id=761295 | upstream issue}.\n *\n * Shortcut for {@link Frame.goto | page.mainFrame().goto(url, options)}.\n *\n * @param url - URL to navigate page to. The URL should include scheme, e.g. `https://`\n *\n * @param options - Navigation Parameter\n *\n * @returns Promise which resolves to the main resource response. In case of multiple redirects, the navigation will resolve with the response of the last redirect.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "goto(url: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "WaitForOptions",
                  "canonicalReference": "@opennebula/puppeteer!WaitForOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": " & {\n        referer?: string;\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTTPResponse",
                  "canonicalReference": "@opennebula/puppeteer!HTTPResponse:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "url",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  }
                }
              ],
              "name": "goto"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#hover:member(1)",
              "docComment": "/**\n * This method fetches an element with `selector`, scrolls it into view if needed, and then uses {@link Page.mouse} to hover over the center of the element. If there's no element matching `selector`, the method throws an error.\n *\n * @remarks\n *\n * Shortcut for {@link Page.hover | page.mainFrame().hover(selector)}.\n *\n * @param selector - A {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | selector} to search for element to hover. If there are multiple elements satisfying the selector, the first will be hovered.\n *\n * @returns Promise which resolves when the element matching `selector` is successfully hovered. Promise gets rejected if there's no element matching `selector`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hover(selector: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "selector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "hover"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#isClosed:member(1)",
              "docComment": "/**\n * Indicates that the page has been closed.\n *\n * @returns \n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isClosed(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "isClosed"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#isDragInterceptionEnabled:member(1)",
              "docComment": "/**\n * @returns `true` if drag events are being intercepted, `false` otherwise.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isDragInterceptionEnabled(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "isDragInterceptionEnabled"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#isJavaScriptEnabled:member(1)",
              "docComment": "/**\n * @returns `true` if the page has JavaScript enabled, `false` otherwise.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isJavaScriptEnabled(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "isJavaScriptEnabled"
            },
            {
              "kind": "Property",
              "canonicalReference": "@opennebula/puppeteer!Page#keyboard:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get keyboard(): "
                },
                {
                  "kind": "Reference",
                  "text": "Keyboard",
                  "canonicalReference": "@opennebula/puppeteer!Keyboard:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "keyboard",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#mainFrame:member(1)",
              "docComment": "/**\n * @remarks\n *\n * Page is guaranteed to have a main frame which persists during navigations.\n *\n * @returns The page's main frame.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "mainFrame(): "
                },
                {
                  "kind": "Reference",
                  "text": "Frame",
                  "canonicalReference": "@opennebula/puppeteer!Frame:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "mainFrame"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#metrics:member(1)",
              "docComment": "/**\n * @remarks\n *\n * NOTE: All timestamps are in monotonic time: monotonically increasing time in seconds since an arbitrary point in the past.\n *\n * @returns Object containing metrics as key/value pairs.\n *\n * - `Timestamp` : The timestamp when the metrics sample was taken.\n *\n * - `Documents` : Number of documents in the page.\n *\n * - `Frames` : Number of frames in the page.\n *\n * - `JSEventListeners` : Number of events in the page.\n *\n * - `Nodes` : Number of DOM nodes in the page.\n *\n * - `LayoutCount` : Total number of full or partial page layout.\n *\n * - `RecalcStyleCount` : Total number of page style recalculations.\n *\n * - `LayoutDuration` : Combined durations of all page layouts.\n *\n * - `RecalcStyleDuration` : Combined duration of all page style recalculations.\n *\n * - `ScriptDuration` : Combined duration of JavaScript execution.\n *\n * - `TaskDuration` : Combined duration of all tasks performed by the browser.\n *\n * - `JSHeapUsedSize` : Used JavaScript heap size.\n *\n * - `JSHeapTotalSize` : Total JavaScript heap size.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "metrics(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Metrics",
                  "canonicalReference": "@opennebula/puppeteer!Metrics:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "metrics"
            },
            {
              "kind": "Property",
              "canonicalReference": "@opennebula/puppeteer!Page#mouse:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get mouse(): "
                },
                {
                  "kind": "Reference",
                  "text": "Mouse",
                  "canonicalReference": "@opennebula/puppeteer!Mouse:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "mouse",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#on:member(1)",
              "docComment": "/**\n * Listen to page events.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on<K extends "
                },
                {
                  "kind": "Content",
                  "text": "keyof "
                },
                {
                  "kind": "Reference",
                  "text": "PageEventObject",
                  "canonicalReference": "@opennebula/puppeteer!PageEventObject:interface"
                },
                {
                  "kind": "Content",
                  "text": ">(eventName: "
                },
                {
                  "kind": "Content",
                  "text": "K"
                },
                {
                  "kind": "Content",
                  "text": ", handler: "
                },
                {
                  "kind": "Content",
                  "text": "(event: "
                },
                {
                  "kind": "Reference",
                  "text": "PageEventObject",
                  "canonicalReference": "@opennebula/puppeteer!PageEventObject:interface"
                },
                {
                  "kind": "Content",
                  "text": "[K]) => void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "EventEmitter",
                  "canonicalReference": "@opennebula/puppeteer!EventEmitter:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "eventName",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "handler",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 9
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "K",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "on"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#once:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "once<K extends "
                },
                {
                  "kind": "Content",
                  "text": "keyof "
                },
                {
                  "kind": "Reference",
                  "text": "PageEventObject",
                  "canonicalReference": "@opennebula/puppeteer!PageEventObject:interface"
                },
                {
                  "kind": "Content",
                  "text": ">(eventName: "
                },
                {
                  "kind": "Content",
                  "text": "K"
                },
                {
                  "kind": "Content",
                  "text": ", handler: "
                },
                {
                  "kind": "Content",
                  "text": "(event: "
                },
                {
                  "kind": "Reference",
                  "text": "PageEventObject",
                  "canonicalReference": "@opennebula/puppeteer!PageEventObject:interface"
                },
                {
                  "kind": "Content",
                  "text": "[K]) => void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "EventEmitter",
                  "canonicalReference": "@opennebula/puppeteer!EventEmitter:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "eventName",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "handler",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 9
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "K",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "once"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#pdf:member(1)",
              "docComment": "/**\n * @param options - \n *\n * @returns \n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pdf(options?: "
                },
                {
                  "kind": "Reference",
                  "text": "PDFOptions",
                  "canonicalReference": "@opennebula/puppeteer!PDFOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Buffer",
                  "canonicalReference": "!Buffer:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "pdf"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#queryObjects:member(1)",
              "docComment": "/**\n * This method iterates the JavaScript heap and finds all objects with the given prototype.\n *\n * @remarks\n *\n * Shortcut for {@link ExecutionContext.queryObjects | page.mainFrame().executionContext().queryObjects(prototypeHandle)}.\n *\n * @param prototypeHandle - a handle to the object prototype.\n *\n * @returns Promise which resolves to a handle to an array of objects with this prototype.\n *\n * @example\n * ```js\n * // Create a Map object\n * await page.evaluate(() => window.map = new Map());\n * // Get a handle to the Map object prototype\n * const mapPrototype = await page.evaluateHandle(() => Map.prototype);\n * // Query all map instances into an array\n * const mapInstances = await page.queryObjects(mapPrototype);\n * // Count amount of map objects in heap\n * const count = await page.evaluate(maps => maps.length, mapInstances);\n * await mapInstances.dispose();\n * await mapPrototype.dispose();\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "queryObjects(prototypeHandle: "
                },
                {
                  "kind": "Reference",
                  "text": "JSHandle",
                  "canonicalReference": "@opennebula/puppeteer!JSHandle:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "JSHandle",
                  "canonicalReference": "@opennebula/puppeteer!JSHandle:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "prototypeHandle",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "queryObjects"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#reload:member(1)",
              "docComment": "/**\n * @remarks\n *\n * The argument `options` might have the following properties:\n *\n * - `timeout` : Maximum navigation time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the {@link Page.setDefaultNavigationTimeout | page.setDefaultNavigationTimeout(timeout)} or {@link Page.setDefaultTimeout | page.setDefaultTimeout(timeout)} methods.\n *\n * - `waitUntil`: When to consider navigation succeeded, defaults to `load`. Given an array of event strings, navigation is considered to be successful after all events have been fired. Events can be either:<br/> - `load` : consider navigation to be finished when the load event is fired.<br/> - `domcontentloaded` : consider navigation to be finished when the DOMContentLoaded event is fired.<br/> - `networkidle0` : consider navigation to be finished when there are no more than 0 network connections for at least `500` ms.<br/> - `networkidle2` : consider navigation to be finished when there are no more than 2 network connections for at least `500` ms.\n *\n * @param options - Navigation parameters which might have the following properties:\n *\n * @returns Promise which resolves to the main resource response. In case of multiple redirects, the navigation will resolve with the response of the last redirect.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "reload(options?: "
                },
                {
                  "kind": "Reference",
                  "text": "WaitForOptions",
                  "canonicalReference": "@opennebula/puppeteer!WaitForOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTTPResponse",
                  "canonicalReference": "@opennebula/puppeteer!HTTPResponse:class"
                },
                {
                  "kind": "Content",
                  "text": " | null>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "reload"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#screenshot:member(1)",
              "docComment": "/**\n * @remarks\n *\n * Options object which might have the following properties:\n *\n * - `path` : The file path to save the image to. The screenshot type will be inferred from file extension. If `path` is a relative path, then it is resolved relative to {@link https://nodejs.org/api/process.html#process_process_cwd | current working directory}. If no path is provided, the image won't be saved to the disk.\n *\n * - `type` : Specify screenshot type, can be either `jpeg` or `png`. Defaults to 'png'.\n *\n * - `quality` : The quality of the image, between 0-100. Not applicable to `png` images.\n *\n * - `fullPage` : When true, takes a screenshot of the full scrollable page. Defaults to `false`\n *\n * - `clip` : An object which specifies clipping region of the page. Should have the following fields:<br/> - `x` : x-coordinate of top-left corner of clip area.<br/> - `y` : y-coordinate of top-left corner of clip area.<br/> - `width` : width of clipping area.<br/> - `height` : height of clipping area.\n *\n * - `omitBackground` : Hides default white background and allows capturing screenshots with transparency. Defaults to `false`\n *\n * - `encoding` : The encoding of the image, can be either base64 or binary. Defaults to `binary`.\n *\n * NOTE: Screenshots take at least 1/6 second on OS X. See {@link https://crbug.com/741689} for discussion.\n *\n * @returns Promise which resolves to buffer or a base64 string (depending on the value of `encoding`) with captured screenshot.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "screenshot(options?: "
                },
                {
                  "kind": "Reference",
                  "text": "ScreenshotOptions",
                  "canonicalReference": "@opennebula/puppeteer!ScreenshotOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Buffer",
                  "canonicalReference": "!Buffer:class"
                },
                {
                  "kind": "Content",
                  "text": " | string | void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "screenshot"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#select:member(1)",
              "docComment": "/**\n * Triggers a `change` and `input` event once all the provided options have been selected. If there's no `<select>` element matching `selector`, the method throws an error.\n *\n * @remarks\n *\n * Shortcut for {@link Frame.select | page.mainFrame().select()}\n *\n * @param selector - A {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | Selector} to query the page for\n *\n * @param values - Values of options to select. If the `<select>` has the `multiple` attribute, all values are considered, otherwise only the first one is taken into account.\n *\n * @returns \n *\n * @example\n * ```js\n * page.select('select#colors', 'blue'); // single selection\n * page.select('select#colors', 'red', 'green', 'blue'); // multiple selections\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "select(selector: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", ...values: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "selector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "values",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "select"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#setBypassCSP:member(1)",
              "docComment": "/**\n * Toggles bypassing page's Content-Security-Policy.\n *\n * @remarks\n *\n * NOTE: CSP bypassing happens at the moment of CSP initialization rather than evaluation. Usually, this means that `page.setBypassCSP` should be called before navigating to the domain.\n *\n * @param enabled - sets bypassing of page's Content-Security-Policy.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setBypassCSP(enabled: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "enabled",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "setBypassCSP"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#setCacheEnabled:member(1)",
              "docComment": "/**\n * Toggles ignoring cache for each request based on the enabled state. By default, caching is enabled.\n *\n * @param enabled - sets the `enabled` state of cache\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setCacheEnabled(enabled?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "enabled",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "setCacheEnabled"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#setContent:member(1)",
              "docComment": "/**\n * @remarks\n *\n * The parameter `options` might have the following options.\n *\n * - `timeout` : Maximum time in milliseconds for resources to load, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the {@link Page.setDefaultNavigationTimeout | page.setDefaultNavigationTimeout(timeout)} or {@link Page.setDefaultTimeout | page.setDefaultTimeout(timeout)} methods.\n *\n * - `waitUntil`: When to consider setting markup succeeded, defaults to `load`. Given an array of event strings, setting content is considered to be successful after all events have been fired. Events can be either:<br/> - `load` : consider setting content to be finished when the `load` event is fired.<br/> - `domcontentloaded` : consider setting content to be finished when the `DOMContentLoaded` event is fired.<br/> - `networkidle0` : consider setting content to be finished when there are no more than 0 network connections for at least `500` ms.<br/> - `networkidle2` : consider setting content to be finished when there are no more than 2 network connections for at least `500` ms.\n *\n * @param html - HTML markup to assign to the page.\n *\n * @param options - Parameters that has some properties.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setContent(html: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "WaitForOptions",
                  "canonicalReference": "@opennebula/puppeteer!WaitForOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "html",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "setContent"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#setCookie:member(1)",
              "docComment": "/**\n * @example\n * ```js\n * await page.setCookie(cookieObject1, cookieObject2);\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setCookie(...cookies: "
                },
                {
                  "kind": "Reference",
                  "text": "Protocol.Network.CookieParam",
                  "canonicalReference": "devtools-protocol!Protocol.Network.CookieParam:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "cookies",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "setCookie"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#setDefaultNavigationTimeout:member(1)",
              "docComment": "/**\n * This setting will change the default maximum navigation time for the following methods and related shortcuts:\n *\n * - {@link Page.goBack | page.goBack(options)}\n *\n * - {@link Page.goForward | page.goForward(options)}\n *\n * - {@link Page.goto | page.goto(url,options)}\n *\n * - {@link Page.reload | page.reload(options)}\n *\n * - {@link Page.setContent | page.setContent(html,options)}\n *\n * - {@link Page.waitForNavigation | page.waitForNavigation(options)}\n *\n * @param timeout - Maximum navigation time in milliseconds.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setDefaultNavigationTimeout(timeout: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "timeout",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "setDefaultNavigationTimeout"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#setDefaultTimeout:member(1)",
              "docComment": "/**\n * @param timeout - Maximum time in milliseconds.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setDefaultTimeout(timeout: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "timeout",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "setDefaultTimeout"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#setDragInterception:member(1)",
              "docComment": "/**\n * @remarks\n *\n * Activating drag interception enables the `Input.drag`, methods This provides the capability to capture drag events emitted on the page, which can then be used to simulate drag-and-drop.\n *\n * @param enabled - Whether to enable drag interception.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setDragInterception(enabled: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "enabled",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "setDragInterception"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#setExtraHTTPHeaders:member(1)",
              "docComment": "/**\n * The extra HTTP headers will be sent with every request the page initiates. NOTE: All HTTP header names are lowercased. (HTTP headers are case-insensitive, so this shouldn’t impact your server code.) NOTE: page.setExtraHTTPHeaders does not guarantee the order of headers in the outgoing requests.\n *\n * @param headers - An object containing additional HTTP headers to be sent with every request. All header values must be strings.\n *\n * @returns \n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setExtraHTTPHeaders(headers: "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<string, string>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "headers",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "setExtraHTTPHeaders"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#setGeolocation:member(1)",
              "docComment": "/**\n * Sets the page's geolocation.\n *\n * @remarks\n *\n * NOTE: Consider using {@link BrowserContext.overridePermissions} to grant permissions for the page to read its geolocation.\n *\n * @example\n * ```js\n * await page.setGeolocation({latitude: 59.95, longitude: 30.31667});\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setGeolocation(options: "
                },
                {
                  "kind": "Reference",
                  "text": "GeolocationOptions",
                  "canonicalReference": "@opennebula/puppeteer!GeolocationOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "setGeolocation"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#setJavaScriptEnabled:member(1)",
              "docComment": "/**\n * @remarks\n *\n * NOTE: changing this value won't affect scripts that have already been run. It will take full effect on the next navigation.\n *\n * @param enabled - Whether or not to enable JavaScript on the page.\n *\n * @returns \n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setJavaScriptEnabled(enabled: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "enabled",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "setJavaScriptEnabled"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#setOfflineMode:member(1)",
              "docComment": "/**\n * @remarks\n *\n * NOTE: while this method sets the network connection to offline, it does not change the parameters used in [page.emulateNetworkConditions(networkConditions)] (#pageemulatenetworkconditionsnetworkconditions)\n *\n * @param enabled - When `true`, enables offline mode for the page.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setOfflineMode(enabled: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "enabled",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "setOfflineMode"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#setRequestInterception:member(1)",
              "docComment": "/**\n * @remarks\n *\n * Activating request interception enables {@link HTTPRequest.abort}, {@link HTTPRequest.continue} and {@link HTTPRequest.respond} methods. This provides the capability to modify network requests that are made by a page.\n *\n * Once request interception is enabled, every request will stall unless it's continued, responded or aborted; or completed using the browser cache.\n *\n * @param value - Whether to enable request interception.\n *\n * @example\n *\n * An example of a naïve request interceptor that aborts all image requests:\n * ```js\n * const puppeteer = require('puppeteer');\n * (async () => {\n *   const browser = await puppeteer.launch();\n *   const page = await browser.newPage();\n *   await page.setRequestInterception(true);\n *   page.on('request', interceptedRequest => {\n *     if (interceptedRequest.url().endsWith('.png') ||\n *         interceptedRequest.url().endsWith('.jpg'))\n *       interceptedRequest.abort();\n *     else\n *       interceptedRequest.continue();\n *     });\n *   await page.goto('https://example.com');\n *   await browser.close();\n * })();\n * ```\n *\n * NOTE: Enabling request interception disables page caching.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setRequestInterception(value: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "setRequestInterception"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#setUserAgent:member(1)",
              "docComment": "/**\n * @param userAgent - Specific user agent to use in this page\n *\n * @param userAgentData - Specific user agent client hint data to use in this page\n *\n * @returns Promise which resolves when the user agent is set.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setUserAgent(userAgent: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", userAgentMetadata?: "
                },
                {
                  "kind": "Reference",
                  "text": "Protocol.Emulation.UserAgentMetadata",
                  "canonicalReference": "devtools-protocol!Protocol.Emulation.UserAgentMetadata:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "userAgent",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "userAgentMetadata",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "setUserAgent"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#setViewport:member(1)",
              "docComment": "/**\n * `page.setViewport` will resize the page. A lot of websites don't expect phones to change size, so you should set the viewport before navigating to the page.\n *\n * In the case of multiple pages in a single browser, each page can have its own viewport size.\n *\n * @remarks\n *\n * Argument viewport have following properties:\n *\n * - `width`: page width in pixels. required\n *\n * - `height`: page height in pixels. required\n *\n * - `deviceScaleFactor`: Specify device scale factor (can be thought of as DPR). Defaults to `1`.\n *\n * - `isMobile`: Whether the meta viewport tag is taken into account. Defaults to `false`.\n *\n * - `hasTouch`: Specifies if viewport supports touch events. Defaults to `false`\n *\n * - `isLandScape`: Specifies if viewport is in landscape mode. Defaults to false.\n *\n * NOTE: in certain cases, setting viewport will reload the page in order to set the isMobile or hasTouch properties.\n *\n * @param viewport - \n *\n * @example\n * ```js\n * const page = await browser.newPage();\n * await page.setViewport({\n * width: 640,\n * height: 480,\n * deviceScaleFactor: 1,\n * });\n * await page.goto('https://example.com');\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setViewport(viewport: "
                },
                {
                  "kind": "Reference",
                  "text": "Viewport",
                  "canonicalReference": "@opennebula/puppeteer!Viewport:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "viewport",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "setViewport"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#tap:member(1)",
              "docComment": "/**\n * This method fetches an element with `selector`, scrolls it into view if needed, and then uses {@link Page.touchscreen} to tap in the center of the element. If there's no element matching `selector`, the method throws an error.\n *\n * @remarks\n *\n * Shortcut for {@link Frame.tap | page.mainFrame().tap(selector)}.\n *\n * @param selector - A {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | Selector} to search for element to tap. If there are multiple elements satisfying the selector, the first will be tapped.\n *\n * @returns \n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tap(selector: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "selector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "tap"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#target:member(1)",
              "docComment": "/**\n * @returns A target this page was created from.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "target(): "
                },
                {
                  "kind": "Reference",
                  "text": "Target",
                  "canonicalReference": "@opennebula/puppeteer!Target:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "target"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#title:member(1)",
              "docComment": "/**\n * @remarks\n *\n * Shortcut for {@link Frame.title | page.mainFrame().title()}.\n *\n * @returns The page's title\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "title(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "title"
            },
            {
              "kind": "Property",
              "canonicalReference": "@opennebula/puppeteer!Page#touchscreen:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get touchscreen(): "
                },
                {
                  "kind": "Reference",
                  "text": "Touchscreen",
                  "canonicalReference": "@opennebula/puppeteer!Touchscreen:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "touchscreen",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@opennebula/puppeteer!Page#tracing:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get tracing(): "
                },
                {
                  "kind": "Reference",
                  "text": "Tracing",
                  "canonicalReference": "@opennebula/puppeteer!Tracing:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "tracing",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#type:member(1)",
              "docComment": "/**\n * Sends a `keydown`, `keypress/input`, and `keyup` event for each character in the text.\n *\n * To press a special key, like `Control` or `ArrowDown`, use {@link Keyboard.press}.\n *\n * @remarks\n *\n * @param selector - A {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | selector} of an element to type into. If there are multiple elements satisfying the selector, the first will be used.\n *\n * @param text - A text to type into a focused element.\n *\n * @param options - have property `delay` which is the Time to wait between key presses in milliseconds. Defaults to `0`.\n *\n * @returns \n *\n * @example\n * ```\n * await page.type('#mytextarea', 'Hello');\n * // Types instantly\n * await page.type('#mytextarea', 'World', { delay: 100 });\n * // Types slower, like a user\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type(selector: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", text: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        delay: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "selector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "text",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "type"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#url:member(1)",
              "docComment": "/**\n * @remarks\n *\n * Shortcut for {@link Frame.url | page.mainFrame().url()}.\n *\n * @returns \n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "url(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "url"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#viewport:member(1)",
              "docComment": "/**\n * @returns - `width`: page's width in pixels\n *\n * - `height`: page's height in pixels\n *\n * - `deviceScalarFactor`: Specify device scale factor (can be though of as dpr). Defaults to `1`.\n *\n * - `isMobile`: Whether the meta viewport tag is taken into account. Defaults to `false`.\n *\n * - `hasTouch`: Specifies if viewport supports touch events. Defaults to `false`.\n *\n * - `isLandScape`: Specifies if viewport is in landscape mode. Defaults to `false`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "viewport(): "
                },
                {
                  "kind": "Reference",
                  "text": "Viewport",
                  "canonicalReference": "@opennebula/puppeteer!Viewport:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "viewport"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#waitFor:member(1)",
              "docComment": "/**\n * @remarks\n *\n * This method behaves differently depending on the first parameter. If it's a `string`, it will be treated as a `selector` or `xpath` (if the string starts with `//`). This method then is a shortcut for {@link Page.waitForSelector} or {@link Page.waitForXPath}.\n *\n * If the first argument is a function this method is a shortcut for {@link Page.waitForFunction}.\n *\n * If the first argument is a `number`, it's treated as a timeout in milliseconds and the method returns a promise which resolves after the timeout.\n *\n * @deprecated\n *\n * Don't use this method directly. Instead use the more explicit methods available: {@link Page.waitForSelector}, {@link Page.waitForXPath}, {@link Page.waitForFunction} or {@link Page.waitForTimeout}.\n *\n * @param selectorOrFunctionOrTimeout - a selector, predicate or timeout to wait for.\n *\n * @param options - optional waiting parameters.\n *\n * @param args - arguments to pass to `pageFunction`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "waitFor(selectorOrFunctionOrTimeout: "
                },
                {
                  "kind": "Content",
                  "text": "string | number | "
                },
                {
                  "kind": "Reference",
                  "text": "Function",
                  "canonicalReference": "!Function:interface"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        visible?: boolean;\n        hidden?: boolean;\n        timeout?: number;\n        polling?: string | number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ", ...args: "
                },
                {
                  "kind": "Reference",
                  "text": "SerializableOrJSHandle",
                  "canonicalReference": "@opennebula/puppeteer!SerializableOrJSHandle:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "JSHandle",
                  "canonicalReference": "@opennebula/puppeteer!JSHandle:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "selectorOrFunctionOrTimeout",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "args",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 8
                  }
                }
              ],
              "name": "waitFor"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#waitForFileChooser:member(1)",
              "docComment": "/**\n * This method is typically coupled with an action that triggers file choosing. The following example clicks a button that issues a file chooser and then responds with `/tmp/myfile.pdf` as if a user has selected this file.\n * ```js\n * const [fileChooser] = await Promise.all([\n * page.waitForFileChooser(),\n * page.click('#upload-file-button'),\n * // some button that triggers file selection\n * ]);\n * await fileChooser.accept(['/tmp/myfile.pdf']);\n * ```\n *\n * NOTE: This must be called before the file chooser is launched. It will not return a currently active file chooser.\n *\n * @remarks\n *\n * NOTE: In non-headless Chromium, this method results in the native file picker dialog `not showing up` for the user.\n *\n * @param options - Optional waiting parameters\n *\n * @returns Resolves after a page requests a file picker.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "waitForFileChooser(options?: "
                },
                {
                  "kind": "Reference",
                  "text": "WaitTimeoutOptions",
                  "canonicalReference": "@opennebula/puppeteer!WaitTimeoutOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "FileChooser",
                  "canonicalReference": "@opennebula/puppeteer!FileChooser:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "waitForFileChooser"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#waitForFunction:member(1)",
              "docComment": "/**\n * The `waitForFunction` can be used to observe viewport size change:\n * ```\n * const puppeteer = require('puppeteer');\n * (async () => {\n * const browser = await puppeteer.launch();\n * const page = await browser.newPage();\n * const watchDog = page.waitForFunction('window.innerWidth < 100');\n * await page.setViewport({ width: 50, height: 50 });\n * await watchDog;\n * await browser.close();\n * })();\n * ```\n *\n * To pass arguments from node.js to the predicate of `page.waitForFunction` function:\n * ```\n * const selector = '.foo';\n * await page.waitForFunction(\n * (selector) => !!document.querySelector(selector),\n * {},\n * selector\n * );\n * ```\n *\n * The predicate of `page.waitForFunction` can be asynchronous too:\n * ```\n * const username = 'github-username';\n * await page.waitForFunction(\n * async (username) => {\n * const githubResponse = await fetch(\n *  `https://api.github.com/users/${username}`\n * );\n * const githubUser = await githubResponse.json();\n * // show the avatar\n * const img = document.createElement('img');\n * img.src = githubUser.avatar_url;\n * // wait 3 seconds\n * await new Promise((resolve, reject) => setTimeout(resolve, 3000));\n * img.remove();\n * },\n * {},\n * username\n * );\n * ```\n *\n * @param pageFunction - Function to be evaluated in browser context\n *\n * @param options - Optional waiting parameters\n *\n * @param args - Arguments to pass to `pageFunction`\n *\n * @returns Promise which resolves when the `pageFunction` returns a truthy value. It resolves to a JSHandle of the truthy value.\n *\n * The optional waiting parameter can be:\n *\n * - `Polling`: An interval at which the `pageFunction` is executed, defaults to `raf`. If `polling` is a number, then it is treated as an interval in milliseconds at which the function would be executed. If polling is a string, then it can be one of the following values:<br/> - `raf`: to constantly execute `pageFunction` in `requestAnimationFrame` callback. This is the tightest polling mode which is suitable to observe styling changes.<br/> - `mutation`: to execute pageFunction on every DOM mutation.\n *\n * - `timeout`: maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the {@link Page.setDefaultTimeout | page.setDefaultTimeout(timeout)} method.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "waitForFunction(pageFunction: "
                },
                {
                  "kind": "Reference",
                  "text": "Function",
                  "canonicalReference": "!Function:interface"
                },
                {
                  "kind": "Content",
                  "text": " | string"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        timeout?: number;\n        polling?: string | number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ", ...args: "
                },
                {
                  "kind": "Reference",
                  "text": "SerializableOrJSHandle",
                  "canonicalReference": "@opennebula/puppeteer!SerializableOrJSHandle:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "JSHandle",
                  "canonicalReference": "@opennebula/puppeteer!JSHandle:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "pageFunction",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "args",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 8
                  }
                }
              ],
              "name": "waitForFunction"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#waitForNavigation:member(1)",
              "docComment": "/**\n * This resolves when the page navigates to a new URL or reloads. It is useful when you run code that will indirectly cause the page to navigate. Consider this example:\n * ```js\n * const [response] = await Promise.all([\n * page.waitForNavigation(), // The promise resolves after navigation has finished\n * page.click('a.my-link'), // Clicking the link will indirectly cause a navigation\n * ]);\n * ```\n *\n * @remarks\n *\n * NOTE: Usage of the {@link https://developer.mozilla.org/en-US/docs/Web/API/History_API | History API} to change the URL is considered a navigation.\n *\n * Shortcut for {@link Frame.waitForNavigation | page.mainFrame().waitForNavigation(options)}.\n *\n * @param options - Navigation parameters which might have the following properties:\n *\n * @returns Promise which resolves to the main resource response. In case of multiple redirects, the navigation will resolve with the response of the last redirect. In case of navigation to a different anchor or navigation due to History API usage, the navigation will resolve with `null`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "waitForNavigation(options?: "
                },
                {
                  "kind": "Reference",
                  "text": "WaitForOptions",
                  "canonicalReference": "@opennebula/puppeteer!WaitForOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTTPResponse",
                  "canonicalReference": "@opennebula/puppeteer!HTTPResponse:class"
                },
                {
                  "kind": "Content",
                  "text": " | null>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "waitForNavigation"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#waitForRequest:member(1)",
              "docComment": "/**\n * @remarks\n *\n * Optional Waiting Parameters have:\n *\n * - `timeout`: Maximum wait time in milliseconds, defaults to `30` seconds, pass `0` to disable the timeout. The default value can be changed by using the {@link Page.setDefaultTimeout} method.\n *\n * @param urlOrPredicate - A URL or predicate to wait for\n *\n * @param options - Optional waiting parameters\n *\n * @returns Promise which resolves to the matched response\n *\n * @example\n * ```js\n * const firstResponse = await page.waitForResponse(\n * 'https://example.com/resource'\n * );\n * const finalResponse = await page.waitForResponse(\n * (response) =>\n * response.url() === 'https://example.com' && response.status() === 200\n * );\n * const finalResponse = await page.waitForResponse(async (response) => {\n * return (await response.text()).includes('<html>');\n * });\n * return finalResponse.ok();\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "waitForRequest(urlOrPredicate: "
                },
                {
                  "kind": "Content",
                  "text": "string | ((req: "
                },
                {
                  "kind": "Reference",
                  "text": "HTTPRequest",
                  "canonicalReference": "@opennebula/puppeteer!HTTPRequest:class"
                },
                {
                  "kind": "Content",
                  "text": ") => boolean | "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>)"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        timeout?: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTTPRequest",
                  "canonicalReference": "@opennebula/puppeteer!HTTPRequest:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "urlOrPredicate",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "waitForRequest"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#waitForResponse:member(1)",
              "docComment": "/**\n * @remarks\n *\n * Optional Parameter have:\n *\n * - `timeout`: Maximum wait time in milliseconds, defaults to `30` seconds, pass `0` to disable the timeout. The default value can be changed by using the {@link Page.setDefaultTimeout} method.\n *\n * @param urlOrPredicate - A URL or predicate to wait for.\n *\n * @param options - Optional waiting parameters\n *\n * @returns Promise which resolves to the matched response.\n *\n * @example\n * ```js\n * const firstResponse = await page.waitForResponse(\n * 'https://example.com/resource'\n * );\n * const finalResponse = await page.waitForResponse(\n * (response) =>\n * response.url() === 'https://example.com' && response.status() === 200\n * );\n * const finalResponse = await page.waitForResponse(async (response) => {\n * return (await response.text()).includes('<html>');\n * });\n * return finalResponse.ok();\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "waitForResponse(urlOrPredicate: "
                },
                {
                  "kind": "Content",
                  "text": "string | ((res: "
                },
                {
                  "kind": "Reference",
                  "text": "HTTPResponse",
                  "canonicalReference": "@opennebula/puppeteer!HTTPResponse:class"
                },
                {
                  "kind": "Content",
                  "text": ") => boolean | "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>)"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        timeout?: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTTPResponse",
                  "canonicalReference": "@opennebula/puppeteer!HTTPResponse:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "urlOrPredicate",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "waitForResponse"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#waitForSelector:member(1)",
              "docComment": "/**\n * Wait for the `selector` to appear in page. If at the moment of calling the method the `selector` already exists, the method will return immediately. If the `selector` doesn't appear after the `timeout` milliseconds of waiting, the function will throw.\n *\n * This method works across navigations:\n * ```js\n * const puppeteer = require('puppeteer');\n * (async () => {\n * const browser = await puppeteer.launch();\n * const page = await browser.newPage();\n * let currentURL;\n * page\n * .waitForSelector('img')\n * .then(() => console.log('First URL with image: ' + currentURL));\n * for (currentURL of [\n * 'https://example.com',\n * 'https://google.com',\n * 'https://bbc.com',\n * ]) {\n * await page.goto(currentURL);\n * }\n * await browser.close();\n * })();\n * ```\n *\n * @remarks\n *\n * The optional Parameter in Arguments `options` are :\n *\n * - `Visible`: A boolean wait for element to be present in DOM and to be visible, i.e. to not have `display: none` or `visibility: hidden` CSS properties. Defaults to `false`.\n *\n * - `hidden`: ait for element to not be found in the DOM or to be hidden, i.e. have `display: none` or `visibility: hidden` CSS properties. Defaults to `false`.\n *\n * - `timeout`: maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the {@link Page.setDefaultTimeout} method.\n *\n * @param selector - A {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | selector} of an element to wait for\n *\n * @param options - Optional waiting parameters\n *\n * @returns Promise which resolves when element specified by selector string is added to DOM. Resolves to `null` if waiting for hidden: `true` and selector is not found in DOM.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "waitForSelector(selector: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        visible?: boolean;\n        hidden?: boolean;\n        timeout?: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ElementHandle",
                  "canonicalReference": "@opennebula/puppeteer!ElementHandle:class"
                },
                {
                  "kind": "Content",
                  "text": " | null>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "selector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "waitForSelector"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#waitForTimeout:member(1)",
              "docComment": "/**\n * Causes your script to wait for the given number of milliseconds.\n *\n * @remarks\n *\n * It's generally recommended to not wait for a number of seconds, but instead use {@link Page.waitForSelector}, {@link Page.waitForXPath} or {@link Page.waitForFunction} to wait for exactly the conditions you want.\n *\n * @param milliseconds - the number of milliseconds to wait.\n *\n * @example\n *\n * Wait for 1 second:\n * ```\n * await page.waitForTimeout(1000);\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "waitForTimeout(milliseconds: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "milliseconds",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "waitForTimeout"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#waitForXPath:member(1)",
              "docComment": "/**\n * Wait for the `xpath` to appear in page. If at the moment of calling the method the `xpath` already exists, the method will return immediately. If the `xpath` doesn't appear after the `timeout` milliseconds of waiting, the function will throw.\n *\n * This method works across navigation\n * ```js\n * const puppeteer = require('puppeteer');\n * (async () => {\n * const browser = await puppeteer.launch();\n * const page = await browser.newPage();\n * let currentURL;\n * page\n * .waitForXPath('//img')\n * .then(() => console.log('First URL with image: ' + currentURL));\n * for (currentURL of [\n * 'https://example.com',\n * 'https://google.com',\n * 'https://bbc.com',\n * ]) {\n * await page.goto(currentURL);\n * }\n * await browser.close();\n * })();\n * ```\n *\n * @remarks\n *\n * The optional Argument `options` have properties:\n *\n * - `visible`: A boolean to wait for element to be present in DOM and to be visible, i.e. to not have `display: none` or `visibility: hidden` CSS properties. Defaults to `false`.\n *\n * - `hidden`: A boolean wait for element to not be found in the DOM or to be hidden, i.e. have `display: none` or `visibility: hidden` CSS properties. Defaults to `false`.\n *\n * - `timeout`: A number which is maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the {@link Page.setDefaultTimeout} method.\n *\n * @param xpath - A {@link https://developer.mozilla.org/en-US/docs/Web/XPath | xpath} of an element to wait for\n *\n * @param options - Optional waiting parameters\n *\n * @returns Promise which resolves when element specified by xpath string is added to DOM. Resolves to `null` if waiting for `hidden: true` and xpath is not found in DOM.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "waitForXPath(xpath: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        visible?: boolean;\n        hidden?: boolean;\n        timeout?: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ElementHandle",
                  "canonicalReference": "@opennebula/puppeteer!ElementHandle:class"
                },
                {
                  "kind": "Content",
                  "text": " | null>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "xpath",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "waitForXPath"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Page#workers:member(1)",
              "docComment": "/**\n * @remarks\n *\n * NOTE: This does not contain ServiceWorkers\n *\n * @returns all of the dedicated {@link https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API | WebWorkers} associated with the page.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "workers(): "
                },
                {
                  "kind": "Reference",
                  "text": "WebWorker",
                  "canonicalReference": "@opennebula/puppeteer!WebWorker:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "workers"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Enum",
          "canonicalReference": "@opennebula/puppeteer!PageEmittedEvents:enum",
          "docComment": "/**\n * All the events that a page instance may emit.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare const enum PageEmittedEvents "
            }
          ],
          "releaseTag": "Public",
          "name": "PageEmittedEvents",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@opennebula/puppeteer!PageEmittedEvents.Close:member",
              "docComment": "/**\n * Emitted when the page closes.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Close = "
                },
                {
                  "kind": "Content",
                  "text": "\"close\""
                }
              ],
              "releaseTag": "Public",
              "name": "Close",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@opennebula/puppeteer!PageEmittedEvents.Console:member",
              "docComment": "/**\n * Emitted when JavaScript within the page calls one of console API methods, e.g. `console.log` or `console.dir`. Also emitted if the page throws an error or a warning.\n *\n * @remarks\n *\n * A `console` event provides a {@link ConsoleMessage} representing the console message that was logged.\n *\n * @example\n *\n * An example of handling `console` event:\n * ```js\n * page.on('console', msg => {\n *   for (let i = 0; i < msg.args().length; ++i)\n *    console.log(`${i}: ${msg.args()[i]}`);\n *  });\n *  page.evaluate(() => console.log('hello', 5, {foo: 'bar'}));\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Console = "
                },
                {
                  "kind": "Content",
                  "text": "\"console\""
                }
              ],
              "releaseTag": "Public",
              "name": "Console",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@opennebula/puppeteer!PageEmittedEvents.Dialog:member",
              "docComment": "/**\n * Emitted when a JavaScript dialog appears, such as `alert`, `prompt`, `confirm` or `beforeunload`. Puppeteer can respond to the dialog via {@link Dialog.accept} or {@link Dialog.dismiss}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Dialog = "
                },
                {
                  "kind": "Content",
                  "text": "\"dialog\""
                }
              ],
              "releaseTag": "Public",
              "name": "Dialog",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@opennebula/puppeteer!PageEmittedEvents.DOMContentLoaded:member",
              "docComment": "/**\n * Emitted when the JavaScript {@link https://developer.mozilla.org/en-US/docs/Web/Events/DOMContentLoaded | DOMContentLoaded} event is dispatched.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "DOMContentLoaded = "
                },
                {
                  "kind": "Content",
                  "text": "\"domcontentloaded\""
                }
              ],
              "releaseTag": "Public",
              "name": "DOMContentLoaded",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@opennebula/puppeteer!PageEmittedEvents.Error:member",
              "docComment": "/**\n * Emitted when the page crashes. Will contain an `Error`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Error = "
                },
                {
                  "kind": "Content",
                  "text": "\"error\""
                }
              ],
              "releaseTag": "Public",
              "name": "Error",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@opennebula/puppeteer!PageEmittedEvents.FrameAttached:member",
              "docComment": "/**\n * Emitted when a frame is attached. Will contain a {@link Frame}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "FrameAttached = "
                },
                {
                  "kind": "Content",
                  "text": "\"frameattached\""
                }
              ],
              "releaseTag": "Public",
              "name": "FrameAttached",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@opennebula/puppeteer!PageEmittedEvents.FrameDetached:member",
              "docComment": "/**\n * Emitted when a frame is detached. Will contain a {@link Frame}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "FrameDetached = "
                },
                {
                  "kind": "Content",
                  "text": "\"framedetached\""
                }
              ],
              "releaseTag": "Public",
              "name": "FrameDetached",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@opennebula/puppeteer!PageEmittedEvents.FrameNavigated:member",
              "docComment": "/**\n * Emitted when a frame is navigated to a new URL. Will contain a {@link Frame}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "FrameNavigated = "
                },
                {
                  "kind": "Content",
                  "text": "\"framenavigated\""
                }
              ],
              "releaseTag": "Public",
              "name": "FrameNavigated",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@opennebula/puppeteer!PageEmittedEvents.Load:member",
              "docComment": "/**\n * Emitted when the JavaScript {@link https://developer.mozilla.org/en-US/docs/Web/Events/load | load} event is dispatched.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Load = "
                },
                {
                  "kind": "Content",
                  "text": "\"load\""
                }
              ],
              "releaseTag": "Public",
              "name": "Load",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@opennebula/puppeteer!PageEmittedEvents.Metrics:member",
              "docComment": "/**\n * Emitted when the JavaScript code makes a call to `console.timeStamp`. For the list of metrics see {@link Page.metrics | page.metrics}.\n *\n * @remarks\n *\n * Contains an object with two properties: - `title`: the title passed to `console.timeStamp` - `metrics`: objec containing metrics as key/value pairs. The values will be `number`s.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Metrics = "
                },
                {
                  "kind": "Content",
                  "text": "\"metrics\""
                }
              ],
              "releaseTag": "Public",
              "name": "Metrics",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@opennebula/puppeteer!PageEmittedEvents.PageError:member",
              "docComment": "/**\n * Emitted when an uncaught exception happens within the page. Contains an `Error`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "PageError = "
                },
                {
                  "kind": "Content",
                  "text": "\"pageerror\""
                }
              ],
              "releaseTag": "Public",
              "name": "PageError",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@opennebula/puppeteer!PageEmittedEvents.Popup:member",
              "docComment": "/**\n * Emitted when the page opens a new tab or window.\n *\n * Contains a {@link Page} corresponding to the popup window.\n *\n * @example\n * ```js\n * const [popup] = await Promise.all([\n *   new Promise(resolve => page.once('popup', resolve)),\n *   page.click('a[target=_blank]'),\n * ]);\n * ```\n *\n * ```js\n * const [popup] = await Promise.all([\n *   new Promise(resolve => page.once('popup', resolve)),\n *   page.evaluate(() => window.open('https://example.com')),\n * ]);\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Popup = "
                },
                {
                  "kind": "Content",
                  "text": "\"popup\""
                }
              ],
              "releaseTag": "Public",
              "name": "Popup",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@opennebula/puppeteer!PageEmittedEvents.Request:member",
              "docComment": "/**\n * Emitted when a page issues a request and contains a {@link HTTPRequest}.\n *\n * @remarks\n *\n * The object is readonly. See {@link Page.setRequestInterception} for intercepting and mutating requests.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Request = "
                },
                {
                  "kind": "Content",
                  "text": "\"request\""
                }
              ],
              "releaseTag": "Public",
              "name": "Request",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@opennebula/puppeteer!PageEmittedEvents.RequestFailed:member",
              "docComment": "/**\n * Emitted when a request fails, for example by timing out.\n *\n * Contains a {@link HTTPRequest}.\n *\n * @remarks\n *\n * NOTE: HTTP Error responses, such as 404 or 503, are still successful responses from HTTP standpoint, so request will complete with `requestfinished` event and not with `requestfailed`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "RequestFailed = "
                },
                {
                  "kind": "Content",
                  "text": "\"requestfailed\""
                }
              ],
              "releaseTag": "Public",
              "name": "RequestFailed",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@opennebula/puppeteer!PageEmittedEvents.RequestFinished:member",
              "docComment": "/**\n * Emitted when a request finishes successfully. Contains a {@link HTTPRequest}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "RequestFinished = "
                },
                {
                  "kind": "Content",
                  "text": "\"requestfinished\""
                }
              ],
              "releaseTag": "Public",
              "name": "RequestFinished",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@opennebula/puppeteer!PageEmittedEvents.RequestServedFromCache:member",
              "docComment": "/**\n * Emitted when a request ended up loading from cache. Contains a {@link HTTPRequest}.\n *\n * @remarks\n *\n * For certain requests, might contain undefined. {@link https://crbug.com/750469}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "RequestServedFromCache = "
                },
                {
                  "kind": "Content",
                  "text": "\"requestservedfromcache\""
                }
              ],
              "releaseTag": "Public",
              "name": "RequestServedFromCache",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@opennebula/puppeteer!PageEmittedEvents.Response:member",
              "docComment": "/**\n * Emitted when a response is received. Contains a {@link HTTPResponse}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Response = "
                },
                {
                  "kind": "Content",
                  "text": "\"response\""
                }
              ],
              "releaseTag": "Public",
              "name": "Response",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@opennebula/puppeteer!PageEmittedEvents.WorkerCreated:member",
              "docComment": "/**\n * Emitted when a dedicated {@link https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API | WebWorker} is spawned by the page.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "WorkerCreated = "
                },
                {
                  "kind": "Content",
                  "text": "\"workercreated\""
                }
              ],
              "releaseTag": "Public",
              "name": "WorkerCreated",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@opennebula/puppeteer!PageEmittedEvents.WorkerDestroyed:member",
              "docComment": "/**\n * Emitted when a dedicated {@link https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API | WebWorker} is destroyed by the page.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "WorkerDestroyed = "
                },
                {
                  "kind": "Content",
                  "text": "\"workerdestroyed\""
                }
              ],
              "releaseTag": "Public",
              "name": "WorkerDestroyed",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@opennebula/puppeteer!PageEventObject:interface",
          "docComment": "/**\n * Denotes the objects received by callback functions for page events.\n *\n * See {@link PageEmittedEvents} for more detail on the events and when they are emitted.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PageEventObject "
            }
          ],
          "releaseTag": "Public",
          "name": "PageEventObject",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!PageEventObject#close:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "close: "
                },
                {
                  "kind": "Content",
                  "text": "never"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "close",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!PageEventObject#console:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "console: "
                },
                {
                  "kind": "Reference",
                  "text": "ConsoleMessage",
                  "canonicalReference": "@opennebula/puppeteer!ConsoleMessage:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "console",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!PageEventObject#dialog:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dialog: "
                },
                {
                  "kind": "Reference",
                  "text": "Dialog",
                  "canonicalReference": "@opennebula/puppeteer!Dialog:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "dialog",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!PageEventObject#domcontentloaded:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "domcontentloaded: "
                },
                {
                  "kind": "Content",
                  "text": "never"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "domcontentloaded",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!PageEventObject#error:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "error: "
                },
                {
                  "kind": "Reference",
                  "text": "Error",
                  "canonicalReference": "!Error:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "error",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!PageEventObject#frameattached:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "frameattached: "
                },
                {
                  "kind": "Reference",
                  "text": "Frame",
                  "canonicalReference": "@opennebula/puppeteer!Frame:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "frameattached",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!PageEventObject#framedetached:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "framedetached: "
                },
                {
                  "kind": "Reference",
                  "text": "Frame",
                  "canonicalReference": "@opennebula/puppeteer!Frame:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "framedetached",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!PageEventObject#framenavigated:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "framenavigated: "
                },
                {
                  "kind": "Reference",
                  "text": "Frame",
                  "canonicalReference": "@opennebula/puppeteer!Frame:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "framenavigated",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!PageEventObject#load:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "load: "
                },
                {
                  "kind": "Content",
                  "text": "never"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "load",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!PageEventObject#metrics:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "metrics: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        title: string;\n        metrics: "
                },
                {
                  "kind": "Reference",
                  "text": "Metrics",
                  "canonicalReference": "@opennebula/puppeteer!Metrics:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "metrics",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!PageEventObject#pageerror:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pageerror: "
                },
                {
                  "kind": "Reference",
                  "text": "Error",
                  "canonicalReference": "!Error:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "pageerror",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!PageEventObject#popup:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "popup: "
                },
                {
                  "kind": "Reference",
                  "text": "Page",
                  "canonicalReference": "@opennebula/puppeteer!Page:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "popup",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!PageEventObject#request:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "request: "
                },
                {
                  "kind": "Reference",
                  "text": "HTTPRequest",
                  "canonicalReference": "@opennebula/puppeteer!HTTPRequest:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "request",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!PageEventObject#requestfailed:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "requestfailed: "
                },
                {
                  "kind": "Reference",
                  "text": "HTTPRequest",
                  "canonicalReference": "@opennebula/puppeteer!HTTPRequest:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "requestfailed",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!PageEventObject#requestfinished:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "requestfinished: "
                },
                {
                  "kind": "Reference",
                  "text": "HTTPRequest",
                  "canonicalReference": "@opennebula/puppeteer!HTTPRequest:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "requestfinished",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!PageEventObject#requestservedfromcache:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "requestservedfromcache: "
                },
                {
                  "kind": "Reference",
                  "text": "HTTPRequest",
                  "canonicalReference": "@opennebula/puppeteer!HTTPRequest:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "requestservedfromcache",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!PageEventObject#response:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "response: "
                },
                {
                  "kind": "Reference",
                  "text": "HTTPResponse",
                  "canonicalReference": "@opennebula/puppeteer!HTTPResponse:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "response",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!PageEventObject#workercreated:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "workercreated: "
                },
                {
                  "kind": "Reference",
                  "text": "WebWorker",
                  "canonicalReference": "@opennebula/puppeteer!WebWorker:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "workercreated",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!PageEventObject#workerdestroyed:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "workerdestroyed: "
                },
                {
                  "kind": "Reference",
                  "text": "WebWorker",
                  "canonicalReference": "@opennebula/puppeteer!WebWorker:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "workerdestroyed",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@opennebula/puppeteer!PaperFormat:type",
          "docComment": "/**\n * All the valid paper format types when printing a PDF.\n *\n * @remarks\n *\n * The sizes of each format are as follows: - `Letter`: 8.5in x 11in\n *\n * - `Legal`: 8.5in x 14in\n *\n * - `Tabloid`: 11in x 17in\n *\n * - `Ledger`: 17in x 11in\n *\n * - `A0`: 33.1in x 46.8in\n *\n * - `A1`: 23.4in x 33.1in\n *\n * - `A2`: 16.54in x 23.4in\n *\n * - `A3`: 11.7in x 16.54in\n *\n * - `A4`: 8.27in x 11.7in\n *\n * - `A5`: 5.83in x 8.27in\n *\n * - `A6`: 4.13in x 5.83in\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type PaperFormat = "
            },
            {
              "kind": "Content",
              "text": "'letter' | 'legal' | 'tabloid' | 'ledger' | 'a0' | 'a1' | 'a2' | 'a3' | 'a4' | 'a5' | 'a6'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "PaperFormat",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@opennebula/puppeteer!PDFMargin:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PDFMargin "
            }
          ],
          "releaseTag": "Public",
          "name": "PDFMargin",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!PDFMargin#bottom:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "bottom?: "
                },
                {
                  "kind": "Content",
                  "text": "string | number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "bottom",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!PDFMargin#left:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "left?: "
                },
                {
                  "kind": "Content",
                  "text": "string | number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "left",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!PDFMargin#right:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "right?: "
                },
                {
                  "kind": "Content",
                  "text": "string | number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "right",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!PDFMargin#top:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "top?: "
                },
                {
                  "kind": "Content",
                  "text": "string | number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "top",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@opennebula/puppeteer!PDFOptions:interface",
          "docComment": "/**\n * Valid options to configure PDF generation via {@link Page.pdf}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PDFOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "PDFOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!PDFOptions#displayHeaderFooter:member",
              "docComment": "/**\n * Whether to show the header and footer.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "displayHeaderFooter?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "displayHeaderFooter",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!PDFOptions#footerTemplate:member",
              "docComment": "/**\n * HTML template for the print footer. Has the same constraints and support for special classes as {@link PDFOptions.headerTemplate}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "footerTemplate?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "footerTemplate",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!PDFOptions#format:member",
              "docComment": "/**\n * @remarks\n *\n * If set, this takes priority over the `width` and `height` options.\n *\n * @defaultValue\n *\n * `letter`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "format?: "
                },
                {
                  "kind": "Reference",
                  "text": "PaperFormat",
                  "canonicalReference": "@opennebula/puppeteer!PaperFormat:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "format",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!PDFOptions#headerTemplate:member",
              "docComment": "/**\n * HTML template for the print header. Should be valid HTML with the following classes used to inject values into them: - `date` formatted print date\n *\n * - `title` document title\n *\n * - `url` document location\n *\n * - `pageNumber` current page number\n *\n * - `totalPages` total pages in the document\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "headerTemplate?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "headerTemplate",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!PDFOptions#height:member",
              "docComment": "/**\n * Sets the height of paper. You can pass in a number or a string with a unit.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "height?: "
                },
                {
                  "kind": "Content",
                  "text": "string | number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "height",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!PDFOptions#landscape:member",
              "docComment": "/**\n * Whether to print in landscape orientation.\n *\n * @defaultValue\n *\n * = false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "landscape?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "landscape",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!PDFOptions#margin:member",
              "docComment": "/**\n * Set the PDF margins.\n *\n * @defaultValue\n *\n * no margins are set.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "margin?: "
                },
                {
                  "kind": "Reference",
                  "text": "PDFMargin",
                  "canonicalReference": "@opennebula/puppeteer!PDFMargin:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "margin",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!PDFOptions#omitBackground:member",
              "docComment": "/**\n * Hides default white background and allows generating pdfs with transparency.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "omitBackground?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "omitBackground",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!PDFOptions#pageRanges:member",
              "docComment": "/**\n * Paper ranges to print, e.g. `1-5, 8, 11-13`.\n *\n * @defaultValue\n *\n * The empty string, which means all pages are printed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pageRanges?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "pageRanges",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!PDFOptions#path:member",
              "docComment": "/**\n * The path to save the file to.\n *\n * @remarks\n *\n * If the path is relative, it's resolved relative to the current working directory.\n *\n * @defaultValue\n *\n * the empty string, which means the PDF will not be written to disk.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "path?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "path",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!PDFOptions#preferCSSPageSize:member",
              "docComment": "/**\n * Give any CSS `@page` size declared in the page priority over what is declared in the `width` or `height` or `format` option.\n *\n * @defaultValue\n *\n * `false`, which will scale the content to fit the paper size.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "preferCSSPageSize?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "preferCSSPageSize",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!PDFOptions#printBackground:member",
              "docComment": "/**\n * Set to `true` to print background graphics.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "printBackground?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "printBackground",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!PDFOptions#scale:member",
              "docComment": "/**\n * Scales the rendering of the web page. Amount must be between `0.1` and `2`.\n *\n * @defaultValue\n *\n * 1\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scale?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "scale",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!PDFOptions#width:member",
              "docComment": "/**\n * Sets the width of paper. You can pass in a number or a string with a unit.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "width?: "
                },
                {
                  "kind": "Content",
                  "text": "string | number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "width",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@opennebula/puppeteer!Permission:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Permission = "
            },
            {
              "kind": "Content",
              "text": "'geolocation' | 'midi' | 'notifications' | 'camera' | 'microphone' | 'background-sync' | 'ambient-light-sensor' | 'accelerometer' | 'gyroscope' | 'magnetometer' | 'accessibility-events' | 'clipboard-read' | 'clipboard-write' | 'payment-handler' | 'idle-detection' | 'midi-sysex'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Permission",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@opennebula/puppeteer!Platform:type",
          "docComment": "/**\n * Supported platforms.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Platform = "
            },
            {
              "kind": "Content",
              "text": "'linux' | 'mac' | 'win32' | 'win64'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Platform",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@opennebula/puppeteer!Point:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Point "
            }
          ],
          "releaseTag": "Public",
          "name": "Point",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!Point#x:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "x",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!Point#y:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "y",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@opennebula/puppeteer!PredefinedNetworkConditions:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type PredefinedNetworkConditions = "
            },
            {
              "kind": "Content",
              "text": "{\n    [name: string]: "
            },
            {
              "kind": "Reference",
              "text": "NetworkConditions",
              "canonicalReference": "@opennebula/puppeteer!NetworkConditions:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "PredefinedNetworkConditions",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@opennebula/puppeteer!PressOptions:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PressOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "PressOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!PressOptions#delay:member",
              "docComment": "/**\n * Time to wait between `keydown` and `keyup` in milliseconds. Defaults to 0.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "delay?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "delay",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!PressOptions#text:member",
              "docComment": "/**\n * If specified, generates an input event with this text.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "text?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "text",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@opennebula/puppeteer!Product:type",
          "docComment": "/**\n * Supported products.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Product = "
            },
            {
              "kind": "Content",
              "text": "'chrome' | 'firefox'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Product",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@opennebula/puppeteer!ProductLauncher:interface",
          "docComment": "/**\n * Describes a launcher - a class that is able to create and launch a browser instance.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ProductLauncher "
            }
          ],
          "releaseTag": "Public",
          "name": "ProductLauncher",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@opennebula/puppeteer!ProductLauncher#defaultArgs:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "defaultArgs(object: "
                },
                {
                  "kind": "Reference",
                  "text": "BrowserLaunchArgumentOptions",
                  "canonicalReference": "@opennebula/puppeteer!BrowserLaunchArgumentOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "object",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "defaultArgs"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!ProductLauncher#executablePath:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "executablePath: "
                },
                {
                  "kind": "Content",
                  "text": "(string?: any) => string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "executablePath",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@opennebula/puppeteer!ProductLauncher#launch:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "launch(object: "
                },
                {
                  "kind": "Reference",
                  "text": "PuppeteerNodeLaunchOptions",
                  "canonicalReference": "@opennebula/puppeteer!PuppeteerNodeLaunchOptions:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "object",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "launch"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!ProductLauncher#product:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "product: "
                },
                {
                  "kind": "Reference",
                  "text": "Product",
                  "canonicalReference": "@opennebula/puppeteer!Product:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "product",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@opennebula/puppeteer!ProtocolLifeCycleEvent:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ProtocolLifeCycleEvent = "
            },
            {
              "kind": "Content",
              "text": "'load' | 'DOMContentLoaded' | 'networkIdle' | 'networkAlmostIdle'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ProtocolLifeCycleEvent",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@opennebula/puppeteer!Puppeteer:class",
          "docComment": "/**\n * The main Puppeteer class.\n *\n * IMPORTANT: if you are using Puppeteer in a Node environment, you will get an instance of {@link PuppeteerNode} when you import or require `puppeteer`. That class extends `Puppeteer`, so has all the methods documented below as well as all that are defined on {@link PuppeteerNode}.\n *\n * @remarks\n *\n * The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the `Puppeteer` class.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Puppeteer "
            }
          ],
          "releaseTag": "Public",
          "name": "Puppeteer",
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@opennebula/puppeteer!Puppeteer#_changedProduct:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected _changedProduct: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "_changedProduct",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@opennebula/puppeteer!Puppeteer#_isPuppeteerCore:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected _isPuppeteerCore: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "_isPuppeteerCore",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Puppeteer#clearCustomQueryHandlers:member(1)",
              "docComment": "/**\n * Clears all registered handlers.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clearCustomQueryHandlers(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "clearCustomQueryHandlers"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Puppeteer#connect:member(1)",
              "docComment": "/**\n * This method attaches Puppeteer to an existing browser instance.\n *\n * @remarks\n *\n * @param options - Set of configurable options to set on the browser.\n *\n * @returns Promise which resolves to browser instance.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "connect(options: "
                },
                {
                  "kind": "Reference",
                  "text": "ConnectOptions",
                  "canonicalReference": "@opennebula/puppeteer!ConnectOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Browser",
                  "canonicalReference": "@opennebula/puppeteer!Browser:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "connect"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Puppeteer#customQueryHandlerNames:member(1)",
              "docComment": "/**\n * @returns a list with the names of all registered custom query handlers.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "customQueryHandlerNames(): "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "customQueryHandlerNames"
            },
            {
              "kind": "Property",
              "canonicalReference": "@opennebula/puppeteer!Puppeteer#devices:member",
              "docComment": "/**\n * @remarks\n *\n * A list of devices to be used with `page.emulate(options)`. Actual list of devices can be found in {@link https://github.com/puppeteer/puppeteer/blob/main/src/common/DeviceDescriptors.ts | src/common/DeviceDescriptors.ts}.\n *\n * @example\n * ```js\n * const puppeteer = require('puppeteer');\n * const iPhone = puppeteer.devices['iPhone 6'];\n *\n * (async () => {\n *   const browser = await puppeteer.launch();\n *   const page = await browser.newPage();\n *   await page.emulate(iPhone);\n *   await page.goto('https://www.google.com');\n *   // other actions...\n *   await browser.close();\n * })();\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get devices(): "
                },
                {
                  "kind": "Reference",
                  "text": "DevicesMap",
                  "canonicalReference": "@opennebula/puppeteer!DevicesMap:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "devices",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@opennebula/puppeteer!Puppeteer#errors:member",
              "docComment": "/**\n * @remarks\n *\n * Puppeteer methods might throw errors if they are unable to fulfill a request. For example, `page.waitForSelector(selector[, options])` might fail if the selector doesn't match any nodes during the given timeframe.\n *\n * For certain types of errors Puppeteer uses specific error classes. These classes are available via `puppeteer.errors`.\n *\n * @example\n *\n * An example of handling a timeout error:\n * ```js\n * try {\n *   await page.waitForSelector('.foo');\n * } catch (e) {\n *   if (e instanceof puppeteer.errors.TimeoutError) {\n *     // Do something if this is a timeout.\n *   }\n * }\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get errors(): "
                },
                {
                  "kind": "Reference",
                  "text": "PuppeteerErrors",
                  "canonicalReference": "@opennebula/puppeteer!PuppeteerErrors:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "errors",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@opennebula/puppeteer!Puppeteer#networkConditions:member",
              "docComment": "/**\n * @remarks\n *\n * Returns a list of network conditions to be used with `page.emulateNetworkConditions(networkConditions)`. Actual list of predefined conditions can be found in {@link https://github.com/puppeteer/puppeteer/blob/main/src/common/NetworkConditions.ts | src/common/NetworkConditions.ts}.\n *\n * @example\n * ```js\n * const puppeteer = require('puppeteer');\n * const slow3G = puppeteer.networkConditions['Slow 3G'];\n *\n * (async () => {\n *   const browser = await puppeteer.launch();\n *   const page = await browser.newPage();\n *   await page.emulateNetworkConditions(slow3G);\n *   await page.goto('https://www.google.com');\n *   // other actions...\n *   await browser.close();\n * })();\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get networkConditions(): "
                },
                {
                  "kind": "Reference",
                  "text": "PredefinedNetworkConditions",
                  "canonicalReference": "@opennebula/puppeteer!PredefinedNetworkConditions:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "networkConditions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Puppeteer#registerCustomQueryHandler:member(1)",
              "docComment": "/**\n * Registers a {@link CustomQueryHandler | custom query handler}. After registration, the handler can be used everywhere where a selector is expected by prepending the selection string with `<name>/`. The name is only allowed to consist of lower- and upper case latin letters.\n *\n * @param name - The name that the custom query handler will be registered under.\n *\n * @param queryHandler - The {@link CustomQueryHandler | custom query handler} to register.\n *\n * @example\n * ```\n * puppeteer.registerCustomQueryHandler('text', { … });\n * const aHandle = await page.$('text/…');\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "registerCustomQueryHandler(name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", queryHandler: "
                },
                {
                  "kind": "Reference",
                  "text": "CustomQueryHandler",
                  "canonicalReference": "@opennebula/puppeteer!CustomQueryHandler:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "queryHandler",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "registerCustomQueryHandler"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Puppeteer#unregisterCustomQueryHandler:member(1)",
              "docComment": "/**\n * @param name - The name of the query handler to unregistered.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "unregisterCustomQueryHandler(name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "unregisterCustomQueryHandler"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@opennebula/puppeteer!PuppeteerErrors:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type PuppeteerErrors = "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, typeof "
            },
            {
              "kind": "Reference",
              "text": "CustomError",
              "canonicalReference": "@opennebula/puppeteer!CustomError:class"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "PuppeteerErrors",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@opennebula/puppeteer!puppeteerErrors:var",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "puppeteerErrors: "
            },
            {
              "kind": "Reference",
              "text": "PuppeteerErrors",
              "canonicalReference": "@opennebula/puppeteer!PuppeteerErrors:type"
            }
          ],
          "releaseTag": "Public",
          "name": "puppeteerErrors",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@opennebula/puppeteer!PuppeteerEventListener:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PuppeteerEventListener "
            }
          ],
          "releaseTag": "Public",
          "name": "PuppeteerEventListener",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!PuppeteerEventListener#emitter:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "emitter: "
                },
                {
                  "kind": "Reference",
                  "text": "CommonEventEmitter",
                  "canonicalReference": "@opennebula/puppeteer!CommonEventEmitter:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "emitter",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!PuppeteerEventListener#eventName:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eventName: "
                },
                {
                  "kind": "Content",
                  "text": "string | symbol"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "eventName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!PuppeteerEventListener#handler:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "handler: "
                },
                {
                  "kind": "Content",
                  "text": "(...args: any[]) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "handler",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@opennebula/puppeteer!PuppeteerLifeCycleEvent:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type PuppeteerLifeCycleEvent = "
            },
            {
              "kind": "Content",
              "text": "'load' | 'domcontentloaded' | 'networkidle0' | 'networkidle2'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "PuppeteerLifeCycleEvent",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@opennebula/puppeteer!PuppeteerNode:class",
          "docComment": "/**\n * Extends the main {@link Puppeteer} class with Node specific behaviour for fetching and downloading browsers.\n *\n * If you're using Puppeteer in a Node environment, this is the class you'll get when you run `require('puppeteer')` (or the equivalent ES `import`).\n *\n * @remarks\n *\n * The most common method to use is {@link PuppeteerNode.launch | launch}, which is used to launch and connect to a new browser instance.\n *\n * See {@link Puppeteer | the main Puppeteer class} for methods common to all environments, such as {@link Puppeteer.connect}.\n *\n * The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the `PuppeteerNode` class.\n *\n * @example\n *\n * The following is a typical example of using Puppeteer to drive automation:\n * ```js\n * const puppeteer = require('puppeteer');\n *\n * (async () => {\n *   const browser = await puppeteer.launch();\n *   const page = await browser.newPage();\n *   await page.goto('https://www.google.com');\n *   // other actions...\n *   await browser.close();\n * })();\n * ```\n *\n * Once you have created a `page` you have access to a large API to interact with the page, navigate, or find certain elements in that page. The {@link Page | `page` documentation} lists all the available methods.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class PuppeteerNode extends "
            },
            {
              "kind": "Reference",
              "text": "Puppeteer",
              "canonicalReference": "@opennebula/puppeteer!Puppeteer:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "PuppeteerNode",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!PuppeteerNode#connect:member(1)",
              "docComment": "/**\n * This method attaches Puppeteer to an existing browser instance.\n *\n * @remarks\n *\n * @param options - Set of configurable options to set on the browser.\n *\n * @returns Promise which resolves to browser instance.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "connect(options: "
                },
                {
                  "kind": "Reference",
                  "text": "ConnectOptions",
                  "canonicalReference": "@opennebula/puppeteer!ConnectOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Browser",
                  "canonicalReference": "@opennebula/puppeteer!Browser:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "connect"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!PuppeteerNode#createBrowserFetcher:member(1)",
              "docComment": "/**\n * @param options - Set of configurable options to specify the settings of the BrowserFetcher.\n *\n * @returns A new BrowserFetcher instance.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createBrowserFetcher(options: "
                },
                {
                  "kind": "Reference",
                  "text": "BrowserFetcherOptions",
                  "canonicalReference": "@opennebula/puppeteer!BrowserFetcherOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "BrowserFetcher",
                  "canonicalReference": "@opennebula/puppeteer!BrowserFetcher:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "createBrowserFetcher"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!PuppeteerNode#defaultArgs:member(1)",
              "docComment": "/**\n * @param options - Set of configurable options to set on the browser.\n *\n * @returns The default flags that Chromium will be launched with.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "defaultArgs(options?: "
                },
                {
                  "kind": "Reference",
                  "text": "BrowserLaunchArgumentOptions",
                  "canonicalReference": "@opennebula/puppeteer!BrowserLaunchArgumentOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "defaultArgs"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!PuppeteerNode#executablePath:member(1)",
              "docComment": "/**\n * @remarks\n *\n * **NOTE** `puppeteer.executablePath()` is affected by the `PUPPETEER_EXECUTABLE_PATH` and `PUPPETEER_CHROMIUM_REVISION` environment variables.\n *\n * @returns A path where Puppeteer expects to find the bundled browser. The browser binary might not be there if the download was skipped with the `PUPPETEER_SKIP_DOWNLOAD` environment variable.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "executablePath(channel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "channel",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "executablePath"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!PuppeteerNode#launch:member(1)",
              "docComment": "/**\n * Launches puppeteer and launches a browser instance with given arguments and options when specified.\n *\n * @remarks\n *\n * @param options - Set of configurable options to set on the browser.\n *\n * @returns Promise which resolves to browser instance.\n *\n * @example\n *\n * You can use `ignoreDefaultArgs` to filter out `--mute-audio` from default arguments:\n * ```js\n * const browser = await puppeteer.launch({\n *   ignoreDefaultArgs: ['--mute-audio']\n * });\n * ```\n *\n * **NOTE** Puppeteer can also be used to control the Chrome browser, but it works best with the version of Chromium it is bundled with. There is no guarantee it will work with any other version. Use `executablePath` option with extreme caution. If Google Chrome (rather than Chromium) is preferred, a {@link https://www.google.com/chrome/browser/canary.html | Chrome Canary} or {@link https://www.chromium.org/getting-involved/dev-channel | Dev Channel} build is suggested. In `puppeteer.launch([options])`, any mention of Chromium also applies to Chrome. See {@link https://www.howtogeek.com/202825/what%E2%80%99s-the-difference-between-chromium-and-chrome/ | this article} for a description of the differences between Chromium and Chrome. {@link https://chromium.googlesource.com/chromium/src/+/lkgr/docs/chromium_browser_vs_google_chrome.md | This article} describes some differences for Linux users.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "launch(options?: "
                },
                {
                  "kind": "Reference",
                  "text": "LaunchOptions",
                  "canonicalReference": "@opennebula/puppeteer!LaunchOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": " & "
                },
                {
                  "kind": "Reference",
                  "text": "BrowserLaunchArgumentOptions",
                  "canonicalReference": "@opennebula/puppeteer!BrowserLaunchArgumentOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": " & "
                },
                {
                  "kind": "Reference",
                  "text": "BrowserConnectOptions",
                  "canonicalReference": "@opennebula/puppeteer!BrowserConnectOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": " & {\n        product?: "
                },
                {
                  "kind": "Reference",
                  "text": "Product",
                  "canonicalReference": "@opennebula/puppeteer!Product:type"
                },
                {
                  "kind": "Content",
                  "text": ";\n        extraPrefsFirefox?: "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<string, unknown>;\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Browser",
                  "canonicalReference": "@opennebula/puppeteer!Browser:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 12,
                "endIndex": 16
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 11
                  }
                }
              ],
              "name": "launch"
            },
            {
              "kind": "Property",
              "canonicalReference": "@opennebula/puppeteer!PuppeteerNode#product:member",
              "docComment": "/**\n * The name of the browser that is under automation (`\"chrome\"` or `\"firefox\"`)\n *\n * @remarks\n *\n * The product is set by the `PUPPETEER_PRODUCT` environment variable or the `product` option in `puppeteer.launch([options])` and defaults to `chrome`. Firefox support is experimental.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get product(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "product",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@opennebula/puppeteer!PuppeteerNodeLaunchOptions:type",
          "docComment": "/**\n * Utility type exposed to enable users to define options that can be passed to `puppeteer.launch` without having to list the set of all types.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type PuppeteerNodeLaunchOptions = "
            },
            {
              "kind": "Reference",
              "text": "BrowserLaunchArgumentOptions",
              "canonicalReference": "@opennebula/puppeteer!BrowserLaunchArgumentOptions:interface"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "LaunchOptions",
              "canonicalReference": "@opennebula/puppeteer!LaunchOptions:interface"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "BrowserConnectOptions",
              "canonicalReference": "@opennebula/puppeteer!BrowserConnectOptions:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "PuppeteerNodeLaunchOptions",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@opennebula/puppeteer!registerCustomQueryHandler:function(1)",
          "docComment": "/**\n * Registers a {@link CustomQueryHandler | custom query handler}. After registration, the handler can be used everywhere where a selector is expected by prepending the selection string with `<name>/`. The name is only allowed to consist of lower- and upper case latin letters.\n *\n * @param name - The name that the custom query handler will be registered under.\n *\n * @param queryHandler - The {@link CustomQueryHandler | custom query handler} to register.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function registerCustomQueryHandler(name: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", queryHandler: "
            },
            {
              "kind": "Reference",
              "text": "CustomQueryHandler",
              "canonicalReference": "@opennebula/puppeteer!CustomQueryHandler:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "name",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "queryHandler",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "registerCustomQueryHandler"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@opennebula/puppeteer!RemoteAddress:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface RemoteAddress "
            }
          ],
          "releaseTag": "Public",
          "name": "RemoteAddress",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!RemoteAddress#ip:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ip: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "ip",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!RemoteAddress#port:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "port: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "port",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@opennebula/puppeteer!ResourceType:type",
          "docComment": "/**\n * Resource types for HTTPRequests as perceived by the rendering engine.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ResourceType = "
            },
            {
              "kind": "Reference",
              "text": "Lowercase",
              "canonicalReference": "!Lowercase:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Protocol.Network.ResourceType",
              "canonicalReference": "devtools-protocol!Protocol.Network.ResourceType:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ResourceType",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@opennebula/puppeteer!ResponseForRequest:interface",
          "docComment": "/**\n * Required response data to fulfill a request with.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ResponseForRequest "
            }
          ],
          "releaseTag": "Public",
          "name": "ResponseForRequest",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!ResponseForRequest#body:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "body: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "Buffer",
                  "canonicalReference": "!Buffer:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "body",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!ResponseForRequest#contentType:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "contentType: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "contentType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!ResponseForRequest#headers:member",
              "docComment": "/**\n * Optional response headers. All values are converted to strings.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "headers: "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<string, unknown>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "headers",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!ResponseForRequest#status:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "status: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "status",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@opennebula/puppeteer!ScreenshotClip:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ScreenshotClip "
            }
          ],
          "releaseTag": "Public",
          "name": "ScreenshotClip",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!ScreenshotClip#height:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "height: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "height",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!ScreenshotClip#width:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "width: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "width",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!ScreenshotClip#x:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "x",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!ScreenshotClip#y:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "y",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@opennebula/puppeteer!ScreenshotOptions:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ScreenshotOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "ScreenshotOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!ScreenshotOptions#captureBeyondViewport:member",
              "docComment": "/**\n * If you need a screenshot bigger than the Viewport\n *\n * @defaultValue\n *\n * true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "captureBeyondViewport?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "captureBeyondViewport",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!ScreenshotOptions#clip:member",
              "docComment": "/**\n * An object which specifies the clipping region of the page.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clip?: "
                },
                {
                  "kind": "Reference",
                  "text": "ScreenshotClip",
                  "canonicalReference": "@opennebula/puppeteer!ScreenshotClip:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "clip",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!ScreenshotOptions#encoding:member",
              "docComment": "/**\n * Encoding of the image.\n *\n * @defaultValue\n *\n * 'binary'\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "encoding?: "
                },
                {
                  "kind": "Content",
                  "text": "'base64' | 'binary'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "encoding",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!ScreenshotOptions#fullPage:member",
              "docComment": "/**\n * When true, takes a screenshot of the full page.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fullPage?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "fullPage",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!ScreenshotOptions#omitBackground:member",
              "docComment": "/**\n * Hides default white background and allows capturing screenshots with transparency.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "omitBackground?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "omitBackground",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!ScreenshotOptions#path:member",
              "docComment": "/**\n * The file path to save the image to. The screenshot type will be inferred from file extension. If path is a relative path, then it is resolved relative to current working directory. If no path is provided, the image won't be saved to the disk.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "path?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "path",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!ScreenshotOptions#quality:member",
              "docComment": "/**\n * Quality of the image, between 0-100. Not applicable to `png` images.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "quality?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "quality",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!ScreenshotOptions#type:member",
              "docComment": "/**\n * @defaultValue\n *\n * 'png'\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type?: "
                },
                {
                  "kind": "Content",
                  "text": "'png' | 'jpeg'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@opennebula/puppeteer!SecurityDetails:class",
          "docComment": "/**\n * The SecurityDetails class represents the security details of a response that was received over a secure connection.\n *\n * @remarks\n *\n * The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the `SecurityDetails` class.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class SecurityDetails "
            }
          ],
          "releaseTag": "Public",
          "name": "SecurityDetails",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!SecurityDetails#issuer:member(1)",
              "docComment": "/**\n * @returns The name of the issuer of the certificate.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "issuer(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "issuer"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!SecurityDetails#protocol:member(1)",
              "docComment": "/**\n * @returns The security protocol being used, e.g. \"TLS 1.2\".\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protocol(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "protocol"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!SecurityDetails#subjectAlternativeNames:member(1)",
              "docComment": "/**\n * @returns The list of {@link https://en.wikipedia.org/wiki/Subject_Alternative_Name | subject alternative names (SANs)} of the certificate.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subjectAlternativeNames(): "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "subjectAlternativeNames"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!SecurityDetails#subjectName:member(1)",
              "docComment": "/**\n * @returns The name of the subject to which the certificate was issued.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subjectName(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "subjectName"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!SecurityDetails#validFrom:member(1)",
              "docComment": "/**\n * @returns {@link https://en.wikipedia.org/wiki/Unix_time | Unix timestamp} marking the start of the certificate's validity.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "validFrom(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "validFrom"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!SecurityDetails#validTo:member(1)",
              "docComment": "/**\n * @returns {@link https://en.wikipedia.org/wiki/Unix_time | Unix timestamp} marking the end of the certificate's validity.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "validTo(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "validTo"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@opennebula/puppeteer!Serializable:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Serializable = "
            },
            {
              "kind": "Content",
              "text": "number | string | boolean | null | "
            },
            {
              "kind": "Reference",
              "text": "BigInt",
              "canonicalReference": "!BigInt:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "JSONArray",
              "canonicalReference": "@opennebula/puppeteer!JSONArray:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "JSONObject",
              "canonicalReference": "@opennebula/puppeteer!JSONObject:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Serializable",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@opennebula/puppeteer!SerializableOrJSHandle:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type SerializableOrJSHandle = "
            },
            {
              "kind": "Reference",
              "text": "Serializable",
              "canonicalReference": "@opennebula/puppeteer!Serializable:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "JSHandle",
              "canonicalReference": "@opennebula/puppeteer!JSHandle:class"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "SerializableOrJSHandle",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@opennebula/puppeteer!SerializedAXNode:interface",
          "docComment": "/**\n * Represents a Node and the properties of it that are relevant to Accessibility.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SerializedAXNode "
            }
          ],
          "releaseTag": "Public",
          "name": "SerializedAXNode",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!SerializedAXNode#autocomplete:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "autocomplete?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "autocomplete",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!SerializedAXNode#checked:member",
              "docComment": "/**\n * Whether the checkbox is checked, or in a {@link https://www.w3.org/TR/wai-aria-practices/examples/checkbox/checkbox-2/checkbox-2.html | mixed state}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "checked?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | 'mixed'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "checked",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!SerializedAXNode#children:member",
              "docComment": "/**\n * Children of this node, if there are any.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "children?: "
                },
                {
                  "kind": "Reference",
                  "text": "SerializedAXNode",
                  "canonicalReference": "@opennebula/puppeteer!SerializedAXNode:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "children",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!SerializedAXNode#description:member",
              "docComment": "/**\n * An additional human readable description of the node.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "description?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "description",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!SerializedAXNode#disabled:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "disabled?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "disabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!SerializedAXNode#expanded:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "expanded?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "expanded",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!SerializedAXNode#focused:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "focused?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "focused",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!SerializedAXNode#haspopup:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "haspopup?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "haspopup",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!SerializedAXNode#invalid:member",
              "docComment": "/**\n * Whether and in what way this node's value is invalid.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "invalid?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "invalid",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!SerializedAXNode#keyshortcuts:member",
              "docComment": "/**\n * Any keyboard shortcuts associated with this node.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "keyshortcuts?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "keyshortcuts",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!SerializedAXNode#level:member",
              "docComment": "/**\n * The level of a heading.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "level?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "level",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!SerializedAXNode#modal:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "modal?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "modal",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!SerializedAXNode#multiline:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "multiline?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "multiline",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!SerializedAXNode#multiselectable:member",
              "docComment": "/**\n * Whether more than one child can be selected.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "multiselectable?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "multiselectable",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!SerializedAXNode#name:member",
              "docComment": "/**\n * A human readable name for the node.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!SerializedAXNode#orientation:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "orientation?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "orientation",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!SerializedAXNode#pressed:member",
              "docComment": "/**\n * Whether the node is checked or in a mixed state.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pressed?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | 'mixed'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "pressed",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!SerializedAXNode#readonly:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "readonly",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!SerializedAXNode#required:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "required?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "required",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!SerializedAXNode#role:member",
              "docComment": "/**\n * The {@link https://www.w3.org/TR/wai-aria/#usage_intro | role} of the node.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "role: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "role",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!SerializedAXNode#roledescription:member",
              "docComment": "/**\n * A human readable alternative to the role.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "roledescription?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "roledescription",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!SerializedAXNode#selected:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selected?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "selected",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!SerializedAXNode#value:member",
              "docComment": "/**\n * The current value of the node.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "value?: "
                },
                {
                  "kind": "Content",
                  "text": "string | number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "value",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!SerializedAXNode#valuemax:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "valuemax?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "valuemax",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!SerializedAXNode#valuemin:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "valuemin?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "valuemin",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!SerializedAXNode#valuetext:member",
              "docComment": "/**\n * A description of the current value.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "valuetext?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "valuetext",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@opennebula/puppeteer!SnapshotOptions:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SnapshotOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "SnapshotOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!SnapshotOptions#interestingOnly:member",
              "docComment": "/**\n * Prune uninteresting nodes from the tree.\n *\n * @defaultValue\n *\n * true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interestingOnly?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "interestingOnly",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!SnapshotOptions#root:member",
              "docComment": "/**\n * Root node to get the accessibility tree for\n *\n * @defaultValue\n *\n * The root node of the entire page.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "root?: "
                },
                {
                  "kind": "Reference",
                  "text": "ElementHandle",
                  "canonicalReference": "@opennebula/puppeteer!ElementHandle:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@opennebula/puppeteer!Target:class",
          "docComment": "/**\n * @remarks\n *\n * The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the `Target` class.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Target "
            }
          ],
          "releaseTag": "Public",
          "name": "Target",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Target#browser:member(1)",
              "docComment": "/**\n * Get the browser the target belongs to.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "browser(): "
                },
                {
                  "kind": "Reference",
                  "text": "Browser",
                  "canonicalReference": "@opennebula/puppeteer!Browser:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "browser"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Target#browserContext:member(1)",
              "docComment": "/**\n * Get the browser context the target belongs to.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "browserContext(): "
                },
                {
                  "kind": "Reference",
                  "text": "BrowserContext",
                  "canonicalReference": "@opennebula/puppeteer!BrowserContext:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "browserContext"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Target#createCDPSession:member(1)",
              "docComment": "/**\n * Creates a Chrome Devtools Protocol session attached to the target.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createCDPSession(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "CDPSession",
                  "canonicalReference": "@opennebula/puppeteer!CDPSession:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "createCDPSession"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Target#opener:member(1)",
              "docComment": "/**\n * Get the target that opened this target. Top-level targets return `null`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "opener(): "
                },
                {
                  "kind": "Reference",
                  "text": "Target",
                  "canonicalReference": "@opennebula/puppeteer!Target:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "opener"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Target#page:member(1)",
              "docComment": "/**\n * If the target is not of type `\"page\"` or `\"background_page\"`, returns `null`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "page(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Page",
                  "canonicalReference": "@opennebula/puppeteer!Page:class"
                },
                {
                  "kind": "Content",
                  "text": " | null>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "page"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Target#type:member(1)",
              "docComment": "/**\n * Identifies what kind of target this is.\n *\n * @remarks\n *\n * See {@link https://developer.chrome.com/extensions/background_pages | docs} for more info about background pages.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type(): "
                },
                {
                  "kind": "Content",
                  "text": "'page' | 'background_page' | 'service_worker' | 'shared_worker' | 'other' | 'browser' | 'webview'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "type"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Target#url:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "url(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "url"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Target#worker:member(1)",
              "docComment": "/**\n * If the target is not of type `\"service_worker\"` or `\"shared_worker\"`, returns `null`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "worker(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "WebWorker",
                  "canonicalReference": "@opennebula/puppeteer!WebWorker:class"
                },
                {
                  "kind": "Content",
                  "text": " | null>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "worker"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@opennebula/puppeteer!TargetFilterCallback:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type TargetFilterCallback = "
            },
            {
              "kind": "Content",
              "text": "(target: "
            },
            {
              "kind": "Reference",
              "text": "Protocol.Target.TargetInfo",
              "canonicalReference": "devtools-protocol!Protocol.Target.TargetInfo:interface"
            },
            {
              "kind": "Content",
              "text": ") => boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "TargetFilterCallback",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@opennebula/puppeteer!TimeoutError:class",
          "docComment": "/**\n * TimeoutError is emitted whenever certain operations are terminated due to timeout.\n *\n * @remarks\n *\n * Example operations are {@link Page.waitForSelector | page.waitForSelector} or {@link PuppeteerNode.launch | puppeteer.launch}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class TimeoutError extends "
            },
            {
              "kind": "Reference",
              "text": "CustomError",
              "canonicalReference": "@opennebula/puppeteer!CustomError:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "TimeoutError",
          "members": [],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@opennebula/puppeteer!Touchscreen:class",
          "docComment": "/**\n * The Touchscreen class exposes touchscreen events.\n *\n * @remarks\n *\n * The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the `Touchscreen` class.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Touchscreen "
            }
          ],
          "releaseTag": "Public",
          "name": "Touchscreen",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Touchscreen#tap:member(1)",
              "docComment": "/**\n * Dispatches a `touchstart` and `touchend` event.\n *\n * @param x - Horizontal position of the tap.\n *\n * @param y - Vertical position of the tap.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tap(x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "tap"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@opennebula/puppeteer!Tracing:class",
          "docComment": "/**\n * The Tracing class exposes the tracing audit interface.\n *\n * @remarks\n *\n * You can use `tracing.start` and `tracing.stop` to create a trace file which can be opened in Chrome DevTools or {@link https://chromedevtools.github.io/timeline-viewer/ | timeline viewer}.\n *\n * The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the `Tracing` class.\n *\n * @example\n * ```js\n * await page.tracing.start({path: 'trace.json'});\n * await page.goto('https://www.google.com');\n * await page.tracing.stop();\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Tracing "
            }
          ],
          "releaseTag": "Public",
          "name": "Tracing",
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@opennebula/puppeteer!Tracing#_client:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_client: "
                },
                {
                  "kind": "Reference",
                  "text": "CDPSession",
                  "canonicalReference": "@opennebula/puppeteer!CDPSession:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "_client",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@opennebula/puppeteer!Tracing#_path:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_path: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "_path",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@opennebula/puppeteer!Tracing#_recording:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_recording: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "_recording",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Tracing#start:member(1)",
              "docComment": "/**\n * Starts a trace for the current page.\n *\n * @remarks\n *\n * Only one trace can be active at a time per browser.\n *\n * @param options - Optional `TracingOptions`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "start(options?: "
                },
                {
                  "kind": "Reference",
                  "text": "TracingOptions",
                  "canonicalReference": "@opennebula/puppeteer!TracingOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "start"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!Tracing#stop:member(1)",
              "docComment": "/**\n * Stops a trace started with the `start` method.\n *\n * @returns Promise which resolves to buffer with trace data.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stop(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Buffer",
                  "canonicalReference": "!Buffer:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "stop"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@opennebula/puppeteer!TracingOptions:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TracingOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "TracingOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!TracingOptions#categories:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "categories?: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "categories",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!TracingOptions#path:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "path?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "path",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!TracingOptions#screenshots:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "screenshots?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "screenshots",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@opennebula/puppeteer!unregisterCustomQueryHandler:function(1)",
          "docComment": "/**\n * @param name - The name of the query handler to unregistered.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function unregisterCustomQueryHandler(name: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "name",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "unregisterCustomQueryHandler"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@opennebula/puppeteer!UnwrapElementHandle:type",
          "docComment": "/**\n * Unwraps a DOM element out of an ElementHandle instance\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type UnwrapElementHandle<X> = "
            },
            {
              "kind": "Content",
              "text": "X extends "
            },
            {
              "kind": "Reference",
              "text": "ElementHandle",
              "canonicalReference": "@opennebula/puppeteer!ElementHandle:class"
            },
            {
              "kind": "Content",
              "text": "<infer E> ? E : X"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "UnwrapElementHandle",
          "typeParameters": [
            {
              "typeParameterName": "X",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@opennebula/puppeteer!UnwrapPromiseLike:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type UnwrapPromiseLike<T> = "
            },
            {
              "kind": "Content",
              "text": "T extends "
            },
            {
              "kind": "Reference",
              "text": "PromiseLike",
              "canonicalReference": "!PromiseLike:interface"
            },
            {
              "kind": "Content",
              "text": "<infer U> ? U : T"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "UnwrapPromiseLike",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@opennebula/puppeteer!Viewport:interface",
          "docComment": "/**\n * Sets the viewport of the page.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Viewport "
            }
          ],
          "releaseTag": "Public",
          "name": "Viewport",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!Viewport#deviceScaleFactor:member",
              "docComment": "/**\n * Specify device scale factor. See {@link https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio | devicePixelRatio} for more info.\n *\n * @defaultValue\n *\n * 1\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "deviceScaleFactor?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "deviceScaleFactor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!Viewport#hasTouch:member",
              "docComment": "/**\n * Specify if the viewport supports touch events.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hasTouch?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "hasTouch",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!Viewport#height:member",
              "docComment": "/**\n * The page height in pixels.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "height: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "height",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!Viewport#isLandscape:member",
              "docComment": "/**\n * Specifies if the viewport is in landscape mode.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isLandscape?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "isLandscape",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!Viewport#isMobile:member",
              "docComment": "/**\n * Whether the `meta viewport` tag is taken into account.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isMobile?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "isMobile",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!Viewport#width:member",
              "docComment": "/**\n * The page width in pixels.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "width: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "width",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@opennebula/puppeteer!WaitForOptions:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface WaitForOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "WaitForOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!WaitForOptions#timeout:member",
              "docComment": "/**\n * Maximum wait time in milliseconds, defaults to 30 seconds, pass `0` to disable the timeout.\n *\n * @remarks\n *\n * The default value can be changed by using the {@link Page.setDefaultTimeout} or {@link Page.setDefaultNavigationTimeout} methods.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "timeout?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "timeout",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!WaitForOptions#waitUntil:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "waitUntil?: "
                },
                {
                  "kind": "Reference",
                  "text": "PuppeteerLifeCycleEvent",
                  "canonicalReference": "@opennebula/puppeteer!PuppeteerLifeCycleEvent:type"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "PuppeteerLifeCycleEvent",
                  "canonicalReference": "@opennebula/puppeteer!PuppeteerLifeCycleEvent:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "waitUntil",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@opennebula/puppeteer!WaitForSelectorOptions:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface WaitForSelectorOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "WaitForSelectorOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!WaitForSelectorOptions#hidden:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hidden?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "hidden",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!WaitForSelectorOptions#timeout:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "timeout?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "timeout",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!WaitForSelectorOptions#visible:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "visible?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "visible",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@opennebula/puppeteer!WaitForTargetOptions:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface WaitForTargetOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "WaitForTargetOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!WaitForTargetOptions#timeout:member",
              "docComment": "/**\n * Maximum wait time in milliseconds. Pass `0` to disable the timeout.\n *\n * @defaultValue\n *\n * 30 seconds.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "timeout?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "timeout",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@opennebula/puppeteer!WaitTimeoutOptions:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface WaitTimeoutOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "WaitTimeoutOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@opennebula/puppeteer!WaitTimeoutOptions#timeout:member",
              "docComment": "/**\n * Maximum wait time in milliseconds, defaults to 30 seconds, pass `0` to disable the timeout.\n *\n * @remarks\n *\n * The default value can be changed by using the {@link Page.setDefaultTimeout} method.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "timeout?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "timeout",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@opennebula/puppeteer!WebWorker:class",
          "docComment": "/**\n * The WebWorker class represents a {@link https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API | WebWorker}.\n *\n * @remarks\n *\n * The events `workercreated` and `workerdestroyed` are emitted on the page object to signal the worker lifecycle.\n *\n * The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the `WebWorker` class.\n *\n * @example\n * ```js\n * page.on('workercreated', worker => console.log('Worker created: ' + worker.url()));\n * page.on('workerdestroyed', worker => console.log('Worker destroyed: ' + worker.url()));\n *\n * console.log('Current workers:');\n * for (const worker of page.workers()) {\n *   console.log('  ' + worker.url());\n * }\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class WebWorker extends "
            },
            {
              "kind": "Reference",
              "text": "EventEmitter",
              "canonicalReference": "@opennebula/puppeteer!EventEmitter:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "WebWorker",
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@opennebula/puppeteer!WebWorker#_client:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_client: "
                },
                {
                  "kind": "Reference",
                  "text": "CDPSession",
                  "canonicalReference": "@opennebula/puppeteer!CDPSession:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "_client",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@opennebula/puppeteer!WebWorker#_executionContextCallback:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_executionContextCallback: "
                },
                {
                  "kind": "Content",
                  "text": "(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ExecutionContext",
                  "canonicalReference": "@opennebula/puppeteer!ExecutionContext:class"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "_executionContextCallback",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@opennebula/puppeteer!WebWorker#_executionContextPromise:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_executionContextPromise: "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ExecutionContext",
                  "canonicalReference": "@opennebula/puppeteer!ExecutionContext:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "_executionContextPromise",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@opennebula/puppeteer!WebWorker#_url:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_url: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "_url",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!WebWorker#evaluate:member(1)",
              "docComment": "/**\n * If the function passed to the `worker.evaluate` returns a Promise, then `worker.evaluate` would wait for the promise to resolve and return its value. If the function passed to the `worker.evaluate` returns a non-serializable value, then `worker.evaluate` resolves to `undefined`. DevTools Protocol also supports transferring some additional values that are not serializable by `JSON`: `-0`, `NaN`, `Infinity`, `-Infinity`, and bigint literals. Shortcut for `await worker.executionContext()).evaluate(pageFunction, ...args)`.\n *\n * @param pageFunction - Function to be evaluated in the worker context.\n *\n * @param args - Arguments to pass to `pageFunction`.\n *\n * @returns Promise which resolves to the return value of `pageFunction`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "evaluate<ReturnType extends "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ">(pageFunction: "
                },
                {
                  "kind": "Reference",
                  "text": "Function",
                  "canonicalReference": "!Function:interface"
                },
                {
                  "kind": "Content",
                  "text": " | string"
                },
                {
                  "kind": "Content",
                  "text": ", ...args: "
                },
                {
                  "kind": "Content",
                  "text": "any[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<ReturnType>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "pageFunction",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "args",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "ReturnType",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "evaluate"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!WebWorker#evaluateHandle:member(1)",
              "docComment": "/**\n * The only difference between `worker.evaluate` and `worker.evaluateHandle` is that `worker.evaluateHandle` returns in-page object (JSHandle). If the function passed to the `worker.evaluateHandle` returns a `Promise`, then `worker.evaluateHandle` would wait for the promise to resolve and return its value. Shortcut for `await worker.executionContext()).evaluateHandle(pageFunction, ...args)`\n *\n * @param pageFunction - Function to be evaluated in the page context.\n *\n * @param args - Arguments to pass to `pageFunction`.\n *\n * @returns Promise which resolves to the return value of `pageFunction`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "evaluateHandle<HandlerType extends "
                },
                {
                  "kind": "Reference",
                  "text": "JSHandle",
                  "canonicalReference": "@opennebula/puppeteer!JSHandle:class"
                },
                {
                  "kind": "Content",
                  "text": " "
                },
                {
                  "kind": "Content",
                  "text": "= "
                },
                {
                  "kind": "Reference",
                  "text": "JSHandle",
                  "canonicalReference": "@opennebula/puppeteer!JSHandle:class"
                },
                {
                  "kind": "Content",
                  "text": ">(pageFunction: "
                },
                {
                  "kind": "Reference",
                  "text": "EvaluateHandleFn",
                  "canonicalReference": "@opennebula/puppeteer!EvaluateHandleFn:type"
                },
                {
                  "kind": "Content",
                  "text": ", ...args: "
                },
                {
                  "kind": "Reference",
                  "text": "SerializableOrJSHandle",
                  "canonicalReference": "@opennebula/puppeteer!SerializableOrJSHandle:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "JSHandle",
                  "canonicalReference": "@opennebula/puppeteer!JSHandle:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 15
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "pageFunction",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  }
                },
                {
                  "parameterName": "args",
                  "parameterTypeTokenRange": {
                    "startIndex": 8,
                    "endIndex": 10
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "HandlerType",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "name": "evaluateHandle"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!WebWorker#executionContext:member(1)",
              "docComment": "/**\n * Returns the ExecutionContext the WebWorker runs in\n *\n * @returns The ExecutionContext the web worker runs in.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "executionContext(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ExecutionContext",
                  "canonicalReference": "@opennebula/puppeteer!ExecutionContext:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "executionContext"
            },
            {
              "kind": "Method",
              "canonicalReference": "@opennebula/puppeteer!WebWorker#url:member(1)",
              "docComment": "/**\n * @returns The URL of this web worker.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "url(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "url"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@opennebula/puppeteer!WrapElementHandle:type",
          "docComment": "/**\n * Wraps a DOM element into an ElementHandle instance\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type WrapElementHandle<X> = "
            },
            {
              "kind": "Content",
              "text": "X extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": " ? "
            },
            {
              "kind": "Reference",
              "text": "ElementHandle",
              "canonicalReference": "@opennebula/puppeteer!ElementHandle:class"
            },
            {
              "kind": "Content",
              "text": "<X> : X"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "WrapElementHandle",
          "typeParameters": [
            {
              "typeParameterName": "X",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        }
      ]
    }
  ]
}
